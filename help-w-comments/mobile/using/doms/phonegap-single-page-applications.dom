<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-05-04T05:14:06.746-0400" name="topicBrowsingSortDate" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/mobile/using/phonegap-single-page-applications.html" name="publishExternalURL" /> 
  <meta content="Follow this page to learn about single page applications, that is, you can create an application that performs identically to a desktop or mobile application." name="seoDescription" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="ddde4ac9-6837-430d-aa2e-7176930b7013" name="jcr:uuid" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="Single Page Applications" name="navTitle" /> 
  <meta content="/content/help/en/experience-manager/6-4/mobile/morehelp/developing-adobe-phonegap-enterprise;/content/help/en/experience-manager/6-4/mobile/morehelp/developing-adobe-phonegap-enterprise" name="moreHelpPaths" /> 
  <meta content="2017-12-13T19:01:32.418-0500" name="jcr:created" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2018-05-11T10:03:07.276-0400" name="cq:lastModified" /> 
  <meta content="2018-05-04T05:14:06.746-0400" name="lastPublishExternalDate" /> 
  <meta content="bohnert" name="cq:lastReplicatedBy" /> 
  <meta content="2017-10-31T16:25:58.424-0400" name="firstPublishExternalDate" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="Single Page Applications" name="seoTitle" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="content_type:reference;products:SG_EXPERIENCEMANAGER/6.4/MOBILE;topic_tags:developing-adobe-phonegap-enterprise" name="cq:tags" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2017-10-12T21:46:00.000-0400" name="qaDate" /> 
  <meta content="2018-05-04T05:14:06.746-0400" name="publishExternalDate" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="7f55baca-530a-4ae1-ba5a-27c9f1df7428" name="jcr:predecessors" /> 
  <meta content="2018-05-11T10:03:07.276-0400" name="locHandOffDate" /> 
  <meta content="2018-05-04T05:14:06.762-0400" name="cq:lastReplicated" /> 
  <meta content="/content/docs/en/aem/6-3/develop/mobile-apps/developing-in-phonegap/developing-mobile-applications/single-page-applications" name="qaNotes" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="Single Page Applications" name="jcr:title" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/MOBILE" name="primaryProductTag" /> 
 </head> 
 <body> 
  <note> 
   <p>Adobe recommends using the SPA Editor for projects that require single page application framework-based client-side rendering (e.g. React). <a href="../../sites/developing/using/spa-overview.md">Learn more</a>.</p> 
  </note> 
  <p><a href="http://en.wikipedia.org/wiki/Single-page_application">Single-Page Applications</a> (SPA) have reached critical mass, widely regarded as the most effective pattern for building seamless experiences with web technology. By following a SPA pattern, you can create an application that performs identically to a desktop or mobile application, but reaches a multitude of device platforms and form factors due to its foundation in open web standards. </p> 
  <p>Generally speaking, SPAs appear more performant than traditional page-based web sites because they typically load a complete HTML page <strong>only once</strong> (including CSS, JS, and supporting font content), and then load only exactly what is necessary each time a change of state occurs in the app. What's necessary for this change of state can vary based on the set of technologies chosen, but typically includes a single HTML fragment to replace the existing 'view', and the execution of a block of JS code to wire up the new view and perform any client side template rendering that may be necessary. The speed of this state change can be improved even further by supporting template caching mechanisms, or even offline access to template content if Adobe PhoneGap is used.</p> 
  <p>AEM 6.1 supports the building and management of SPAs via AEM Apps. This article will provide an introduction to the concepts behind the SPA and how they leverage <a href="https://angularjs.org/">AngularJS</a> to bring your brand to the App Store and Google Play.</p> 
  <h3>SPA in AEM Apps</h3> 
  <p>The Single-Page Application framework in AEM Apps enables the high performance of an AngularJS app, while empowering authors (or other non-technical personnel) to create and manage the app's content via the touch-optimized, drag-and-drop editor environment that has traditionally been reserved for managing web sites. Already have a site built with AEM? You'll find that reusing your content, components, workflows, assets, and permissions is easy with AEM Apps. </p> 
  <h3>AngularJS Application Module</h3> 
  <p>AEM Apps handles much of the AngularJS configuration for you, including putting together your app's top-level module. By default this module is named 'AEMAngularApp' and the script responsible for it's generation can be found (and overlaid) at /libs/mobileapps/components/angular/ng-page/angular-app-module.js.jsp. </p> 
  <p>Part of the initialization of your app involves specifying which AngularJS modules the app depends upon. The list of modules used by your app is specified by a script located at /libs/mobileapps/components/angular/ng-page/angular-module-list.js.jsp, and can be overlaid by your own apps' page component to pull in any additional AngularJS modules that your app requires. As an example, compare the above script with the Geometrixx implementation (located at /apps/geometrixx-outdoors-app/components/angular/ng-geometrixx-page/angular-module-list.js.jsp).</p> 
  <p>To support navigation between the distinct states in your app, the angular-app-module script iterates through all the descendant pages of your top level app page to generate a set of 'routes' and configures each path on Angular's $routeProvider service. For an example of how this looks in practice, take a look at the angular-app-module script generated by the Geometrixx Outdoors app sample: (link requires a local instance) <a href="http://localhost:4502/content/phonegap/conference-app/en/home.angular-app-module.js">http://localhost:4502/content/phonegap/conference-app/en/home.angular-app-module.js</a></p> 
  <p>Digging in to the generated AEMAngularApp, you will find a series of routes specified as follows:</p> 
  <codeblock class="syntax xml">
    $routeProvider!!discoiqbr!!.when('/content/phonegap/geometrixx-outdoors/en/home/products/:id',&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;templateUrl:&amp;nbsp;'home/products.template.html',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;controller:&amp;nbsp;'contentphonegapgeometrixxoutdoorsenhomeproducts'!!discoiqbr!!}) 
  </codeblock> 
  <p>The above sample in particular illustrates an example of passing a parameter as part of the path. In this example we are indicating that when a path that meets the pattern specified (/content/phonegap/geometrixx-outdoors/en/home/products/:id) is requested, it should be handled by the home/products.template.html template and use the 'contentphonegapgeometrixxoutdoorsenhomeproducts' controller. </p> 
  <p>The template to load when this route is requested is specified by the templateUrl property. This template will contain the HTML from AEM components that have been included on the page, as well as any AngularJS directives necessary for wiring up the client side of the application. For an example of a AngularJS directive in a Geometrixx component, take a look at line 45 of the swipe-carousel's template.jsp (/apps/geometrixx-outdoors-app/components/swipe-carousel/template.jsp).</p> 
  <h3>Page Controllers</h3> 
  <p>In Angular's own words, "a Controller is a JavaScript constructor function that is used to augment the Angular Scope." (<a href="https://docs.angularjs.org/guide/controller">source</a>) Each page in an AEM App is automatically wired up to a controller that can be augmented by any controller which specifies a `frameworkType` of `angular`. Take a look at the ng-text component as an example (/libs/mobileapps/components/angular/ng-text), including the cq:template node which makes sure each time this component is added to a page it includes this important property.</p> 
  <p>For a more complex controller example, open up the ng-template-page controller.jsp script (located at /apps/geometrixx-outdoors-app/components/angular/ng-template-page). Of particular interest is the javascript code it generates when executed, which renders as follows:</p> 
  <codeblock class="syntax xml">
    //&amp;nbsp;Controller&amp;nbsp;for&amp;nbsp;page&amp;nbsp;'products'!!discoiqbr!!.controller('contentphonegapgeometrixxoutdoorsenhomeproducts',&amp;nbsp;['$scope',&amp;nbsp;'$http',&amp;nbsp;'$routeParams',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;function($scope,&amp;nbsp;$http,&amp;nbsp;$routeParams)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;sku&amp;nbsp;=&amp;nbsp;$routeParams.id;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;productPath&amp;nbsp;=&amp;nbsp;'/'&amp;nbsp;+&amp;nbsp;sku.substring(0,&amp;nbsp;2)&amp;nbsp;+&amp;nbsp;'/'&amp;nbsp;+&amp;nbsp;sku.substring(0,&amp;nbsp;4)&amp;nbsp;+&amp;nbsp;'/'&amp;nbsp;+&amp;nbsp;sku;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;data&amp;nbsp;=&amp;nbsp;$http.get('home/products'&amp;nbsp;+&amp;nbsp;productPath&amp;nbsp;+&amp;nbsp;'.angular.json'&amp;nbsp;+&amp;nbsp;cacheKiller);!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;ng-product&amp;nbsp;component&amp;nbsp;controller&amp;nbsp;(path:&amp;nbsp;content-par/ng-product)&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data.then(function(response)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$scope.contentparngproduct&amp;nbsp;=&amp;nbsp;response.data["content-par/ng-product"].items;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;ng-image&amp;nbsp;component&amp;nbsp;controller&amp;nbsp;(path:&amp;nbsp;content-par/ng-product/ng-image)&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data.then(function(response)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$scope.contentparngproductngimage&amp;nbsp;=&amp;nbsp;response.data["content-par/ng-product/ng-image"].items;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!]) 
  </codeblock> 
  <p>In the above example, you will note that we are taking a parameter from the `$routeParams` service and then massaging it into the directory structure that our JSON data is stored in. By dealing with the sku `id` in this manner, we are able to deliver a single Product template that can render the product data for potentially thousands of distinct products. This is a far more scalable model that requiring an individual route for each item in a (potentially) massive product database.</p> 
  <p>There are also two components at work here: ng-product augments the scope with the data it extracts from the above `$http` call. There is also an ng-image on this page which in turn also augments the scope with the value it retrieves from the response. By virtue of Angular's `$http` service, each component will wait patiently until the request is finished and the promise it created is fulfilled. </p> 
  <h3>The Next Steps</h3> 
  <p>Once you have learnt about the Single Page Applications, see <a href="../../mobile/using/phonegap-apps-pg-cli.md">Developing Apps with PhoneGap CLI</a>.</p> 
 </body> 
</html>