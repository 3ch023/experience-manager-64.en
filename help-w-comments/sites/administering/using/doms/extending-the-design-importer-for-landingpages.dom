<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2017-10-12T21:46:00.000-0400" name="qaDate" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="Extending and Configuring the Design Importer for Landing Pages" name="jcr:title" /> 
  <meta content="2018-04-03T07:03:32.732-0400" name="lastPublishExternalDate" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="2018-04-03T07:03:32.732-0400" name="topicBrowsingSortDate" /> 
  <meta content="fcbf576d-868a-4cbf-85bc-8959abd0c175" name="jcr:uuid" /> 
  <meta content="msm-service" name="contentOwner" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:personalization;content_type:reference" name="cq:tags" /> 
  <meta content="2017-10-31T16:25:05.489-0400" name="firstPublishExternalDate" /> 
  <meta content="locales:fr;locales:de;locales:ja" name="locLangTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2018-03-15T09:03:19.101-0400" name="jcr:created" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="bohnert" name="cq:lastReplicatedBy" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="Extending and Configuring the Design Importer for Landing Pages" name="navTitle" /> 
  <meta content="audience:administering" name="primaryAudienceTag" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2018-09-14T19:32:56.703-0400" name="locHandOffDate" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="Learn how to configure the Design Importer for landing pages." name="seoDescription" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/administering/morehelp/personalization;/content/help/en/experience-manager/6-4/sites/administering/morehelp/personalization" name="moreHelpPaths" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/administering/using/extending-the-design-importer-for-landingpages.html" name="publishExternalURL" /> 
  <meta content="2018-12-03T09:32:45.477-0500" name="cq:lastModified" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="bohnert" name="cq:lastModifiedBy" /> 
  <meta content="2018-12-03T09:32:52.136-0500" name="cq:lastReplicated" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2018-04-03T07:03:32.732-0400" name="publishExternalDate" /> 
  <meta content="Extending and Configuring the Design Importer for Landing Pages" name="seoTitle" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="/content/docs/en/aem/6-3/administer/personalization/campaigns/extending-the-design-importer-for-landingpages" name="qaNotes" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="9d0dd16e-40dc-4b94-8cd0-289cd8c4994a" name="jcr:predecessors" /> 
 </head> 
 <body> 
  <p>This section describes how to configure and if desired, extend the design importer for landing pages. Working with Landing Pages after import is covered in <a href="../../../sites/authoring/using/landingpages.md">Landing Pages.</a></p> 
  <p><strong>Making the design importer extract your custom component</strong></p> 
  <p>Here are the logical steps to make design importer recognize your custom component<br /> </p> 
  <p>1. Create a TagHandler</p> 
  <ul> 
   <li>A tag handler is a POJO that handles HTML tags of a specific kind. The “kind” of HTML tags your TagHandler can handle is defined via the TagHandlerFactory’s OSGi property “tagpattern.name”. This OSGi property is essentially a regex that should match the input html tag you wish to handle. All the nested tags would be thrown to your tag handler for handling. For example if you register for a div that contains a nested &amp;lt;p&amp;gt; tag, the &amp;lt;p&amp;gt; tag would also be thrown to your TagHandler and it’s up to you how you wish to take care of it.</li> 
   <li>The tag handler interface is similar to a SAX content handler interface. It receives SAX events for each html tag. As a tag handler provider, you need to implement certain lifecycle methods which are automatically called by the design importer framework.</li> 
  </ul> 
  <p>2. Create its corresponding TagHandlerFactory.</p> 
  <ul> 
   <li>The tag handler factory is an OSGi component(singleton) that’s responsible for spawning instances of your tag handler.</li> 
   <li>your tag handler factory must expose an OSGi property called “tagpattern.name” the value of which is matched against the input html tag.</li> 
   <li> If there are multiple tag handlers matching the input html tag, the one with a higher ranking is picked. The ranking itself is exposed as an OSGi property <strong>service.ranking</strong>.</li> 
   <li>The TagHandlerFactory is an OSGi component. Any references that you wish to provide to your TagHandler must be via this factory.</li> 
  </ul> 
  <p>3. Make sure that your TagHandlerFactory has a better ranking if you wish to override the default.</p> 
  <h2>Preparing the HTML for Import</h2> 
  <p>After you have created an importer page, you can import your full HTML landing page. To import your HTML landing page, you need to first zip its contents into a design package. The design package contains your HTML landing page along with the referenced assets (images, css, icons, scripts, and so on).</p> 
  <p>The following cheat sheet provides a sample for how to prepare your HTML for import:</p> 
  <div> 
   <p>Landing page Cheat Sheet</p> 
   <p><a alt="CheatSheet.zip" href="assets/cheatsheet.zip">Get File</a></p> 
  </div> 
  <h3>Zip file layout and requirements</h3> 
  <note> 
   <p>At this point, ZIP files can only contain one HTML page or one part of a page.<br /> </p> 
  </note> 
  <p>A sample layout of the zip is as follows:</p> 
  <ul> 
   <li>/index.html -&amp;gt; landing page HTML file</li> 
   <li>/css -&amp;gt; to add into the CSS clientlib</li> 
   <li>/img -&amp;gt; all images and assets</li> 
   <li>/js -&amp;gt; to add into the JS clientlib</li> 
  </ul> 
  <p>The layout is based on the HTML5 Boilerplate best practices layout. Read more at <a href="http://html5boilerplate.com/">http://html5boilerplate.com/</a></p> 
  <note> 
   <p>At a minimum, the design package <strong>must</strong> contain an <strong>index.html</strong> file at the root level. In case the landing page to be imported has a mobile version as well, then the zip must contain a <strong>mobile.index.html</strong> along with <strong>index.html</strong> at the root level.</p> 
  </note> 
  <h3>Preparing the Landing Page HTML</h3> 
  <p>To be able to import the HTML, you need to add a canvas div to the landing page HTML. </p> 
  <p>The canvas div is an html <strong>div</strong> with<span class="code"> id="cqcanvas"</span> that must be inserted within the HTML <span class="code">&amp;lt;body&amp;gt;</span> tag and must wrap the content intended for conversion.</p> 
  <p>A sample snippet of the landing page HTML after addition of the canvas div is as follows:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;!doctype&amp;nbsp;html&gt;!!discoiqbr!!&lt;html&amp;nbsp;lang="en"&gt;!!discoiqbr!!&lt;head&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;meta&amp;nbsp;charset="utf-8"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;title&gt;&lt;/title&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;meta&amp;nbsp;name="description"&amp;nbsp;content=""&gt;!!discoiqbr!!&lt;/head&gt;!!discoiqbr!!&lt;body&gt;!!discoiqbr!!&amp;nbsp;&lt;div&amp;nbsp;id="cqcanvas"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;HTML&amp;nbsp;content&amp;nbsp;intended&amp;nbsp;for&amp;nbsp;conversion&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&lt;/div&gt;!!discoiqbr!!&lt;/body&gt;!!discoiqbr!!&lt;/html&gt; 
  </codeblock> 
  <h3>Preparing the HTML to include editable AEM components</h3> 
  <p>When you import a landing page, you have the choice to import the page as-is, which means that after the landing page is imported you cannot edit any of the imported items in AEM (you can still add additional AEM components on the page).</p> 
  <p>Before you import the landing page, you may want to convert some of the parts of the landing page so that they are editable AEM components. This allows you to quickly edit parts of the landing page even after the landing page design has been imported.</p> 
  <p>You do this by adding the <span class="code">data-cq-component</span> to the appropriate component in the HTML file that you import. </p> 
  <p>The following section describes how to edit your HTML file so that you convert certain parts of your landing pages into different editable AEM components. Components are described in detail at <a href="../../../sites/authoring/using/landingpages.md">Landing Pages Components</a>.</p> 
  <note> 
   <p>HTML markup to convert parts of the landing page into AEM components have both a long form and a shorthand tag declaration. Both are described for each component. </p> 
  </note> 
  <h3>Limitations</h3> 
  <p>Before importing, please note the following limitations:</p> 
  <h4>Any attribute like class or id applied on the &amp;amp;lt;body&gt; tag is not preserved</h4> 
  <p>If any attribute like id or class is applied on the body tag for example <span class="code">&amp;lt;body id="container"&amp;gt;</span> then it is not preserved after the import. So the design being imported should not have any dependencies on the attributes applied on the <span class="code">&amp;lt;body&amp;gt;</span> tag.</p> 
  <h4>Drag and Drop zip</h4> 
  <p>Drag/Drop zip upload is not supported for Internet Explorer and Firefox versions 3.6 and earlier. To upload a design when using these browsers, click the drop file zone to open up a file upload dialog box and upload your design using that dialog.</p> 
  <draft-comment type="draft"> 
   <img imageRotate="0" src="assets/chlimage_1-350.png" /> 
  </draft-comment> 
  <p>The browsers that support "drag and drop" of the design zip are Chrome, Safari5.x, Firefox 4 and above.</p> 
  <h4>Modernizr is not supported</h4> 
  <p><span class="code">Modernizr.js</span> is a javascript based tool that detects native capabilities of browsers and detects if they are suited for html5 elements or not. Designs that use Modernizr for enhancing support in older versions of different browsers can cause import issues in the landing page solution. <span class="code">Modernizr.js</span> scripts are not supported with the Design importer.</p> 
  <h4>Page properties are not preserved at the time of importing design package</h4> 
  <p>Any page property (e.g. Custom Domain, Enforcing HTTPS, etc.) set for a page (that uses Blank Landing Page template) prior to importing the design package are lost after the design has been imported. Therefore, the recommended practice is to set the page properties after importing the design package.</p> 
  <h4>HTML only markup assumed</h4> 
  <p>Upon import the markup is sanitized for security reasons and in order to avoid importing and publishing invalid markup. This assumes HTML-only markup and all other form of elements such as inline SVG or Web Components will be filtered out.</p> 
  <h3>Text</h3> 
  <p>HTML markup to insert a text component (<span class="code">foundation/components/text</span>) in the HTML within design package:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="text"&gt;&amp;nbsp;&lt;p&gt;This&amp;nbsp;is&amp;nbsp;some&amp;nbsp;editable&amp;nbsp;text&lt;/p&gt;&amp;nbsp;&lt;/div&gt; 
  </codeblock> 
  <p>Including the above markup in the HTML, does the following:</p> 
  <ul> 
   <li>Creates an editable AEM text component (<span class="code">sling:resourceType=foundation/components/text</span>) in the landing page created after importing the design package.</li> 
   <li>Sets the <span class="code">text</span> property of the created text component to the HTML enclosed within the <span class="code">div</span>.</li> 
  </ul> 
  <p><strong>Shorthand component tag declaration</strong>:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;p&amp;nbsp;data-cq-component="text"&gt;Text&amp;nbsp;component&amp;nbsp;shorthand&lt;/p&gt; 
  </codeblock> 
  <p><strong>Text with a list</strong></p> 
  <p>To add a text with a list:</p> 
  <ul> 
   <li>1st</li> 
   <li>2nd</li> 
  </ul> 
  <p>that can be edited in the RTE editor:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="text"&gt;&lt;p&gt;This&amp;nbsp;is&amp;nbsp;text&amp;nbsp;with&amp;nbsp;a&amp;nbsp;list:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1st&lt;/li&gt;&lt;li&gt;2nd&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;edited&amp;nbsp;with&amp;nbsp;the&amp;nbsp;RTE&amp;nbsp;editor&lt;/p&gt;&lt;/div&gt; 
  </codeblock> 
  <p><strong>Text with color</strong></p> 
  <p>To add a text with color (pink) that can be edited in the RTE editor:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;class="pink"&amp;nbsp;data-cq-component="text"&gt;&lt;p&gt;This&amp;nbsp;is&amp;nbsp;pink&amp;nbsp;text.&lt;/p&gt;&lt;p&gt;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;edited&amp;nbsp;with&amp;nbsp;the&amp;nbsp;RTE&amp;nbsp;editor&lt;/p&gt;&lt;/div&gt; 
  </codeblock> 
  <h3>Title</h3> 
  <p>HTML markup to insert a title component (<span class="code">wcm/landingpage/components/title</span>) in the HTML within design package:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="title"&gt;&amp;nbsp;&lt;h1&gt;This&amp;nbsp;is&amp;nbsp;some&amp;nbsp;editable&amp;nbsp;title&amp;nbsp;text&lt;/h1&gt;&amp;nbsp;&lt;/div&gt; 
  </codeblock> 
  <p>Including the above markup in the HTML, does the following:</p> 
  <ul> 
   <li>Creates an editable AEM title component (<span class="code">sling:resourceType=wcm/landingpage/components/title</span>) in the landing page created after importing the design package.</li> 
   <li>Sets the<span class="code"> jcr:title</span> property of the created title component to the text within heading tag wrapped within div.</li> 
   <li>Sets the <span class="code">type</span> property to the heading tag, in this case <span class="code">h1</span>.</li> 
  </ul> 
  <p>The title component supports 7 types - <span class="code">h1, h2, h3, h4, h5, h6</span> and <span class="code">default</span>.</p> 
  <p><strong>Shorthand component tag declaration</strong>:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;h1&amp;nbsp;data-cq-component="title"&gt;Title&amp;nbsp;component&amp;nbsp;shorthand&lt;/h1&gt; 
  </codeblock> 
  <h3>Image</h3> 
  <p>HTML markup to insert an image component (foundation/components/image) in the HTML within design package:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="image"&gt;!!discoiqbr!!&lt;img&amp;nbsp;src="img/video1.png"&amp;nbsp;alt="Video&amp;nbsp;about&amp;nbsp;Polar&amp;nbsp;Brake&amp;nbsp;Goggles&amp;nbsp;in&amp;nbsp;action"&amp;nbsp;title="Polar&amp;nbsp;Brake&amp;nbsp;Goggles"&amp;nbsp;width="300"&amp;nbsp;height="200"&amp;nbsp;/&gt;!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <p>Including the above markup in the HTML, does the following:</p> 
  <ul> 
   <li>Creates an editable AEM image component (<span class="code">sling:resourceType=foundation/components/image</span>) in the landing page created after importing the design package.</li> 
   <li>Sets the <span class="code">fileReference</span> property of the created image component to the path to which image specified in src attribute is imported.</li> 
   <li>Sets the <span class="code">alt</span> property to the value of alt attribute in the img tag.</li> 
   <li>Sets the <span class="code">title</span> property to the value of title attribute in the img tag.</li> 
   <li>Sets the <span class="code">width</span> property to the value of width attribute in the img tag.</li> 
   <li>Sets the <span class="code">height</span> property to the value of height attribute in the img tag.</li> 
  </ul> 
  <p><strong>Shorthand component tag declaration:</strong></p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;img&amp;nbsp;data-cq-component="image"&amp;nbsp;src="test.png"&amp;nbsp;alt="Image&amp;nbsp;component&amp;nbsp;shorthand"/&gt; 
  </codeblock> 
  <h4>Absolute URL img src not supported within Image component Div</h4> 
  <p>If an <span class="code">&amp;lt;img&amp;gt;</span> tag with an absolute url src is attempted for component conversion, an appropriate <strong>UnsupportedTagContentException</strong> is raised. For example, the following is not supported:</p> 
  <p><span class="code">&amp;lt;div data-cq-component="image"&amp;gt;</span></p> 
  <p><span class="code">&amp;lt;img src="http://cdn.printfriendly.com/pf-button.gif" alt="Print Friendly and PDF"/&amp;gt;</span></p> 
  <p><span class="code">&amp;lt;/div&amp;gt;</span></p> 
  <p>But otherwise, absolute URL images are supported for img tags that are not part of Image Component div.</p> 
  <h3>Call-to-action components</h3> 
  <p>You can mark part of landing page for importing as an "editable Call to action component" - such imported call-to-action components can be edited after importing the landing page. AEM includes the following CTA components:<br /> </p> 
  <ul> 
   <li>Click Through Link - Lets you add a text link that when clicked takes the visitor to a target URL.</li> 
   <li>Graphical Link - Lets you add an image that when clicked takes the visitor to a target URL.</li> 
  </ul> 
  <h4>Click Through Link</h4> 
  <p>This CTA component can be used to add a text link on the landing page. </p> 
  <p>Supported properties</p> 
  <ul> 
   <li>Label, with bold, italics and underline options</li> 
   <li>Target URL, supports third party and AEM url</li> 
   <li>Page rendering options (same window, new window etc..)</li> 
  </ul> 
  <p>HTML tag to include click through component in the imported zip. Here href maps to target url, "View Product Details" maps to label and so on.</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;id="cqcanvas"&gt;!!discoiqbr!!.!!discoiqbr!!.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;data-cq-component="clickThroughLink"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a&amp;nbsp;href="/content/we-retail/us/en/products/equipment/snow-sports/flying-snowboard.html"&gt;View&amp;nbsp;Product&amp;nbsp;Details&amp;nbsp;&amp;nbsp;&gt;&lt;/a&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/div&gt;!!discoiqbr!!.!!discoiqbr!!.!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <p>This component can be used in any standalone application or can be imported from zip.</p> 
  <p><strong>Shorthand component tag declaration</strong>:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;href="/somelink.html"&amp;nbsp;data-cq-component="clickThroughLink"&gt;Click&amp;nbsp;Through&amp;nbsp;Link&amp;nbsp;shorthand&lt;/a&gt; 
  </codeblock> 
  <h4>Graphical Link</h4> 
  <p>This CTA component can be used to add any graphical image with link on the landing page. The image can be a simple button or any graphical image as background. When the image is clicked, the user will be taken to the target URL specified in the component properties. It is a part of "Call to Action" group.</p> 
  <p>Supported properties</p> 
  <ul> 
   <li>Image cropping, rotation</li> 
   <li>Hover text, description, size in px</li> 
   <li>Target URL, supports third party and AEM url</li> 
   <li>Page rendering options (same window, new window etc..)</li> 
  </ul> 
  <p>HTML tag to include graphical link component in the imported zip. Here href will map to target url, img src will be the rendering image, "title" will be taken as hover text and so on.</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;id="cqcanvas"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;data-cq-component="clickThroughGraphicalLink"&gt;&lt;a&amp;nbsp;href="http://www.adobe.com/go/wem"&gt;&lt;img&amp;nbsp;src="img/call-to-action-button.png"&amp;nbsp;title="Click&amp;nbsp;Here&amp;nbsp;to&amp;nbsp;Learn&amp;nbsp;More"&amp;nbsp;/&gt;&lt;/a&gt;&lt;/div&gt;!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <p><strong>Shorthand component tag declaration</strong>:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;href="/somelink.html"&amp;nbsp;data-cq-component="clickThroughGraphicalLink"&gt;&lt;img&amp;nbsp;src="linkimage.png"&amp;nbsp;alt="Click&amp;nbsp;Through&amp;nbsp;Graphical&amp;nbsp;Link&amp;nbsp;shorthand"/&gt;&lt;/a&gt; 
  </codeblock> 
  <note> 
   <p> </p> 
   <p>To create a clickthroughgraphical link, you need to wrap an anchor tag and the image tag inside a div with <span class="code">data-cq-component="clickthroughgraphicallink"</span> attribute.</p> 
   <p>eg. <span class="code">&amp;lt;div data-cq-component="clickthroughlink"&amp;gt; &amp;lt;a href="http://myURLhere/"&amp;gt;&amp;lt;img src="image source here"&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt;</span></p> 
   <p>Other ways to associate an image with an anchor tag using CSS are not supported for example the following markup will not work:</p> 
   <p><span class="code">&amp;lt;div data-cq-component="clickthroughgraphicallink"&amp;gt;</span></p> 
   <p><span class="code">&amp;lt;a class="hasBackground" href="http://myURLhere/"&amp;gt;&amp;lt;/a&amp;gt;</span></p> 
   <p><span class="code">&amp;lt;/div&amp;gt;</span></p> 
   <p>with an associated<span class="code"> css .hasbackground { background-image: pathtoimage }</span></p> 
   <p> </p> 
  </note> 
  <h3>Lead Form</h3> 
  <p>A lead form is a form that is used to collect a visitor/lead's profile information. This information can be stored and used later to do an effective marketing based on the information. This information generally include title, name, email, date of birth, address, interest, and so on. It is a part of "CTA Lead form" group.</p> 
  <p><strong>Supported features</strong></p> 
  <ul> 
   <li>Pre-defined lead fields - first-name, last-name, address, dob, gender, about, userId, emailId, submit button are available in the sidekick. Simply drag/drop required component in your lead form.</li> 
   <li>With the help of these components author can design a standalone lead form, these fields corresponds to lead form fields. In standalone or imported zip application user can add extra fields using cq:form or cta lead form fields, name and design them according to the requirements.</li> 
   <li>Map lead form fields using specific pre-defined names of CTA lead form, for example - firstName for first-name in lead form, and so on.</li> 
   <li>Fields that are not mapped to lead form will map to cq:form components - text, radio, checkbox, dropdown, hidden, password.</li> 
   <li>User can provide the title using “label” tag and can provide styling by using style attribute “class” (only available for CTA lead form components).</li> 
   <li>Thank You page and subscription list can be provided as a hidden parameter of the form (present in the index.htm) or can be added/edited from edit bar of “Start of lead form”<br /> &amp;lt;input type="hidden" name="redirectUrl" value="/content/we-retail/en/user/register/thank_you"/&amp;gt;<br /> &amp;lt;input type="hidden" name="groupName" value="leadForm"/&amp;gt;</li> 
   <li>Constraints like - required can be provided from edit configuration of each of the component.</li> 
  </ul> 
  <p>HTML tag to include graphical link component in the imported zip. Here "firstName" is mapped to lead form firstName and so on, except for checkboxes - these two check boxes map to cq:form dropdown component.</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;id="cqcanvas"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;id="form_wrapper"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;h2&gt;NEWSLETTER&amp;nbsp;SIGN&amp;nbsp;UP&lt;/h2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;data-cq-component="leadFormGeneration"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;form&amp;nbsp;method="post"&amp;nbsp;action="#"&amp;nbsp;onsubmit="return&amp;nbsp;popupBox()"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;label&amp;nbsp;for="firstName"&amp;nbsp;class="checkText"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FIRST&amp;nbsp;NAME!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/label&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;name="firstName"&amp;nbsp;class="text&amp;nbsp;pink"&amp;nbsp;type="text"&amp;nbsp;/&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;label&amp;nbsp;for="lastName"&amp;nbsp;class="checkText"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LAST&amp;nbsp;NAME!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/label&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;name="lastName"&amp;nbsp;class="text&amp;nbsp;pink"&amp;nbsp;type="text"&amp;nbsp;/&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;label&amp;nbsp;for="emailId"&amp;nbsp;class="checkText"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EMAIL&amp;nbsp;ADDRESS!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/label&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;name="emailId"&amp;nbsp;class="text&amp;nbsp;pink"&amp;nbsp;type="text"&amp;nbsp;/&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;class="checkboxes"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;type="checkbox"&amp;nbsp;class="check"&amp;nbsp;name="send_news"&amp;nbsp;/&gt;&amp;nbsp;&lt;label&amp;nbsp;for="send_news"&amp;nbsp;class="checkText"&gt;Send&amp;nbsp;me&amp;nbsp;the&amp;nbsp;latest&amp;nbsp;We.Retail&amp;nbsp;news&amp;nbsp;and&amp;nbsp;announcements.&lt;/label&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;type="checkbox"&amp;nbsp;class="check"&amp;nbsp;name="send_offers"&amp;nbsp;/&gt;&amp;nbsp;&lt;label&amp;nbsp;for="send_offers"&amp;nbsp;class="checkText"&gt;Send&amp;nbsp;me&amp;nbsp;We.Retail&amp;nbsp;deals&amp;nbsp;and&amp;nbsp;special&amp;nbsp;offers.&lt;/label&gt;&lt;br&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input&amp;nbsp;type="submit"&amp;nbsp;name="submit"&amp;nbsp;class="submit&amp;nbsp;pink"&amp;nbsp;value="Sign&amp;nbsp;Up&amp;nbsp;&gt;"&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/form&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt; 
  </codeblock> 
  <h3>Parsys</h3> 
  <p>The AEM parsys component is a container component that can contain other AEM components. It's possible to add a parsys component in the imported HTML. This allows the user to add/delete editable AEM components to the landing page even after it has been imported.</p> 
  <p>The paragraph system gives users the ability to add components using the sidekick.</p> 
  <p>HTML markup to insert a parsys component (<span class="code">foundation/components/parsys</span>) in the HTML within design package:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="parsys"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;data-cq-component="title"&gt;&lt;h2&gt;ULTIMATE&amp;nbsp;PROTECTION&lt;/h2&gt;&lt;/div&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;div&amp;nbsp;data-cq-component="title"&gt;&lt;h3&gt;ON&amp;nbsp;SALE&lt;/h3&gt;&lt;/div&gt;!!discoiqbr!!&lt;/div&gt;!!discoiqbr!! 
  </codeblock> 
  <p>Including the above markup in the HTML does the following:</p> 
  <ul> 
   <li>Inserts a AEM parsys component (foundation/components/parsys) in the landing page created after importing the design package.</li> 
   <li>Initializes the sidekick with default components. New components can be added to the landing page by dragging components from the sidekick onto the parsys component.</li> 
   <li>Two title components are also part of the parsys.</li> 
  </ul> 
  <h3>Target</h3> 
  <p>The target component shows the contents of an experience on the page. One can have many experiences created in a campaign and the target component can dynamically show content from different experiences to various users visiting the page.</p> 
  <p>The html markup to insert a target component and also create different experiences in a campaign:</p> 
  <p> </p> 
  <codeblock class="syntax xml">
    &lt;div&amp;nbsp;data-cq-component="target"&gt;!!discoiqbr!!&amp;nbsp;&lt;section&amp;nbsp;data-cq-component="experience"&amp;nbsp;data-cq-experience="default"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;p&amp;nbsp;data-cq-component="text"&gt;Default&amp;nbsp;content.&amp;nbsp;Select&amp;nbsp;this&amp;nbsp;campaign&amp;nbsp;in&amp;nbsp;client&amp;nbsp;context&amp;nbsp;to&amp;nbsp;view&amp;nbsp;other&amp;nbsp;experiences&lt;/p&gt;!!discoiqbr!!&amp;nbsp;&lt;/section&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&lt;section&amp;nbsp;data-cq-component="experience"&amp;nbsp;data-cq-segment="over-30"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;p&amp;nbsp;data-cq-component="text"&gt;Content&amp;nbsp;for&amp;nbsp;Over&amp;nbsp;30&lt;/p&gt;!!discoiqbr!!&amp;nbsp;&lt;/section&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&lt;section&amp;nbsp;data-cq-component="experience"&amp;nbsp;data-cq-segment="under-30"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;p&amp;nbsp;data-cq-component="text"&gt;Content&amp;nbsp;for&amp;nbsp;Under&amp;nbsp;30&lt;/p&gt;!!discoiqbr!!&amp;nbsp;&lt;/section&gt;!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <h2>Additional Importing Options</h2> 
  <p>Besides specifying whether components imported are editable AEM components, you can also configure the following before importing the design package:</p> 
  <ul> 
   <li>Setting page properties by extracting the metadata defined in the imported HTML.</li> 
   <li>Specifying the charset encoding in the HTML.</li> 
   <li>Overlaying the importer page template.</li> 
  </ul> 
  <h3>Setting page properties by extracting metadata defined in imported HTML</h3> 
  <p>Following metadata declared in the head of the imported HTML shall be extracted and preserved by design importer as property "jcr:description":</p> 
  <ul> 
   <li>&amp;lt;meta name="description" content=""&amp;gt;</li> 
  </ul> 
  <p>Lang attribute set in the HTML tag shall be extracted and preserved by design importer as property "jcr:language"</p> 
  <ul> 
   <li>&amp;lt;html lang="en"&amp;gt;</li> 
  </ul> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <h3>Specifying the charset encoding in the html</h3> 
  <p>The design importer reads the encoding specified in the imported HTML. Encoding can be specified as follows:</p> 
  <p><span class="code">&amp;lt;meta charset="UTF-8"&amp;gt;</span></p> 
  <p><i>OR</i></p> 
  <p><span class="code">&amp;lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&amp;gt;</span></p> 
  <p>If no encoding is specified in the imported HTML, then the default encoding set by the design importer is UTF-8.</p> 
  <h3>Overlaying template</h3> 
  <p>The Blank Landing Page template can be overlayed by creating a new one at:<span class="code"> /apps/&amp;lt;appName&amp;gt;/designimporter/templates/&amp;lt;templateName&amp;gt;</span></p> 
  <p>Steps for creating a new template in AEM are explained <a href="../../../sites/developing/using/templates.md">here</a>.</p> 
  <h3>Referring a component from Landing page</h3> 
  <p>Suppose you have a component which you want to reference in your HTML using data-cq-component attribute such that the design importer renders a component include at this place. e.g., you want to reference the table component (<span class="code">resourceType = /libs/foundation/components/table</span>). Following needs to be added in the HTML:</p> 
  <p><span class="code">&amp;lt;div data-cq-component="/libs/foundation/components/table"&amp;gt;foundation table&amp;lt;/div&amp;gt;</span></p> 
  <p>The path in the data-cq-component should be the resourceType of the component.</p> 
  <h3>Best Practices</h3> 
  <p>Use of CSS selectors similar to following ones is not recommended for use with elements which are marked for component conversion on import.</p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td>E &gt; F</td> 
     <td>an F element child of an E element</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#child-combinators">Child combinator</a></td> 
    </tr> 
    <tr> 
     <td>E + F</td> 
     <td>an F element immediately preceded by an E element</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#adjacent-sibling-combinators">Adjacent sibling combinator</a></td> 
    </tr> 
    <tr> 
     <td>E ~ F</td> 
     <td>an F element preceded by an E element</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#general-sibling-combinators">General sibling combinator</a></td> 
    </tr> 
    <tr> 
     <td>E:root</td> 
     <td>an E element, root of the document</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#structural-pseudos">Structural pseudo-classes</a></td> 
    </tr> 
    <tr> 
     <td>E:nth-child(n)</td> 
     <td>an E element, the n-th child of its parent</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#structural-pseudos">Structural pseudo-classes</a></td> 
    </tr> 
    <tr> 
     <td>E:nth-last-child(n)</td> 
     <td>an E element, the n-th child of its parent, counting from the last one</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#structural-pseudos">Structural pseudo-classes</a></td> 
    </tr> 
    <tr> 
     <td>E:nth-of-type(n)</td> 
     <td>an E element, the n-th sibling of its type</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#structural-pseudos">Structural pseudo-classes</a></td> 
    </tr> 
    <tr> 
     <td>E:nth-last-of-type(n)</td> 
     <td>an E element, the n-th sibling of its type, counting from the last one</td> 
     <td><a href="http://www.w3.org/TR/css3-selectors/#structural-pseudos">Structural pseudo-classes</a></td> 
    </tr> 
   </tbody> 
  </table> 
  <p>This is due to the fact that additional html elements like &amp;lt;div&amp;gt; tag are added to the generated Html after the import.</p> 
  <ul> 
   <li>Scripts relying on the structure similar to above also are not recommended for use with elements marked for conversion to AEM components.</li> 
   <li>Use of styles on the markup tags for component conversion like &amp;lt;div data-cq-component=”*”&amp;gt; is not recommended.</li> 
   <li>The design layout should follow best practices from HTML5 Boilerplate. Read more on: <a href="http://html5boilerplate.com/">http://html5boilerplate.com/</a>.</li> 
  </ul> 
  <h2>Configuring OSGI modules</h2> 
  <p>The components that expose properties configurable via OSGI console are as follows: </p> 
  <ul> 
   <li>Landing Page Design Importer</li> 
   <li>Landing Page Builder</li> 
   <li>Mobile Landing Page Builder</li> 
   <li>Landing Page Entry Preprocessor</li> 
  </ul> 
  <p>The below table briefly describes the properties:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td><strong>Component</strong></td> 
     <td><strong>Property Name</strong></td> 
     <td><strong>Property Description </strong></td> 
    </tr> 
    <tr> 
     <td>Landing Page Design Importer</td> 
     <td>Extract Filter</td> 
     <td>The list of regular expressions to be used for filtering files from extraction. <br /> Zip entries matching any of the specified patterns are excluded from extraction</td> 
    </tr> 
    <tr> 
     <td>Landing Page Builder</td> 
     <td>File Pattern</td> 
     <td>The Landing Page Builder can be configured to handle HTML files matching a regular expression as defined by file pattern.</td> 
    </tr> 
    <tr> 
     <td>Mobile Landing Page Builder</td> 
     <td>File Pattern</td> 
     <td>The Landing Page Builder can be configured to handle HTML files matching a regular expression as defined by file pattern.</td> 
    </tr> 
    <tr> 
     <td> </td> 
     <td>Device Groups</td> 
     <td>The list of device groups to be supported.</td> 
    </tr> 
    <tr> 
     <td>Landing Page Entry Preprocessor</td> 
     <td>Search Pattern </td> 
     <td>The pattern to search for, in the archive entry contents. This regular expression is matched with the entry content line by line. Upon match, the matching text is replaced with the replacement pattern specified.<br /> <br /> See note below regarding current limitations of landing page entry preprocessor.</td> 
    </tr> 
    <tr> 
     <td> </td> 
     <td>Replace Pattern</td> 
     <td>The pattern that replaces the matches found. You may use regex group references like $1, $2. Additionally, this pattern supports keywords like {designPath} that get resolved with the actual value during import.</td> 
    </tr> 
   </tbody> 
  </table> 
  <note> 
   <p><strong>Current limitation of Landing Page Entry Preprocessor:</strong><br /> If you need to make any changes to the search pattern, when you open the felix property editor, you need to manually add backslash characters to escape the regex metacharacters. If you do not manually add backslash characters, the regex is considered invalid and will not replace the older one.</p> 
   <p>For example, if the default configuration is</p> 
   <p><span class="code">/\* *CQ_DESIGN_PATH *\*/ *(['"]) </span></p> 
   <p>And you need to replace <span class="code">CQ_DESIGN_PATH</span> with <span class="code">VIPURL</span> in the search pattern, then your search pattern should look like this: </p> 
   <p><span class="code">/\* *VIPURL *\*/ *(['"])</span></p> 
  </note> 
  <h2>Troubleshooting</h2> 
  <p>When importing the design package, you may encounter several errors, described in this section.</p> 
  <h3>Initialization of sidekick with Landing Page relevant components</h3> 
  <p>If the design package contains a parsys component markup, then after importing, the sidekick starts showing landing-page relevant components. You can drag and drop new components onto the parsys component within your landing page. You can also go to the design mode and add new components to the sidekick. </p> 
  <h3>Error messages displayed during import</h3> 
  <p>In case of any errors (e.g. the imported package is not a valid zip), the design import will not import the package and instead display an error message on top of the page just above the drag and drop box. Examples of error scenarios are stated here. After correcting the error, you can re-import the updated zip onto the same blank landing page. Different scenarios where errors are thrown are as follows:</p> 
  <ul> 
   <li>Imported design package is not a valid zip archive.</li> 
   <li>Imported design package does not contain an index.html at the top level.</li> 
  </ul> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <h3>Warnings displayed after import</h3> 
  <p>In case of any warnings (e.g. HTML refers to images that do not exist within the package), the design importer will import the zip but at the same time display a list of issues/warnings on the Result Pane, Clicking on the issues link, will display a list of warnings which point out any issues within the design package. Different scenarios where warnings are caught and displayed by design importer are as follows:</p> 
  <ul> 
   <li>HTML refers to images that do not exist within the package.</li> 
   <li>HTML refers to scripts that do not exist within the package.</li> 
   <li>HTML refers to styles that do not exist within the package.</li> 
  </ul> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <p></p> 
  <h3>Where are the files of the ZIP file being stored in AEM?</h3> 
  <draft-comment color="yellow" lastModifiedBy="ims-author-77F410094CD97C4F0A746C1B@AdobeID" lastModifiedDate="2018-03-14T10:07:33.494-0400" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>What is the equivalent in we.retail?</p> 
  </draft-comment> 
  <p>After the landing page has been imported, the files (images, css, js, etc.) within the design package are stored in the following location in AEM:</p> 
  <p><span class="code">/etc/designs/default/canvas/content/campaigns/&amp;lt;name of brand&amp;gt;/&amp;lt;name of campaign&amp;gt;/&amp;lt;name of landing page&amp;gt;</span></p> 
  <p>Suppose the landing page is created under the campaign We.Retail and the name of the landing page is <strong>myBlankLandingPage</strong> then the location were Zip files are stored is as follows:</p> 
  <p><span class="code">/etc/designs/default/canvas/content/campaigns/geometrixx/myBlankLandingPage</span></p> 
  <h3>Formatting not preserved</h3> 
  <p>When creating your CSS, please be aware of the following limitations:</p> 
  <p>If a text and (editable) image are like the following:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;class="box"&gt;!!discoiqbr!!&lt;p&gt;&lt;div&amp;nbsp;data-cq-component="image"&gt;&lt;img&amp;nbsp;src="assets/image.jpg"&amp;nbsp;width="115"!!discoiqbr!!height="116"&amp;nbsp;/&gt;&lt;/div&gt;Some&amp;nbsp;Text&amp;nbsp;&lt;/p&gt;!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <p>with a CSS applied on the class <span class="code">box</span> as follows:</p> 
  <codeblock gutter="true" class="syntax xml">
    .box!!discoiqbr!!!!discoiqbr!!{&amp;nbsp;width:&amp;nbsp;450px;&amp;nbsp;padding:10px;&amp;nbsp;border:&amp;nbsp;1px&amp;nbsp;#C5DBE7&amp;nbsp;solid;&amp;nbsp;margin:&amp;nbsp;0px&amp;nbsp;auto&amp;nbsp;0&amp;nbsp;auto;&amp;nbsp;background-image:url(assets/box.gif);&amp;nbsp;background-repeat:repeat-x,y;&amp;nbsp;font-family:Verdana,&amp;nbsp;Arial,&amp;nbsp;Helvetica,&amp;nbsp;sans-serif;&amp;nbsp;font-size:12px;&amp;nbsp;color:#6D6D6D;&amp;nbsp;} 
  </codeblock> 
  <p>Then <span class="code">box img</span> is used in the design importer, the resulting landing page appears not have preserved the formatting. To work around this, be aware that AEM adds div tags in the CSS and rewrite code accordingly. Otherwise, some CSS rules will be invalid.</p> 
  <codeblock gutter="true" class="syntax xml">
    .box&amp;nbsp;img!!discoiqbr!!!!discoiqbr!!{&amp;nbsp;float:right;&amp;nbsp;margin:&amp;nbsp;0&amp;nbsp;0&amp;nbsp;5px&amp;nbsp;5px;&amp;nbsp;border:&amp;nbsp;1px&amp;nbsp;#343434&amp;nbsp;solid;&amp;nbsp;} 
  </codeblock> 
  <note> 
   <p>Also, designers should be aware that only code inside the <strong>id=cqcanvas</strong> tag is recognized by the importer, otherwise design is not preserved.</p> 
  </note> 
 </body> 
</html>