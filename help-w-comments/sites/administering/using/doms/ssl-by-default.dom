<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-08-29T11:01:17.277-0400" name="topicBrowsingSortDate" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="content_type:reference;products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:Security" name="cq:tags" /> 
  <meta content="trushton" name="cq:lastModifiedBy" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/administering/morehelp/security;/content/help/en/experience-manager/6-4/sites/administering/morehelp/security" name="moreHelpPaths" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="2017-10-31T16:21:54.012-0400" name="firstPublishExternalDate" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/administering/using/ssl-by-default.html" name="publishExternalURL" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="2018-08-29T11:01:17.282-0400" name="cq:lastModified" /> 
  <meta content="/content/docs/en/aem/6-3/administer/security/ssl-by-default" name="qaNotes" /> 
  <meta content="7c5ad578-320e-4198-aae0-77f083d9ce7f" name="jcr:predecessors" /> 
  <meta content="audience:administering" name="primaryAudienceTag" /> 
  <meta content="SSL By Default" name="jcr:title" /> 
  <meta content="2018-08-29T11:01:17.308-0400" name="cq:lastReplicated" /> 
  <meta content="trushton" name="cq:lastReplicatedBy" /> 
  <meta content="2017-12-01T19:05:56.790-0500" name="jcr:created" /> 
  <meta content="trushton@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="Learn how to use SSL by Default in AEM." name="seoDescription" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2018-04-26T10:11:52.567-0400" name="locHandOffDate" /> 
  <meta content="2018-08-29T11:01:17.277-0400" name="publishExternalDate" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2017-10-12T21:46:00.000-0400" name="qaDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="d77acafd-1cc1-4b4b-aaf6-9d2b137ecdbd" name="jcr:uuid" /> 
  <meta content="SSL By Default" name="seoTitle" /> 
  <meta content="2018-08-29T11:01:17.277-0400" name="lastPublishExternalDate" /> 
 </head> 
 <body> 
  <p>In an effort to continously improve the security of AEM, Adobe has introduced a feature called SSL By Default. The purpose is to encourage the use of HTTPS to connect to AEM instances.</p> 
  <h2>Enabling SSL By Default</h2> 
  <p>You can start configuring SSL By Default by clicking the relevant Inbox message from your AEM home screen. To reach the Inbox, press the bell icon in the upper right corner of the screen. Then, click on <strong>View All</strong>. This will bring up a list of all alerts ordered in a list view.</p> 
  <p>In the list, select and open the <strong>Configure HTTPS</strong> alert:</p> 
  <img imageRotate="0" src="assets/chlimage_1-424.png" /> 
  <p>A service user called <strong>ssl-service </strong>has been created for this feature. Once you open the alert, you will be guided through the follwing configuration wizard:</p> 
  <ol> 
   <li><p>First, set up the Store Credentials. These are the credentials for the <strong>ssl-service</strong> system user's key store that will contain the private key and trust store for the HTTPS listener.</p>  <img imageRotate="0" src="assets/chlimage_1-425.png" /></li> 
   <li><p>Once you enter the credentials, click <strong>Next</strong> in the upper right corner of the page. Then, upload the associated private key and certificate for the SSL connection.</p> <img imageRotate="0" src="assets/chlimage_1-426.png" /> 
    <note> 
     <p>For info on how to generate a private key and a certificate to use with the wizard, see <a href="../../../sites/administering/using/ssl-by-default.md#main-pars-title-1158836258">this procedure</a> below.<br /> </p> 
    </note></li> 
   <li><p>Lastly, specify the HTTPS hostname and the TCP port for the HTTPS listener.</p> <img imageRotate="0" src="assets/screen_shot_2018-07-25at31658pm.png" /></li> 
  </ol> 
  <h2>Automating SSL By Default</h2> 
  <p>There are three ways of automating SSL By Default.</p> 
  <h3>Via HTTP POST</h3> 
  <p>The first method involves posting to the SSLSetup server that is being used by the configuration wizard:</p> 
  <codeblock gutter="true" class="syntax shell">
    POST&amp;nbsp;/libs/granite/security/post/sslSetup.html 
  </codeblock> 
  <p>You can use the following payload in your POST to automate configuration:</p> 
  <codeblock gutter="true" class="syntax xml">
    ------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="keystorePassword"!!discoiqbr!!&amp;nbsp;!!discoiqbr!!test!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="keystorePasswordConfirm"!!discoiqbr!!test!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="truststorePassword"!!discoiqbr!!test!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="truststorePasswordConfirm"!!discoiqbr!!test!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="privatekeyFile";&amp;nbsp;filename="server.der"!!discoiqbr!!Content-Type:&amp;nbsp;application/x-x509-ca-cert!!discoiqbr!!&amp;nbsp;!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="certificateFile";&amp;nbsp;filename="server.crt"!!discoiqbr!!Content-Type:&amp;nbsp;application/x-x509-ca-cert!!discoiqbr!!&amp;nbsp;!!discoiqbr!!------WebKitFormBoundaryyBO4ArmGlcfdGDbs!!discoiqbr!!Content-Disposition:&amp;nbsp;form-data;&amp;nbsp;name="httpsPort"!!discoiqbr!!8443 
  </codeblock> 
  <p>The servlet, like any sling POST servlet, will respond with 200 OK or an error HTTP status code. You can find details about status in the response's HTML body.</p> 
  <p>Below are examples for both a successful response and an error.</p> 
  <p> </p> 
  <p><strong>SUCCESS EXAMPLE</strong> (status = 200):</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;!DOCTYPE&amp;nbsp;html&gt;!!discoiqbr!!&lt;html&amp;nbsp;lang='en'&gt;!!discoiqbr!!&lt;head&gt;!!discoiqbr!!&lt;title&gt;OK&lt;/title&gt;!!discoiqbr!!&lt;/head&gt;!!discoiqbr!!&lt;body&gt;!!discoiqbr!!&lt;h1&gt;OK&lt;/h1&gt;!!discoiqbr!!&lt;dl&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-status-code'&gt;Status&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;200&lt;/dd&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-status-message'&gt;Message&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;SSL&amp;nbsp;successfully&amp;nbsp;configured&lt;/dd&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-title'&gt;Title&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;OK&lt;/dd&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-description'&gt;Description&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;HTTPS&amp;nbsp;has&amp;nbsp;been&amp;nbsp;configured&amp;nbsp;on&amp;nbsp;port&amp;nbsp;8443.&amp;nbsp;The&amp;nbsp;private&amp;nbsp;key&amp;nbsp;and!!discoiqbr!!certificate&amp;nbsp;were&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;key&amp;nbsp;store&amp;nbsp;of&amp;nbsp;the&amp;nbsp;user&amp;nbsp;ssl-service.!!discoiqbr!!Please&amp;nbsp;take&amp;nbsp;note&amp;nbsp;of&amp;nbsp;the&amp;nbsp;key&amp;nbsp;store&amp;nbsp;password&amp;nbsp;you&amp;nbsp;provided.&amp;nbsp;You&amp;nbsp;will&amp;nbsp;need!!discoiqbr!!it&amp;nbsp;for&amp;nbsp;any&amp;nbsp;subsequent&amp;nbsp;updating&amp;nbsp;of&amp;nbsp;the&amp;nbsp;private&amp;nbsp;key&amp;nbsp;or&amp;nbsp;certificate.&lt;/dd&gt;!!discoiqbr!!&lt;/dl&gt;!!discoiqbr!!&lt;h2&gt;Links&lt;/h2&gt;!!discoiqbr!!&lt;ul&amp;nbsp;class='foundation-form-response-links'&gt;!!discoiqbr!!&lt;li&gt;&lt;a&amp;nbsp;class='foundation-form-response-redirect'&amp;nbsp;href='/'&gt;Done&lt;/a&gt;&lt;/li&gt;!!discoiqbr!!&lt;/ul&gt;!!discoiqbr!!&lt;/body&gt;!!discoiqbr!!&lt;/html&gt; 
  </codeblock> 
  <p> </p> 
  <p><strong>ERROR EXAMPLE</strong> (status = 500):</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;!DOCTYPE&amp;nbsp;html&gt;!!discoiqbr!!&lt;html&amp;nbsp;lang='en'&gt;!!discoiqbr!!&lt;head&gt;!!discoiqbr!!&lt;title&gt;Error&lt;/title&gt;!!discoiqbr!!&lt;/head&gt;!!discoiqbr!!&lt;body&gt;!!discoiqbr!!&lt;h1&gt;Error&lt;/h1&gt;!!discoiqbr!!&lt;dl&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-status-code'&gt;Status&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;500&lt;/dd&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-status-message'&gt;Message&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;The&amp;nbsp;provided&amp;nbsp;file&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;key,&amp;nbsp;DER&amp;nbsp;format&amp;nbsp;expected&lt;/dd&gt;!!discoiqbr!!&lt;dt&amp;nbsp;class='foundation-form-response-title'&gt;Title&lt;/dt&gt;!!discoiqbr!!&lt;dd&gt;Error&lt;/dd&gt;!!discoiqbr!!&lt;/dl&gt;!!discoiqbr!!&lt;/body&gt;!!discoiqbr!!&lt;/html&gt;!!discoiqbr!! 
  </codeblock> 
  <h3>Via Package</h3> 
  <p>Alternatively, you can automate the SSL setup by uploading a package that already contains these required items:</p> 
  <ul> 
   <li>The ssl-service user's keystore. This is located under <i>/home/users/system/security/ssl-service/keystore</i> in the repository.</li> 
   <li>The <span class="code">GraniteSslConnectorFactory</span> configuration</li> 
  </ul> 
  <h3>Generating a Private Key/Certificate Pair to Use with the Wizard</h3> 
  <p>Below you will find an example for creating a self-signed certificate in DER format that the SSL Wizard can use.<br /> </p> 
  <note> 
   <p>The use of a self-signed certificate is for example purposes only and should not be used in production.</p> 
  </note> 
  <ol> 
   <li><p>First, create the private key:</p> 
    <codeblock gutter="true" class="syntax shell">
      openssl&amp;nbsp;genrsa&amp;nbsp;-aes256&amp;nbsp;-out&amp;nbsp;localhostprivate.key&amp;nbsp;4096!!discoiqbr!!openssl&amp;nbsp;rsa&amp;nbsp;-in&amp;nbsp;localhostprivate.key&amp;nbsp;-out&amp;nbsp;localhostprivate.key 
    </codeblock></li> 
   <li><p>Then, Generate a Certificate Signing Request (CSR) using private key:</p> 
    <codeblock gutter="true" class="syntax shell">
      openssl&amp;nbsp;req&amp;nbsp;-sha256&amp;nbsp;-new&amp;nbsp;-key&amp;nbsp;localhostprivate.key&amp;nbsp;-out&amp;nbsp;localhost.csr&amp;nbsp;-subj&amp;nbsp;'/CN=localhost' 
    </codeblock></li> 
   <li><p>Generate the SSL certificate and sign it with the private key. In this example, will expire one year from now:</p> 
    <codeblock gutter="true" class="syntax shell">
      openssl&amp;nbsp;x509&amp;nbsp;-req&amp;nbsp;-days&amp;nbsp;365&amp;nbsp;-in&amp;nbsp;localhost.csr&amp;nbsp;-signkey&amp;nbsp;localhostprivate.key&amp;nbsp;-out&amp;nbsp;localhost.crt 
    </codeblock></li> 
  </ol> 
  <p>Convert the Private Key to DER format. This is because the SSL wizard requires key to be in DER format:</p> 
  <codeblock gutter="true" class="syntax shell">
    openssl&amp;nbsp;pkcs8&amp;nbsp;-topk8&amp;nbsp;-inform&amp;nbsp;PEM&amp;nbsp;-outform&amp;nbsp;DER&amp;nbsp;-in&amp;nbsp;localhostprivate.key&amp;nbsp;-out&amp;nbsp;localhostprivate.der&amp;nbsp;-nocrypt 
  </codeblock> 
  <p>Finally, upload the <strong>localhostprivate.der</strong> as the Private Key and <strong>localhost.crt</strong> as the SSL Certificate in step 2 of the graphical SSL Wizard described at the beginning of this page.</p> 
  <h3>Updating the SSL Configuration Via cURL</h3> 
  <note> 
   <p>See <a href="https://helpx.adobe.com/experience-manager/6-4/sites/administering/using/curl.html">Using cURL with AEM</a> for a centralized list of useful cURL commands in AEM.</p> 
  </note> 
  <p>You can also automate the SSL configuration by using the cURL tool. You can do this by posting the configuration parameters to this URL:</p> 
  <p><a><em>http://serveraddress:serverport/libs/granite/security/post/sslSetup.html</em></a></p> 
  <p>Below are the parameters you can use in order to change the various settings in the configuration wizard:</p> 
  <ul> 
   <li><span class="code">-F "keystorePassword=password"</span> - the keystore password;<br /> </li> 
   <li><span class="code">-F "keystorePasswordConfirm=password"</span> - confirm the keystore password;<br /> </li> 
   <li><span class="code">-F "truststorePassword=password"</span> - the truststore password;<br /> </li> 
   <li><span class="code">-F "truststorePasswordConfirm=password"</span> - confirm the truststore password;<br /> </li> 
   <li><span class="code">-F "privatekeyFile=@localhostprivate.der"</span> - specify the private key;<br /> </li> 
   <li><span class="code">-F "certificateFile=@localhost.crt"</span> - specify the certificate;<br /> </li> 
   <li><span class="code">-F "httpsHostName=host.example.com" </span>- specify the hostname;</li> 
   <li><span class="code">-F "httpsPort=8443"</span> - the port the HTTPS listener will work on.</li> 
  </ul> 
  <note> 
   <p>The fastest way of running cURL to automate the SSL configuration is from the folder where the DER and CRT files are. Alternatively, you can specify the full path in the <span class="code">privatekeyFile</span> and certificateFile arguments.</p> 
   <p>You also need to be authenticated in order to perform the update, so make sure you append the cURL command with the <span class="code">-u user:passeword</span> parameter.</p> 
   <p>A correct cURL post command should look like this:</p> 
  </note> 
  <codeblock gutter="true" class="syntax shell">
    curl&amp;nbsp;-u&amp;nbsp;user:password&amp;nbsp;-F&amp;nbsp;"keystorePassword=password"&amp;nbsp;-F&amp;nbsp;"keystorePasswordConfirm=password"&amp;nbsp;-F&amp;nbsp;"truststorePassword=password"&amp;nbsp;-F&amp;nbsp;"truststorePasswordConfirm=password"&amp;nbsp;-F&amp;nbsp;"privatekeyFile=@localhostprivate.der"&amp;nbsp;-F&amp;nbsp;"certificateFile=@localhost.crt"&amp;nbsp;-F&amp;nbsp;"httpsHostName=host.example.com"&amp;nbsp;-F&amp;nbsp;"httpsPort=8443"&amp;nbsp;http://host:port/libs/granite/security/post/sslSetup.html 
  </codeblock> 
  <h4>Multiple certificates using cURL</h4> 
  <p>You can send the servlet a chain of certificates by repeating the certificateFile parameter like this:</p> 
  <p><span class="code">-F "certificateFile=@root.crt" -F "certificateFile=@localhost.crt"..</span></p> 
  <p>Once you have executed the command, verify that all the certificates made it to the keystore. Check the keystore from:<br /> <a href="http://localhost:4502/libs/granite/security/content/userEditor.html/home/users/system/security/ssl-service" title="Follow link">http://localhost:4502/libs/granite/security/content/userEditor.html/home/users/system/security/ssl-service</a></p> 
 </body> 
</html>