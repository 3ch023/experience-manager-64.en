<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-07-03T06:38:37.397-0400" name="topicBrowsingSortDate" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/extending-analytics.html" name="publishExternalURL" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="AEM Analytics allows you to track user interaction on your website" name="seoDescription" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2018-07-03T06:38:37.397-0400" name="lastPublishExternalDate" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="2017-10-31T16:16:49.361-0400" name="firstPublishExternalDate" /> 
  <meta content="2018-07-03T06:38:37.402-0400" name="cq:lastModified" /> 
  <meta content="aheimoz" name="cq:lastModifiedBy" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/extending-aem;/content/help/en/experience-manager/6-4/sites/developing/morehelp/extending-aem" name="moreHelpPaths" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:extending-aem;content_type:reference" name="cq:tags" /> 
  <meta content="Extending Event Tracking" name="seoTitle" /> 
  <meta content="aheimoz@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2018-07-03T06:38:37.397-0400" name="publishExternalDate" /> 
  <meta content="5dd95709-d2d5-42a5-8d0b-b1da56edf8f4" name="jcr:uuid" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="Extending Event Tracking" name="navTitle" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="/content/docs/en/aem/6-3/develop/extending/extending-cq-analytics" name="qaNotes" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="2018-05-08T12:43:06.155-0400" name="locHandOffDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="2017-12-01T19:03:21.150-0500" name="jcr:created" /> 
  <meta content="ee522189-e282-417f-a6f9-eaf44dd84f79" name="jcr:predecessors" /> 
  <meta content="Extending Event Tracking" name="jcr:title" /> 
  <meta content="aheimoz" name="cq:lastReplicatedBy" /> 
  <meta content="2018-07-03T06:38:37.427-0400" name="cq:lastReplicated" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
 </head> 
 <body> 
  <p>AEM Analytics allows you to track user interaction on your website. As a developer you may need to:</p> 
  <ul> 
   <li>Track how visitors are interacting with your components. This can be done with <a href="#customevents">Custom events.</a></li> 
   <li><a href="/sites/developing/using/extending-analytics.html?cq_ck=1527751640055#Accessingvaluesintheclientcontext">Access values in the ContextHub</a>.</li> 
   <li><a href="#addingrecordcallbacks">Add record callbacks</a>.</li> 
  </ul> 
  <note> 
   <p>This information is basically generic, but it uses <a href="../../../sites/administering/using/adobeanalytics.md">Adobe Analytics</a> for specific examples.<br /> </p> 
   <p>For general information on developing components and dialog boxes, see <a href="../../../sites/developing/using/components.md">Developing Components</a>.<br /> </p> 
  </note> 
  <h2>Custom Events</h2> 
  <p>Custom events track anything that is dependent on the availability of a specific component on the page. This also includes events that are template-specific, as the page-component is treated as another component.</p> 
  <h3>Tracking Custom Events On Page Load</h3> 
  <p>This can be done using the pseudo-attribute <span class="code">data-tracking</span> (the older record attribute is still supported for backwards compatibility). You can add this to any HTML tag.</p> 
  <p>The syntax for <span class="code">data-tracking</span> is</p> 
  <ul> 
   <li><span class="code">data-tracking="{'event': ['eventName'], 'values': {'key': 'value', 'nextKey': 'nextValue'}, componentPath: 'myapp/component/mycomponent'}"</span></li> 
  </ul> 
  <p>You can pass any number of key-value pairs as the second parameter, which is called payload.</p> 
  <p>An example might look like:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;span&amp;nbsp;data-tracking="{event:'blogEntryView',&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values:{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'blogEntryContentType':&amp;nbsp;'blog',&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'blogEntryUniqueID':&amp;nbsp;'&lt;%=&amp;nbsp;xssAPI.encodeForJSString(entry.getId())&amp;nbsp;%&gt;',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'blogEntryTitle':&amp;nbsp;'&lt;%=&amp;nbsp;xssAPI.encodeForJSString(entry.getTitle())&amp;nbsp;%&gt;',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'blogEntryAuthor':'&lt;%=&amp;nbsp;xssAPI.encodeForJSString(entry.getAuthor())&amp;nbsp;%&gt;',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'blogEntryPageLanguage':'&lt;%=&amp;nbsp;currentPage.getLanguage(true)&amp;nbsp;%&gt;'!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;componentPath:'myapp/component/mycomponent'}"&gt;!!discoiqbr!!&lt;/span&gt; 
  </codeblock> 
  <p>At page load, all <span class="code">data-tracking</span> attributes will be collected and added to the event store of the ContextHub, where they can be mapped to Adobe Analytics events. Events that are not mapped will not be tracked by Adobe Analytics. See <a href="../../../sites/administering/using/adobeanalytics.md">Connecting to Adobe Analytics</a> for more details about mapping events.</p> 
  <h3>Tracking Custom Events After Page Load</h3> 
  <p>To track events that occur after a page is loaded (such as user interactions), use the <span class="code">CQ_Analytics.record</span> JavaScript function:</p> 
  <ul> 
   <li><span class="code">CQ_Analytics.record({event: 'eventName', values: { valueName: 'VALUE' }, collect: false, options: { obj: this, defaultLinkType: 'X' }, componentPath: '&amp;lt;%=resource.getResourceType()%&amp;gt;'})</span></li> 
  </ul> 
  <p>Where<span class="code"></span></p> 
  <ul> 
   <li><span class="code">events</span> is either a string or a string array (for multiple events).<br /> </li> 
   <li><span class="code">values</span> contains all of the values to be tracked</li> 
   <li><span class="code">collect</span> is optional and will return an array containg the event and data object.</li> 
   <li><span class="code">options</span> is optional and contains link tracking options like HTML element <span class="code">obj</span> and <span class="code"><a href="https://microsite.omniture.com/t2/help/en_US/sc/implement/index.html#linkType">defaultLinkType</a></span>.</li> 
   <li><span class="code">componentPath</span> is a necessary attribute and it is recommended to set it to <span class="code">&amp;lt;%=resource.getResourceType()%&amp;gt;</span><br /> </li> 
  </ul> 
  <p>For example, with the following definition, a user clicking the <strong>Jump to top</strong> link will cause the two events, <span class="code">jumptop</span> and <span class="code">headlineclick</span>, to be fired:<br /> </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;h1&amp;nbsp;data-tracking="{event:&amp;nbsp;'headline',&amp;nbsp;values:&amp;nbsp;{level:'1'},&amp;nbsp;componentPath:&amp;nbsp;'&lt;%=resource.getResourceType()%&gt;'}"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;My&amp;nbsp;Headline&amp;nbsp;&lt;a&amp;nbsp;href="#"&amp;nbsp;onclick="CQ_Analytics.record({event:&amp;nbsp;['jumptop','headlineclick'],&amp;nbsp;&amp;nbsp;values:&amp;nbsp;{level:'1'},&amp;nbsp;componentPath:&amp;nbsp;'&lt;%=resource.getResourceType()%&gt;'})"&gt;Jump&amp;nbsp;to&amp;nbsp;top&lt;/a&gt;!!discoiqbr!!&lt;/h1&gt; 
  </codeblock> 
  <h2>Accessing Values in the ContextHub</h2> 
  <p>The ContextHub JavaScript API has a <span class="code">getStore(name)</span> function that returns the specified store, if available. The store has a <span class="code">getItem(key)</span> function that returns the value of the specified key, if available. Using the <span class="code">getKeys()</span> function it is possible to retrieve an array of defined keys for the specific store.</p> 
  <p>You can be notified of value changes on a store by binding a function using the <span class="code">ContextHub.getStore(name).eventing.on(ContextHub.Constants.EVENT_STORE_UPDATED, handler, selector, triggerForPastEvents)</span> function.</p> 
  <p>The best way to be notified of initial availability of the ContextHub is to use the <span class="code">ContextHub.eventing.on(ContextHub.Constants.EVENT_ALL_STORES_READY, handler, selector, triggerForPastEvents);</span> function.</p> 
  <p><strong>Additional events for ContextHub:</strong></p> 
  <p>All stores ready:</p> 
  <p><span class="code">ContextHub.eventing.on(ContextHub.Constants.EVENT_ALL_STORES_READY, handler, selector, triggerForPastEvents);</span></p> 
  <p>Store specific:</p> 
  <p><span class="code">ContextHub.getStore(store).eventing.on(ContextHub.Constants.EVENT_STORE_READY, handler, selector, triggerForPastEvents)</span></p> 
  <note> 
   <p>Also see the complete <a href="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/contexthub-api.html#ContextHubJavascriptAPIReference">ContextHub API Reference</a></p> 
  </note> 
  <h2>Adding Record Callbacks</h2> 
  <p>Before and after callbacks are registered using the functions <span class="code">CQ_Analytics.registerBeforeCallback(callback,rank)</span> and <span class="code">CQ_Analytics.registerAfterCallback(callback,rank)</span>.</p> 
  <p>Both functions take a function as the first argument and a rank as the second argument, which dictates the order that callbacks are executed.</p> 
  <p>If your callback returns false, the callbacks following in the execution chain will not be executed.</p> 
 </body> 
</html>