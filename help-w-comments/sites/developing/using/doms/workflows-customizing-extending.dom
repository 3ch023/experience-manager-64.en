<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="09f4acd2-0704-4e0c-a353-cd89cbdb2ba1" name="jcr:uuid" /> 
  <meta content="2018-04-22T02:07:39.478-0400" name="publishExternalDate" /> 
  <meta content="/content/docs/en/aem/6-3/develop/extending/workflows/customizing-extending" name="qaNotes" /> 
  <meta content="2018-05-08T12:46:54.111-0400" name="cq:lastModified" /> 
  <meta content="aheimoz@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="Extending Workflow Functionality" name="navTitle" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2018-10-27T23:47:51.987-0400" name="cq:lastReplicated" /> 
  <meta content="jsyal" name="cq:lastReplicatedBy" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="Extending Workflow Functionality" name="jcr:title" /> 
  <meta content="9390786e-83f1-4ab8-b473-cead28f834ad" name="jcr:predecessors" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="2018-03-09T08:01:45.172-0500" name="jcr:created" /> 
  <meta content="2018-05-08T12:46:54.110-0400" name="locHandOffDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/extending-aem;/content/help/en/experience-manager/6-4/sites/developing/morehelp/extending-aem" name="moreHelpPaths" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="2017-10-31T16:15:48.850-0400" name="firstPublishExternalDate" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2018-04-22T02:07:39.478-0400" name="topicBrowsingSortDate" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/workflows-customizing-extending.html" name="publishExternalURL" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="aheimoz" name="cq:lastModifiedBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:extending-aem;content_type:reference" name="cq:tags" /> 
  <meta content="2018-04-22T02:07:39.478-0400" name="lastPublishExternalDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="Extending Workflow Functionality" name="seoTitle" /> 
 </head> 
 <body> 
  <p>This topic describes how to develop custom step components for your workflows, then how to interact programmatically with workflows.</p> 
  <p>Creating a custom workflow step involves the following activities:</p> 
  <ul> 
   <li>Develop the workflow step component.</li> 
   <li>Implement the step functionality as an OSGi service or an ECMA script. </li> 
  </ul> 
  <p>You can also <a href="../../../sites/developing/using/workflows-program-interaction.md">interact with your workflows from your programs and scripts</a>.</p> 
  <h3>Workflow Step Components - The Basics</h3> 
  <p>A workflow step component defines the appearance and behavior of the step when creating workflow models:</p> 
  <ul> 
   <li>The category and step name in the workflow sidekick.</li> 
   <li>The appearance of the step in workflow models.</li> 
   <li>The edit dialog for configuring component properties.</li> 
   <li>The service or script that is executed at runtime.</li> 
  </ul> 
  <p>As with <a href="../../../sites/developing/using/components.md">all components</a>, workflow step components inherit from the component that is specifed for the <span class="code">sling:resourceSuperType</span> property. The following diagram shows the hierarchy of <span class="code">cq:component</span> nodes that form the basis of all workflow step components. The diagram also includes the <strong>Process Step</strong>, <strong>Participant Step</strong>, and <strong>Dynamic Participant Step</strong> components, as these are the most common (and basic) starting points for developing custom step components. </p> 
  <img imageRotate="0" src="assets/aem_wf_componentinherit.png" /> 
  <note> 
   <p>You <strong><i>must</i></strong> not change anything in the <span class="code">/libs</span> path.</p> 
   <p>This is because the content of <span class="code">/libs</span> is overwritten the next time you upgrade your instance (and may well be overwritten when you apply either a hotfix or feature pack).</p> 
   <p>The recommended method for configuration and other changes is:</p> 
   <p>1. Recreate the required item (i.e. as it exists in <span class="code">/libs</span>) under <code class="code">/apps
     <discoiqbr /> </code>2. Make any changes within <span class="code">/apps</span></p> 
  </note> 
  <draft-comment color="green" lastModifiedBy="fwandele" lastModifiedDate="2018-03-28T16:07:11.244-0400" prevFirstName="Florentin" prevLastName="Wandeler" type="remark"> 
   <p>Has /libs/cq/workflow/components/model/step/tab_common/items/basic/items/title been converted to touch?</p> 
   <p>or is it working with compatibility?</p> 
  </draft-comment> 
  <p>The <span class="code">/libs/cq/workflow/components/model/step</span> component is the nearest common ancestor of the <strong>Process Step</strong>, <strong>Participant Step</strong>, and <strong>Dynamic Participant Step</strong>, which all inherit the following items:</p> 
  <ul> 
   <li> <p>The <span class="code">step.jsp</span> script renders the title of the step component when it is added to a model. </p> <img imageRotate="0" src="assets/wf-22-1.png" /></li> 
   <li> <p>A dialog with the following tabs:</p> 
    <ul> 
     <li><strong>Common</strong>: for editing the title and description.</li> 
     <li><strong>Advanced</strong>: for editing email notification properties.</li> 
    </ul> <img imageRotate="0" src="assets/wf-44.png" /><img imageRotate="0" src="assets/wf-45.png" /> 
    <note> 
     <p>When the tabs of the edit dialog of a step component do not match this default appearance, the step component has defined scripts, node properties, or dialog tabs that override these inherited tabs.</p> 
    </note></li> 
  </ul> 
  <h3>ECMA Scripts</h3> 
  <p>The following objects are available (dependent on step type) within ECMA scripts:</p> 
  <ul> 
   <li><a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/workflow/exec/WorkItem">WorkItem</a> workItem</li> 
   <li><a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/workflow/WorkflowSession">WorkflowSession</a> workflowSession</li> 
   <li><a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/workflow/exec/WorkflowData">WorkflowData</a> workflowData</li> 
   <li><span class="code">args</span>: array with the process arguments.<br /> </li> 
   <li><span class="code">sling</span>: to access other osgi services.</li> 
   <li><span class="code">jcrSession</span></li> 
  </ul> 
  <h3>MetaDataMaps</h3> 
  <p>You can use workflow metadata to persist information that is required during the lifetime of the workflow. A common requirement of workflow steps is to persist data for future use in the workflow, or to retrieve the persisted data. </p> 
  <p>There are three types of MetaDataMap objects - for <span class="code">Workflow</span>, <span class="code">WorkflowData</span> and <span class="code">WorkItem</span> objects. They all have the same intended purpose - to store metadata.</p> 
  <p>A WorkItem has its own MetaDataMap that can be only used while that workitem (e.g. step) is running.</p> 
  <p>Both <span class="code">Workflow</span> and <span class="code">WorkflowData</span> metadatamaps are shared over the entire workflow. For these cases it is recommended to only use the <span class="code">WorkflowData</span> metadata map.</p> 
  <h2>Creating Custom Workflow Step Components</h2> 
  <p>Workflow step components can be <a href="../../../sites/developing/using/components.md">created in the same manner as any other component</a>.</p> 
  <p>To inherit from one of the (existing) base step components, add the following property to the <span class="code">cq:Component</span> node:</p> 
  <ul> 
   <li>Name: <span class="code">sling:resourceSuperType</span></li> 
   <li>Type: <span class="code">String</span></li> 
   <li>Value: One of the following paths that resolves to a base component: 
    <ul> 
     <li><span class="code">cq/workflow/components/model/process</span></li> 
     <li><span class="code">cq/workflow/components/model/participant</span></li> 
     <li><span class="code">cq/workflow/components/model/dynamic_participant</span></li> 
    </ul> </li> 
  </ul> 
  <h3>Specifying the Default Title and Description for Step Instances</h3> 
  <p>Use the following procedure to specify default values for the <strong>Title</strong> and <strong>Description</strong> fields on the <strong>Common</strong> tab.</p> 
  <note> 
   <p>The field values appear on the step instance when both of the following requirements are satisfied:</p> 
   <ul> 
    <li>The edit dialog of the step stores the title and description in the following locations: 
     <ul> 
      <li><span class="code">./jcr:title</span></li> 
      <li><span class="code">./jcr:description</span> locations</li> 
     </ul> This requirement is satisfied when the edit dialog uses the Common tab that the <span class="code">/libs/cq/flow/components/step/step</span> component implements.</li> 
    <li>The step component or an ancestor of the component does not override the <span class="code">step.jsp</span> script that the <span class="code">/libs/cq/flow/components/step/step</span> component implements.</li> 
   </ul> 
  </note> 
  <ol> 
   <li><p>Below the <span class="code">cq:Component</span> node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:editConfig</span></li> 
     <li>Type: <span class="code">cq:EditConfig</span></li> 
    </ul> 
    <note> 
     <p>For more information about the cq:editConfig node, see <a href="../../../sites/developing/using/components.md#configuringtheeditbehaviourofacomponent">Configuring the Edit Behaviour of a Component</a>.</p> 
    </note></li> 
   <li><p>Below the <span class="code">cq:EditConfig</span> node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:formParameters</span></li> 
     <li>Type: <span class="code">nt:unstructured</span></li> 
    </ul> </li> 
   <li><p>Add <span class="code">String</span> properties of the following names to the <span class="code">cq:formParameters</span> node:</p> 
    <ul> 
     <li><span class="code">jcr:title</span>: The value fills the <strong>Title</strong> field of the <strong>Common</strong> tab.</li> 
     <li><span class="code">jcr:description</span>: The value fills the <strong>Description</strong> field of the <strong>Common</strong> tab.</li> 
    </ul> </li> 
  </ol> 
  <h3>Saving Property Values in Workflow Metadata</h3> 
  <note> 
   <p>See <a href="#persistingandaccessingdata">Persisting and Accessing Data</a>. In particular, for information about accessing the property value at runtime, see <a href="#accessingdialogpropertyvaluesatruntime">Accessing Dialog Property Values at Runtime</a>.</p> 
  </note> 
  <p>The name property of <span class="code">cq:Widget</span> items specifies the JCR node that stores the widget's value. When widgets in the dialog of workflow step compnents store values below the <span class="code">./metaData</span> node, the value is added to the workflow <span class="code">MetaDataMap</span>. </p> 
  <p>For example, a text field in a dialog is a <span class="code">cq:Widget</span> node that has the following properties:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th>Name</th> 
     <th>Type</th> 
     <th>Value</th> 
    </tr> 
    <tr> 
     <td><span class="code">xtype</span></td> 
     <td><span class="code">String</span></td> 
     <td><span class="code">textarea</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">name</span></td> 
     <td><span class="code">String</span></td> 
     <td><span class="code">./metaData/subject</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">fieldLabel</span></td> 
     <td><span class="code">String</span></td> 
     <td><span class="code">Email Subject</span></td> 
    </tr> 
   </tbody> 
  </table> 
  <p>The value that is specified in this text field is added to the workflow instance's <span class="code"><a href="#metadatamaps">MetaDataMap</a></span> object, and is associated with the <span class="code">subject</span> key. </p> 
  <note> 
   <p>When the key is <span class="code">PROCESS_ARGS</span>, the value is readily available in ECMA script implementations via the <span class="code">args</span> variable. In this case, the value of the name property is <span class="code">./metaData/PROCESS_ARGS.</span></p> 
  </note> 
  <h3>Overriding the Step Implementation</h3> 
  <p>Each base step component enable workflow model developers to configure the following key features at design time:</p> 
  <ul> 
   <li>Process Step: The service or ECMA script to execute at runtime. </li> 
   <li>Participant Step: The ID of the user that is assigned the generated work item. </li> 
   <li>Dynamic Participant Step: The service or ECMA script that selects the ID of the user that is assigned the work item.</li> 
  </ul> 
  <p>To focus the component for use in a specific workflow scenario, configure the key feature in the design and remove the ability for model developers to change it.</p> 
  <ol> 
   <li><p>Below the cq:component node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:editConfig</span></li> 
     <li>Type: <span class="code">cq:EditConfig</span></li> 
    </ul> <p>For more information about the cq:editConfig node, see <a href="../../../sites/developing/using/components.md#configuringtheeditbehaviourofacomponent">Configuring the Edit Behaviour of a Component</a>.</p> </li> 
   <li><p>Below the cq:EditConfig node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:formParameters</span></li> 
     <li>Type: <span class="code">nt:unstructured</span></li> 
    </ul> </li> 
   <li><p>Add a <span class="code">String</span> property to the <span class="code">cq:formParameters</span> node. The component super type determines the name of the property:</p> 
    <ul> 
     <li>Process Step: <span class="code">PROCESS</span></li> 
     <li>Participant Step: <span class="code">PARTICIPANT</span></li> 
     <li>Dynamic Participant Step: <span class="code">DYNAMIC_PARTICIPANT</span></li> 
    </ul> </li> 
   <li><p>Specify the value of the property:</p> 
    <ul> 
     <li><span class="code">PROCESS</span>: The path to the ECMA script or the PID of the service that implements the step behavior.</li> 
     <li><span class="code">PARTICIPANT</span>: The ID of the user who is assigned the work item.</li> 
     <li><span class="code">DYNAMIC_PARTICIPANT</span>: The path to the ECMA script or the PID of the service that selects the user to assign the work item.</li> 
    </ul> </li> 
   <li><p>To remove the ability of model developers to change your property values, override the dialog of the component super type. </p> </li> 
  </ol> 
  <h3>Adding Forms and Dialogs to Participant Steps</h3> 
  <p>Customize your participant step component to provide features that are found in the <a href="../../../sites/developing/using/workflows-step-ref.md#main-pars-title-0">Form Participant Step</a> and <a href="../../../sites/developing/using/workflows-step-ref.md#main-pars-title-0">Dialog Participant Step</a> components:</p> 
  <ul> 
   <li>Present a form to the user when they open the generated work item. </li> 
   <li>Present a custom dialog to the user when they complete the generated work item.</li> 
  </ul> 
  <p>Peform the following procedure on your new component (see <a href="#creatingcustomworkflowstepcomponents">Creating Custom Workflow Step Components</a>):</p> 
  <ol> 
   <li><p>Below the <span class="code">cq:Component</span> node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:editConfig</span></li> 
     <li>Type: <span class="code">cq:EditConfig</span></li> 
    </ul> <p>For more information about the cq:editConfig node, see <a href="../../../sites/developing/using/components.md#configuringtheeditbehaviourofacomponent">Configuring the Edit Behaviour of a Component</a>.</p> </li> 
   <li><p>Below the cq:EditConfig node, add the following node:</p> 
    <ul> 
     <li>Name: <span class="code">cq:formParameters</span></li> 
     <li>Type: <span class="code">nt:unstructured</span></li> 
    </ul> </li> 
   <li><p>To present a form when the user opens the work item, add the following property to the <span class="code">cq:formParameters</span> node:</p> 
    <ul> 
     <li>Name: <span class="code">FORM_PATH</span></li> 
     <li>Type: <span class="code">String</span></li> 
     <li>Value: The path that resolves to the form</li> 
    </ul> </li> 
   <li><p>To present a custom dialog when the user completes the work item, add the following property to the <span class="code">cq:formParameters</span> node</p> 
    <ul> 
     <li>Name: <span class="code">DIALOG_PATH</span></li> 
     <li>Type: <span class="code">String</span></li> 
     <li>Value: The path that resolves to the dialog</li> 
    </ul> </li> 
  </ol> 
  <h3>Configuring the Workflow Step Runtime Behavior</h3> 
  <p>Below the <span class="code">cq:Component</span> node, add a <span class="code">cq:EditConfig</span> node. Below that add an <span class="code">nt:unstructured</span> node (must be named <span class="code">cq:formParameters</span>) and to that node add the following properties:</p> 
  <ul> 
   <li>Name: <span class="code">PROCESS_AUTO_ADVANCE</span> 
    <ul> 
     <li>Type: <span class="code">Boolean</span></li> 
     <li>Value: 
      <ul> 
       <li>when set to <span class="code">true</span> the workflow will run that step and continue - this is default and also recommended</li> 
       <li>when <span class="code">false</span>, the workflow will run and stop; this needs extra handling, so <span class="code">true</span> is recommended</li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
  <ul> 
   <li>Name: <span class="code">DO_NOTIFY</span> 
    <ul> 
     <li>Type: <span class="code">Boolean</span></li> 
     <li>Value: indicates whether email notifications should be sent for user participation steps (and assumes that the mail server is correctly configured)</li> 
    </ul> </li> 
  </ul> 
  <h2>Persisting and Accessing Data</h2> 
  <h3>Persisting Data for Subsequent Workflow Steps</h3> 
  <p>You can use workflow metadata to persist information that is required during the lifetime of the workflow - and between steps. A common requirement of workflow steps is to persist data for future use, or to retrieve the persisted data from prior steps. </p> 
  <p>Workflow metadata is stored in a <span class="code"><a href="#metadatamaps">MetaDataMap</a></span> object. The Java API provides the <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/granite/workflow/exec/Workflow">Workflow.getWorkflowData</a></span> method to return a <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/granite/workflow/exec/WorkflowData">WorkflowData</a></span> object that provides the appropriate <span class="code">MetaDataMap</span> object. This <span class="code">WorkflowData</span> <span class="code">MetaDataMap</span> object is available to the OSGi service or ECMA script of a step component.</p> 
  <h4>Java</h4> 
  <p>The execute method of the <span class="code">WorkflowProcess</span> implementation is passed the <span class="code">WorkItem</span> object. Use this object to obtain the <span class="code">WorkflowData</span> object for the current workflow instance. The following example adds an item to the workflow <span class="code">MetaDataMap</span> object and then logs each item. The ("mykey", "My Step Value") item is available to subsequent steps in the workflow.</p> 
  <codeblock class="syntax java">
    public&amp;nbsp;void&amp;nbsp;execute(WorkItem&amp;nbsp;item,&amp;nbsp;WorkflowSession&amp;nbsp;session,&amp;nbsp;MetaDataMap&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;WorkflowException&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MetaDataMap&amp;nbsp;wfd&amp;nbsp;=&amp;nbsp;item.getWorkflow().getWorkflowData().getMetaDataMap();!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wfd.put("mykey",&amp;nbsp;"My&amp;nbsp;Step&amp;nbsp;Value");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Set&lt;String&gt;&amp;nbsp;keyset&amp;nbsp;=&amp;nbsp;wfd.keySet();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&lt;String&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;keyset.iterator();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(i.hasNext()){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;key&amp;nbsp;=&amp;nbsp;i.next();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("The&amp;nbsp;workflow&amp;nbsp;medata&amp;nbsp;includes&amp;nbsp;key&amp;nbsp;{}&amp;nbsp;and&amp;nbsp;value&amp;nbsp;{}",key.toString(),wfd.get(key).toString());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <h4>ECMA Script</h4> 
  <p>The <span class="code">graniteWorkItem</span> variable is the ECMA script representation of the current <span class="code">WorkItem</span> Java object. Therefore, you can use the <span class="code">graniteWorkItem</span> variable to obtain the workflow metadata. The following ECMA script can be used to implement a <strong>Process Step</strong> to add an item to the workflow <span class="code">MetaDataMap</span> object and then log each item. These items are then available to subsequent steps in the workflow.</p> 
  <note> 
   <p>The <span class="code">metaData</span> variable that is immediately available to the step script is the metadata of the step. The step metadata is different from the workflow metadata.</p> 
  </note> 
  <codeblock gutter="true" class="syntax js">
    var&amp;nbsp;currentDateInMillis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();!!discoiqbr!!!!discoiqbr!!graniteWorkItem.getWorkflowData().getMetaDataMap().put("hardcodedKey","theKey");!!discoiqbr!!!!discoiqbr!!graniteWorkItem.getWorkflowData().getMetaDataMap().put("currentDateInMillisKey",currentDateInMillis);!!discoiqbr!!!!discoiqbr!!var&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().keySet().iterator();!!discoiqbr!!while&amp;nbsp;(iterator.hasNext()){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;key&amp;nbsp;=&amp;nbsp;iterator.next();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("Workflow&amp;nbsp;metadata&amp;nbsp;key,&amp;nbsp;value&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;key.toString()&amp;nbsp;+&amp;nbsp;",&amp;nbsp;"&amp;nbsp;+&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().get(key));!!discoiqbr!!} 
  </codeblock> 
  <h3>Accessing Dialog Property Values at Runtime</h3> 
  <p>The <span class="code">MetaDataMap</span> object of workflow instances is useful for storing and retrieving data throughout the lifetime of the workflow. For workflow step components implementations, the <span class="code">MetaDataMap</span> is especially useful for retrieving component property values at runtime.</p> 
  <note> 
   <p>For information about configuring the component dialog to store properties as workflow metadata, see <a href="#savingpropertyvaluesinworkflowmetadata">Saving Property Values in Workflow Metadata</a>.</p> 
  </note> 
  <p>The workflow <span class="code">MetaDataMap</span> is available to Java and ECMA script process implementations:</p> 
  <ul> 
   <li>In Java implementations of the WorkflowProcess interface, the <span class="code">args</span> parameter is the <span class="code">MetaDataMap</span> object for the workflow. </li> 
   <li>In ECMA script implementations, the value is available using the <span class="code">args</span> and <span class="code">metadata</span> variables. </li> 
  </ul> 
  <h3>Example: Retrieving the Arguments of the Process Step Component</h3> 
  <p>The edit dialog of the <strong>Process Step</strong> component includes the <strong>Arguments</strong> property. The value of the <strong>Arguments</strong> property is stored in the worklow metadata, and is associated with the <span class="code">PROCESS_ARGS</span> key.</p> 
  <p>In the following diagram, the value of the <strong>Arguments</strong> property is <span class="code">argument1, argument2</span>:</p> 
  <img imageRotate="0" src="assets/wf-24.png" /> 
  <h4>Java</h4> 
  <p>The following Java code is the <span class="code">execute</span> method for a <span class="code">WorkflowProcess</span> implementation. The method logs the value in the <span class="code">args</span> <span class="code">MetaDataMap</span> that is associated with the <span class="code">PROCESS_ARGS</span> key.</p> 
  <codeblock gutter="true" class="syntax java">
    public&amp;nbsp;void&amp;nbsp;execute(WorkItem&amp;nbsp;item,&amp;nbsp;WorkflowSession&amp;nbsp;session,&amp;nbsp;MetaDataMap&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;WorkflowException&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(args.containsKey("PROCESS_ARGS")){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("workflow&amp;nbsp;metadata&amp;nbsp;for&amp;nbsp;key&amp;nbsp;PROCESS_ARGS&amp;nbsp;and&amp;nbsp;value&amp;nbsp;{}",args.get("PROCESS_ARGS","string").toString());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} 
  </codeblock> 
  <p>When a process step that uses this Java implementation executes, the log contains the following entry:</p> 
  <codeblock gutter="true" class="syntax xml">
    16.02.2018&amp;nbsp;12:07:39.566&amp;nbsp;*INFO*&amp;nbsp;[JobHandler:&amp;nbsp;/var/workflow/instances/server0/2018-02-16/model_855140139900189:/content/we-retail/de]&amp;nbsp;com.adobe.example.workflow.impl.process.LogArguments&amp;nbsp;workflow&amp;nbsp;metadata&amp;nbsp;for&amp;nbsp;key&amp;nbsp;PROCESS_ARGS&amp;nbsp;and&amp;nbsp;value&amp;nbsp;argument1,&amp;nbsp;argument2 
  </codeblock> 
  <h4>ECMA Script</h4> 
  <p>The following ECMA script is used as the process for the <strong>Process Step</strong>. It logs the number of arguments and the argument values:</p> 
  <codeblock gutter="true" class="syntax js">
    var&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().keySet().iterator();!!discoiqbr!!while&amp;nbsp;(iterator.hasNext()){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;key&amp;nbsp;=&amp;nbsp;iterator.next();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("Workflow&amp;nbsp;metadata&amp;nbsp;key,&amp;nbsp;value&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;key.toString()&amp;nbsp;+&amp;nbsp;",&amp;nbsp;"&amp;nbsp;+&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().get(key));!!discoiqbr!!}!!discoiqbr!!log.info("hardcodedKey&amp;nbsp;"+&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().get("hardcodedKey"));!!discoiqbr!!log.info("currentDateInMillisKey&amp;nbsp;"+&amp;nbsp;graniteWorkItem.getWorkflowData().getMetaDataMap().get("currentDateInMillisKey")); 
  </codeblock> 
  <note> 
   <p>This section describes how to work with arguments for process steps. The information also applies to dynamic participant choosers.</p> 
   <p> </p> 
  </note> 
  <note> 
   <p>For another example of storing component properties in workflow metadata, see <a href="#examplecreatealoggerworkflowstep">Example: Create a Logger Workflow Step</a>. This example features a dailog that associates metadata value with a key other than <span class="code">PROCESS_ARGS</span>.</p> 
  </note> 
  <h3>Scripts and Process Arguments</h3> 
  <p>Within a script for a <strong>Process Step</strong> component, arguments are available through the <span class="code">args</span> object.</p> 
  <p>When creating a custom step component, the object <span class="code">metaData</span> is available in a script. This object is limited to a single string argument. </p> 
  <h2>Developing Process Step Implementations</h2> 
  <p>When process steps are started during the process of a workflow, the steps send a request to an OSGi service or execute an ECMA script. Develop the service or ECMA script that performs the actions that your workflow requires.</p> 
  <note> 
   <p>For information about associating your Process Step component with the service or script, see <a href="../../../sites/developing/using/workflows-step-ref.md#main-pars-title-0">Process Step</a> or <a href="#overridingthestepimplementation">Overriding the Step Implementation</a>.</p> 
  </note> 
  <h3>Implementing a Process Step with a Java Class</h3> 
  <p>To define a process step as an OSGI service component (Java bundle):</p> 
  <ol> 
   <li><p>Create the bundle and deploy it into the OSGI container. Refer to the documentation about creating a bundle with <a href="../../../sites/developing/using/developing-with-crxde-lite.md">CRXDE Lite</a> or <a href="../../../sites/developing/using/howto-projects-eclipse.md">Eclipse</a>.</p> 
    <note> 
     <p>The OSGI component needs to implement the <span class="code">WorkflowProcess</span> interface with its <span class="code">execute()</span> method. See the example code below.</p> 
    </note> 
    <note> 
     <p>The package name needs to be added to the <span class="code">&amp;lt;<i>Private-Package</i>&amp;gt;</span> section of the <span class="code">maven-bundle-plugin</span> configuration.</p> 
    </note></li> 
   <li><p>Add the SCR property <span class="code">process.label</span><strong> </strong> and set the value as you require. This will be the name which your process step is listed as when using the generic <strong>Process Step</strong> component. See the example below.</p> </li> 
   <li><p>In the <strong>Models</strong> editor, add the process step to the workflow using the generic <strong>Process Step</strong> component.</p> </li> 
   <li><p>In the edit dialog (of the <strong>Process Step</strong>), go to the <strong>Process</strong> tab and select your process implementation. </p> </li> 
   <li><p>If you use arguments in your code, set the <strong>Process Arguments</strong>. For example: false.</p> </li> 
   <li><p>Save the changes, for both the step and the workflow model (top left corner of the model editor).</p> </li> 
  </ol> 
  <p>The java methods, respectively the classes that implement the executable Java method are registered as OSGI services, enabling you to add methods at anytime during runtime.</p> 
  <p>The following OSGI component adds the property <span class="code">approved</span> to the page content node when the payload is a page:</p> 
  <codeblock gutter="true" class="syntax java">
    package&amp;nbsp;com.adobe.example.workflow.impl.process;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowException;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowSession;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkItem;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkflowData;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkflowProcess;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.metadata.MetaDataMap;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Component;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Property;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Service;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.osgi.framework.Constants;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;javax.jcr.Node;!!discoiqbr!!import&amp;nbsp;javax.jcr.RepositoryException;!!discoiqbr!!import&amp;nbsp;javax.jcr.Session;!!discoiqbr!!!!discoiqbr!!/**!!discoiqbr!!&amp;nbsp;*&amp;nbsp;Sample&amp;nbsp;workflow&amp;nbsp;process&amp;nbsp;that&amp;nbsp;sets&amp;nbsp;an&amp;nbsp;&lt;code&gt;approve&lt;/code&gt;&amp;nbsp;property&amp;nbsp;to&amp;nbsp;the&amp;nbsp;payload&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;process&amp;nbsp;argument&amp;nbsp;value.!!discoiqbr!!&amp;nbsp;*/!!discoiqbr!!@Component!!discoiqbr!!@Service!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;MyProcess&amp;nbsp;implements&amp;nbsp;WorkflowProcess&amp;nbsp;{!!discoiqbr!!!!discoiqbr!!&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"An&amp;nbsp;example&amp;nbsp;workflow&amp;nbsp;process&amp;nbsp;implementation.")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;DESCRIPTION&amp;nbsp;=&amp;nbsp;Constants.SERVICE_DESCRIPTION;&amp;nbsp;!!discoiqbr!!&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Adobe")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;VENDOR&amp;nbsp;=&amp;nbsp;Constants.SERVICE_VENDOR;!!discoiqbr!!&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"My&amp;nbsp;Sample&amp;nbsp;Workflow&amp;nbsp;Process")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;LABEL="process.label";!!discoiqbr!!!!discoiqbr!!!!discoiqbr!!&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;TYPE_JCR_PATH&amp;nbsp;=&amp;nbsp;"JCR_PATH";!!discoiqbr!!!!discoiqbr!!&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(WorkItem&amp;nbsp;item,&amp;nbsp;WorkflowSession&amp;nbsp;session,&amp;nbsp;MetaDataMap&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;WorkflowException&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;WorkflowData&amp;nbsp;workflowData&amp;nbsp;=&amp;nbsp;item.getWorkflowData();!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(workflowData.getPayloadType().equals(TYPE_JCR_PATH))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString()&amp;nbsp;+&amp;nbsp;"/jcr:content";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;jcrSession&amp;nbsp;=&amp;nbsp;session.adaptTo(Session.class);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;nbsp;node&amp;nbsp;=&amp;nbsp;(Node)&amp;nbsp;jcrSession.getItem(path);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(node&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node.setProperty("approved",&amp;nbsp;readArgument(args));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcrSession.save();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(RepositoryException&amp;nbsp;e)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;WorkflowException(e.getMessage(),&amp;nbsp;e);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;}!!discoiqbr!!!!discoiqbr!!&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;readArgument(MetaDataMap&amp;nbsp;args)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;String&amp;nbsp;argument&amp;nbsp;=&amp;nbsp;args.get("PROCESS_ARGS",&amp;nbsp;"false");!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;argument.equalsIgnoreCase("true");!!discoiqbr!!&amp;nbsp;}!!discoiqbr!!}!!discoiqbr!! 
  </codeblock> 
  <note> 
   <p>If the process fails three times in a row, an item is placed in the Inbox of the workflow administrator.</p> 
  </note> 
  <h3>Using ECMAScript</h3> 
  <p>ECMA scripts enable script developers to implement process steps. The scripts are located in the JCR repository and executed from there.</p> 
  <p>The following table lists the variables that are immediately available to process scripts, providing access to objects of the workflow Java API.</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th>Java Class</th> 
     <th>Script variable name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.exec.WorkItem</span></td> 
     <td><span class="code">graniteWorkItem</span></td> 
     <td>The current step instance.</td> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.WorkflowSession</span></td> 
     <td><span class="code">graniteWorkflowSession</span></td> 
     <td>The workflow session of the current step instance.</td> 
    </tr> 
    <tr> 
     <td><span class="code">String[]</span> (contains process arguments)</td> 
     <td><span class="code">args</span></td> 
     <td>The step arguments.</td> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.metadata.MetaDataMap</span></td> 
     <td><span class="code">metaData</span></td> 
     <td>The meta data of the current step instance.</td> 
    </tr> 
    <tr> 
     <td><span class="code">org.apache.sling.scripting.core.impl.InternalScriptHelper</span></td> 
     <td><span class="code">sling</span></td> 
     <td>Provides access to the Sling runtime environment.</td> 
    </tr> 
   </tbody> 
  </table> 
  <p>The following example script demonstrates how to access the JCR node that represents the workflow payload. The <span class="code">graniteWorkflowSession</span> variable is adapted to a JCR session variable, which is used to obtain the node from the payload path.</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;workflowData&amp;nbsp;=&amp;nbsp;graniteWorkItem.getWorkflowData();!!discoiqbr!!if&amp;nbsp;(workflowData.getPayloadType()&amp;nbsp;==&amp;nbsp;"JCR_PATH")&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;jcrsession&amp;nbsp;=&amp;nbsp;graniteWorkflowSession.adaptTo(Packages.javax.jcr.Session);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;node&amp;nbsp;=&amp;nbsp;jcrsession.getNode(path);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(node.hasProperty("approved")){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node.setProperty("approved",&amp;nbsp;args[0]&amp;nbsp;==&amp;nbsp;"true"&amp;nbsp;?&amp;nbsp;true&amp;nbsp;:&amp;nbsp;false);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node.save();!!discoiqbr!!&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>The following script checks if the payload is an image (<span class="code">.png</span> file), creates a black and white image from it, and saves it as a sibling node.</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;workflowData&amp;nbsp;=&amp;nbsp;graniteWorkItem.getWorkflowData();!!discoiqbr!!if&amp;nbsp;(workflowData.getPayloadType()&amp;nbsp;==&amp;nbsp;"JCR_PATH")&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;jcrsession&amp;nbsp;=&amp;nbsp;graniteWorkflowSession.adaptTo(Packages.javax.jcr.Session);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;node&amp;nbsp;=&amp;nbsp;jcrsession.getRootNode().getNode(path.substring(1));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(node.isNodeType("nt:file")&amp;nbsp;&amp;&amp;&amp;nbsp;node.getProperty("jcr:content/jcr:mimeType").getString().indexOf("image/")&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;is&amp;nbsp;=&amp;nbsp;node.getProperty("jcr:content/jcr:data").getStream();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;layer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Packages.com.day.image.Layer(is);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;layer.grayscale();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;parent&amp;nbsp;=&amp;nbsp;node.getParent();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;gn&amp;nbsp;=&amp;nbsp;parent.addNode("grey"&amp;nbsp;+&amp;nbsp;node.getName(),&amp;nbsp;"nt:file");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;content&amp;nbsp;=&amp;nbsp;gn.addNode("jcr:content",&amp;nbsp;"nt:resource");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;content.setProperty("jcr:mimeType","image/png");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;cal&amp;nbsp;=&amp;nbsp;Packages.java.util.Calendar.getInstance();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;content.setProperty("jcr:lastModified",cal);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;f&amp;nbsp;=&amp;nbsp;Packages.java.io.File.createTempFile("test",".png");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;tout&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Packages.java.io.FileOutputStream(f);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;layer.write("image/png",&amp;nbsp;1.0,&amp;nbsp;tout);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Packages.java.io.FileInputStream(f);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;content.setProperty("jcr:data",&amp;nbsp;fis);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parent.save();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tout.close();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fis.close();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is.close();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.deleteOnExit();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>To use the script:</p> 
  <ol> 
   <li><p>Create the script (for example with CRXDE Lite) and save it in the repository below <span class="code">/apps/myapp/workflow/scripts</span></p> </li> 
   <li><p>To specify a title that identifies the script in the <strong>Process Step</strong> edit dialog, add the following properties to the <span class="code">jcr:content</span> node of your script:</p> 
    <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
     <tbody> 
      <tr> 
       <th>Name</th> 
       <th>Type</th> 
       <th>Value</th> 
      </tr> 
      <tr> 
       <td><span class="code">jcr:mixinTypes</span></td> 
       <td><span class="code">Name[]</span></td> 
       <td><span class="code">mix:title</span></td> 
      </tr> 
      <tr> 
       <td><span class="code">jcr:title</span></td> 
       <td><span class="code">String</span></td> 
       <td>The name to appear in the edit dialog.</td> 
      </tr> 
     </tbody> 
    </table> </li> 
   <li><p>Edit the <strong>Process Step</strong> instance and specify the script to be used.</p> </li> 
  </ol> 
  <h2>Developing Participant Choosers</h2> 
  <p>You can develop participant choosers for <strong>Dynamic Participant Step</strong> components. </p> 
  <p>When a <strong>Dynamic Participant Step</strong> component is started during a workflow, the step needs to detemine the participant to which the generated work item can be assigned. To do this the step either:</p> 
  <ul> 
   <li>sends a request to an OSGi service </li> 
   <li>executes an ECMA script to select the participant</li> 
  </ul> 
  <p>You can develop a service or ECMA script that selects the participant according to the requirements of your workflow.</p> 
  <note> 
   <p>For information about associating your <strong>Dynamic Participant Step</strong> component with the service or script, see <a href="../../../sites/developing/using/workflows-step-ref.md#dynamicparticipantstep">Dynamic Participant Step</a> or <a href="#main-pars-title">Overriding the Step Implementation</a>.</p> 
  </note> 
  <h3>Developing a Participant Chooser Using a Java class</h3> 
  <p>To define a participant step as an OSGI service component (Java class):</p> 
  <ol> 
   <li><p>The OSGI component needs to implement the <span class="code">ParticipantStepChooser</span> interface with its <span class="code">getParticipant()</span> method. See the example code below.</p> <p>Create the bundle and deploy it into the OSGI container.</p> </li> 
   <li><p>Add the SCR property <span class="code">chooser.label</span> and set the value as required. This will be the name as which your participant chooser is listed, using the <strong>Dynamic Participant Step</strong> component. See the example:</p> 
    <codeblock gutter="true" class="syntax java">
      package&amp;nbsp;com.adobe.example.workflow.impl.process;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowException;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowSession;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.ParticipantStepChooser;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkItem;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkflowData;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.metadata.MetaDataMap;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Component;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Property;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Service;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.osgi.framework.Constants;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!/**!!discoiqbr!!&amp;nbsp;*&amp;nbsp;Sample&amp;nbsp;dynamic&amp;nbsp;participant&amp;nbsp;step&amp;nbsp;that&amp;nbsp;determines&amp;nbsp;the&amp;nbsp;participant&amp;nbsp;based&amp;nbsp;on&amp;nbsp;a&amp;nbsp;path&amp;nbsp;given&amp;nbsp;as&amp;nbsp;argument.!!discoiqbr!!&amp;nbsp;*/!!discoiqbr!!@Component!!discoiqbr!!@Service!!discoiqbr!!!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;MyDynamicParticipant&amp;nbsp;implements&amp;nbsp;ParticipantStepChooser&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"An&amp;nbsp;example&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;dynamic&amp;nbsp;participant&amp;nbsp;chooser.")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;DESCRIPTION&amp;nbsp;=&amp;nbsp;Constants.SERVICE_DESCRIPTION;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Adobe")!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;VENDOR&amp;nbsp;=&amp;nbsp;Constants.SERVICE_VENDOR;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Dynamic&amp;nbsp;Participant&amp;nbsp;Chooser&amp;nbsp;Process")!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;LABEL=ParticipantStepChooser.SERVICE_PROPERTY_LABEL;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;TYPE_JCR_PATH&amp;nbsp;=&amp;nbsp;"JCR_PATH";!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getParticipant(WorkItem&amp;nbsp;workItem,&amp;nbsp;WorkflowSession&amp;nbsp;workflowSession,&amp;nbsp;MetaDataMap&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;WorkflowException&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WorkflowData&amp;nbsp;workflowData&amp;nbsp;=&amp;nbsp;workItem.getWorkflowData();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(workflowData.getPayloadType().equals(TYPE_JCR_PATH))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;pathFromArgument&amp;nbsp;=&amp;nbsp;args.get("PROCESS_ARGS",&amp;nbsp;String.class);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(pathFromArgument&amp;nbsp;!=&amp;nbsp;null&amp;nbsp;&amp;&amp;&amp;nbsp;path.startsWith(pathFromArgument))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"admin";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"administrators";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
    </codeblock></li> 
   <li><p>In the <strong>Models</strong> editor, add the dynamic participant step to the workflow using the generic <strong>Dynamic Participant Step</strong> component.</p> </li> 
   <li><p>In the edit dialog select the <strong>Participant Chooser</strong> tab and select your chooser implementation.</p> </li> 
   <li><p>If you use arguments in your code set the <strong>Process Arguments</strong>. For this example: <span class="code">/content/we-retail/de</span>.</p> </li> 
   <li><p>Save the changes, for both the step and the workflow model.</p> </li> 
  </ol> 
  <h3>Developing a Participant Chooser Using an ECMA Script</h3> 
  <p>You can create an ECMA script that selects the user that is assigned the work item that the <strong>Participant Step</strong> generates. The script must include a function named <span class="code">getParticipant</span> that requires no argumemts, and returns a <span class="code">String</span> that contains the ID of a user or group.</p> 
  <p>Scripts are located in the JCR repository and executed from there.</p> 
  <p>The following table lists the variables that provide immediate access to workflow Java objects in your scripts.</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th>Java Class</th> 
     <th>Script variable name</th> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.exec.WorkItem</span></td> 
     <td><span class="code">graniteWorkItem</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.WorkflowSession</span></td> 
     <td><span class="code">graniteWorkflowSession</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">String[]</span> (contains process arguments)</td> 
     <td><span class="code">args</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">com.adobe.granite.workflow.metadata.MetaDataMap</span></td> 
     <td><span class="code">metaData</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">org.apache.sling.scripting.core.impl.InternalScriptHelper</span></td> 
     <td><span class="code">sling</span></td> 
    </tr> 
   </tbody> 
  </table> 
  <codeblock gutter="true" class="syntax js">
    function&amp;nbsp;getParticipant()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;workflowData&amp;nbsp;=&amp;nbsp;graniteWorkItem.getWorkflowData();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(workflowData.getPayloadType()&amp;nbsp;==&amp;nbsp;"JCR_PATH")&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(path.indexOf("/content/we-retail/de")&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"admin";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"administrators";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <ol> 
   <li><p>Create the script (for example with CRXDE Lite) and save it in the repository below <span class="code">/apps/myapp/workflow/scripts</span></p> </li> 
   <li><p>To specify a title that identifies the script in the <strong>Process Step</strong> edit dialog, add the following properties to the <span class="code">jcr:content</span> node of your script:</p> 
    <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
     <tbody> 
      <tr> 
       <th>Name</th> 
       <th>Type</th> 
       <th>Value</th> 
      </tr> 
      <tr> 
       <td><span class="code">jcr:mixinTypes</span></td> 
       <td><span class="code">Name[]</span></td> 
       <td><span class="code">mix:title</span></td> 
      </tr> 
      <tr> 
       <td><span class="code">jcr:title</span></td> 
       <td><span class="code">String</span></td> 
       <td>The name to appear in the edit dialog.</td> 
      </tr> 
     </tbody> 
    </table> </li> 
   <li><p>Edit the <a href="../../../sites/developing/using/workflows-step-ref.md#main-pars-title-0">Dynamic Participant Step</a> instance and specify the script to be used. </p> </li> 
  </ol> 
  <h2>Handling Workflow Packages</h2> 
  <p><a href="../../../sites/authoring/using/workflows-applying.md#specifyingworkflowdetailsinthecreateworkflowwizard">Workflow packages</a> can be passed to a workflow for processing. Workflow packages contain references to resources such as pages and assets.</p> 
  <note> 
   <p>The following workflow process steps accept workflow packages for bulk page activation:</p> 
   <ul> 
    <li><span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/wcm/workflow/process/ActivatePageProcess">com.day.cq.wcm.workflow.process.ActivatePageProcess</a></span> </li> 
    <li><span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/wcm/workflow/process/DeactivatePageProcess">com.day.cq.wcm.workflow.process.DeactivatePageProcess</a></span> </li> 
   </ul> 
  </note> 
  <p>You can develop workflow steps that obtain the package resources and process them. The following members of the <span class="code">com.day.cq.workflow.collection</span> package provide access to workflow packages:</p> 
  <ul> 
   <li><span class="code">ResourceCollection</span>: Workflow package class.</li> 
   <li><span class="code">ResourceCollectionUtil</span>: Use to retrieve ResourceCollection objects.</li> 
   <li><span class="code">ResourceCollectionManager</span>: Creates and retrieves collections. An implementation is deployed as an OSGi service. </li> 
  </ul> 
  <p>The following example Java class demonstrates how to obtain package resources:</p> 
  <codeblock gutter="true" class="syntax java">
    package&amp;nbsp;com.adobe.example;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;java.util.ArrayList;!!discoiqbr!!import&amp;nbsp;java.util.List;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.WorkflowException;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.WorkflowSession;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.collection.ResourceCollection;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.collection.ResourceCollectionManager;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.collection.ResourceCollectionUtil;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.exec.WorkItem;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.exec.WorkflowData;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.exec.WorkflowProcess;!!discoiqbr!!import&amp;nbsp;com.day.cq.workflow.metadata.MetaDataMap;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Component;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Property;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Service;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Reference;!!discoiqbr!!import&amp;nbsp;org.osgi.framework.Constants;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.slf4j.Logger;!!discoiqbr!!import&amp;nbsp;org.slf4j.LoggerFactory;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;javax.jcr.Node;!!discoiqbr!!import&amp;nbsp;javax.jcr.PathNotFoundException;!!discoiqbr!!import&amp;nbsp;javax.jcr.RepositoryException;!!discoiqbr!!import&amp;nbsp;javax.jcr.Session;&amp;nbsp;!!discoiqbr!!!!discoiqbr!!@Component!!discoiqbr!!@Service!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;LaunchBulkActivate&amp;nbsp;implements&amp;nbsp;WorkflowProcess&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;log&amp;nbsp;=&amp;nbsp;LoggerFactory.getLogger(LaunchBulkActivate.class);!!discoiqbr!!!!discoiqbr!!&amp;nbsp;@Property(value="Bulk&amp;nbsp;Activate&amp;nbsp;for&amp;nbsp;Launches")!!discoiqbr!!&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;PROCESS_NAME&amp;nbsp;="process.label";!!discoiqbr!!&amp;nbsp;@Property(value="A&amp;nbsp;sample&amp;nbsp;workflow&amp;nbsp;process&amp;nbsp;step&amp;nbsp;to&amp;nbsp;support&amp;nbsp;Launches&amp;nbsp;bulk&amp;nbsp;activation&amp;nbsp;of&amp;nbsp;pages")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;SERVICE_DESCRIPTION&amp;nbsp;=&amp;nbsp;Constants.SERVICE_DESCRIPTION;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;@Reference!!discoiqbr!!&amp;nbsp;private&amp;nbsp;ResourceCollectionManager&amp;nbsp;rcManager;!!discoiqbr!!public&amp;nbsp;void&amp;nbsp;execute(WorkItem&amp;nbsp;workItem,&amp;nbsp;WorkflowSession&amp;nbsp;workflowSession)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;workflowSession.getSession();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WorkflowData&amp;nbsp;data&amp;nbsp;=&amp;nbsp;workItem.getWorkflowData();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;path&amp;nbsp;=&amp;nbsp;null;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;type&amp;nbsp;=&amp;nbsp;data.getPayloadType();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(type.equals(TYPE_JCR_PATH)&amp;nbsp;&amp;&amp;&amp;nbsp;data.getPayload()&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;payloadData&amp;nbsp;=&amp;nbsp;(String)&amp;nbsp;data.getPayload();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(session.itemExists(payloadData))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;path&amp;nbsp;=&amp;nbsp;payloadData;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if&amp;nbsp;(data.getPayload()&amp;nbsp;!=&amp;nbsp;null&amp;nbsp;&amp;&amp;&amp;nbsp;type.equals(TYPE_JCR_UUID))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;nbsp;node&amp;nbsp;=&amp;nbsp;session.getNodeByUUID((String)&amp;nbsp;data.getPayload());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;path&amp;nbsp;=&amp;nbsp;node.getPath();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;CUSTOMIZED&amp;nbsp;CODE&amp;nbsp;IF&amp;nbsp;REQUIRED....!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(path&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;check&amp;nbsp;for&amp;nbsp;resource&amp;nbsp;collection!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ResourceCollection&amp;nbsp;rcCollection&amp;nbsp;=&amp;nbsp;ResourceCollectionUtil.getResourceCollection((Node)session.getItem(path),&amp;nbsp;rcManager);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;get&amp;nbsp;list&amp;nbsp;of&amp;nbsp;paths&amp;nbsp;to&amp;nbsp;replicate&amp;nbsp;(no&amp;nbsp;resource&amp;nbsp;collection:&amp;nbsp;size&amp;nbsp;==&amp;nbsp;1!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;otherwise&amp;nbsp;size&amp;nbsp;&gt;=&amp;nbsp;1!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;paths&amp;nbsp;=&amp;nbsp;getPaths(path,&amp;nbsp;rcCollection);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(String&amp;nbsp;aPath:&amp;nbsp;paths)&amp;nbsp;{!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;CUSTOMIZED&amp;nbsp;CODE....!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.warn("Cannot&amp;nbsp;process&amp;nbsp;because&amp;nbsp;path&amp;nbsp;is&amp;nbsp;null&amp;nbsp;for&amp;nbsp;this&amp;nbsp;"&amp;nbsp;+&amp;nbsp;"workitem:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;workItem.toString());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!}!!discoiqbr!!!!discoiqbr!!/**!!discoiqbr!!&amp;nbsp;*&amp;nbsp;helper!!discoiqbr!!&amp;nbsp;*/!!discoiqbr!!private&amp;nbsp;List&lt;String&gt;&amp;nbsp;getPaths(String&amp;nbsp;path,&amp;nbsp;ResourceCollection&amp;nbsp;rcCollection)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;paths&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(rcCollection&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;paths.add(path);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.debug("ResourceCollection&amp;nbsp;detected&amp;nbsp;"&amp;nbsp;+&amp;nbsp;rcCollection.getPath());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;is&amp;nbsp;a&amp;nbsp;resource&amp;nbsp;collection.&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;itself&amp;nbsp;is&amp;nbsp;not!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;replicated.&amp;nbsp;only&amp;nbsp;its&amp;nbsp;members!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Node&gt;&amp;nbsp;members&amp;nbsp;=&amp;nbsp;rcCollection.list(new&amp;nbsp;String[]{"cq:Page",&amp;nbsp;"dam:Asset"});!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Node&amp;nbsp;member:&amp;nbsp;members)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;mPath&amp;nbsp;=&amp;nbsp;member.getPath();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;paths.add(mPath);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch(RepositoryException&amp;nbsp;re)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.error("Cannot&amp;nbsp;build&amp;nbsp;path&amp;nbsp;list&amp;nbsp;out&amp;nbsp;of&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;collection&amp;nbsp;"&amp;nbsp;+&amp;nbsp;rcCollection.getPath());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;paths;!!discoiqbr!!}!!discoiqbr!!} 
  </codeblock> 
  <h2>Example: Creating a Custom Step</h2> 
  <p>An easy way to start creating your own custom step is to copy an existing step from:</p> 
  <p style="margin-left: 40px;"><span class="code">/libs/cq/workflow/components/model</span></p> 
  <h4>Creating the Basic Step</h4> 
  <ol> 
   <li><p>Recreate the path under /apps; for example:</p>  <p>The new folders are of type <span class="code">nt:folder</span>:</p> 
    <codeblock gutter="true" class="syntax xml">
      -&amp;nbsp;apps!!discoiqbr!!&amp;nbsp;&amp;nbsp;-&amp;nbsp;cq!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;workflow&amp;nbsp;(nt:folder)!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;components&amp;nbsp;(nt:folder)!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;model&amp;nbsp;(nt:folder) 
    </codeblock> 
    <note> 
     <p>This step does not apply to the classic UI Model editor.</p> 
    </note></li> 
   <li><p>Then place the copied step in your /apps folder; for example as:</p>  <p>Here is the result of our example customized step:<br /> </p> 
    <draft-comment color="green" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-06T02:44:24.028-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
     <p>which component was copied? as:</p> 
     <ul> 
      <li>the ones in /libs all look different</li> 
      <li>the screenshot looks as if it's not showing all sub-nodes (in which case it's not the full result)<br /> </li> 
     </ul> 
    </draft-comment><img imageRotate="0" src="assets/wf-34.png" /> 
    <note> 
     <p>Because in standard UI, only the title and not the details are not displayed on the card, <span class="code">details.jsp</span> is not needed as it was for the classic UI editor.</p> 
    </note></li> 
   <li><p>Apply the following properties to the node:</p>   
    <ul> 
     <li><span class="code">sling:resourceSuperType</span><br /> Must inherit from an existing step. <br /> In this example we are inheriting from the base step at <span class="code">cq/workflow/components/model/step</span>, but you can use other super types like <span class="code">participant</span>, <span class="code">process</span>, etc.</li> 
     <li><span class="code">jcr:title</span><br /> Is the title displayed when the component is listed in the step browser (left side panel of the workflow model editor).</li> 
     <li><span class="code">cq:icon</span><br /> Used to specify a <a href="/sites/developing/using/reference-materials/coral-ui/coralui3/Coral.Icon">Coral icon</a> for the step.</li> 
     <li><span class="code">componentGroup</span><br /> Must be one of the following: 
      <ul> 
       <li>Collaboration Workflow</li> 
       <li>DAM Workflow</li> 
       <li>Forms Workflow</li> 
       <li>Projects</li> 
       <li>WCM Workflow</li> 
       <li>Workflow</li> 
      </ul> </li> 
    </ul> <img imageRotate="0" src="assets/wf-35.png" /></li> 
   <li><p>You can now open a workflow model for editing. In the steps browser you can filter to see <strong>My Custom Step</strong>:<br /> </p> <img imageRotate="0" src="assets/wf-36.png" /><p>Dragging <strong>My Custom Step</strong> on to the model displays the card:<br /> </p> <img imageRotate="0" src="assets/wf-37.png" /><p>If no <span class="code">cq:icon</span> has been defined for the step, then a default icon is rendered using the first two letters of the title. For example:<br /> </p> <img imageRotate="0" src="assets/wf-38.png" /></li> 
  </ol> 
  <h4>Defining the Step Configure Dialog</h4> 
  <p>After <a href="#creatingthebasicstep-">Creating the Basic Step</a>, define the step <strong>Configure</strong> dialog as follows:</p> 
  <ol> 
   <li><p>Configure the properties on the node <span class="code">cq:editConfig</span> as follows:</p>  
    <ul> 
     <li><span class="code">cq:inherit</span> <br /> When set to <span class="code">true</span>, then your step component will inherit properties from the step you specified in <span class="code">sling:resourceSuperType</span>.</li> 
     <li><span class="code">cq:disableTargeting</span><br /> Set as required.</li> 
    </ul> <img imageRotate="0" src="assets/wf-39.png" /></li> 
   <li><p>Configure the properties on the node <span class="code">cq:formsParameter</span> as follows:</p>  
    <ul> 
     <li><span class="code">jcr:title</span><br /> Sets the default title on the step card in the model map and in the <strong>Title</strong> field of the <strong>My Custom - Step Properties</strong> configuration dialog.</li> 
     <li>You can also define your own custom properties.<br /> </li> 
    </ul> 
    <draft-comment color="yellow" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-09T06:11:06.700-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
     <p>screenshot needs re-doing - typo in SAMPLE_PROPERTY</p> 
    </draft-comment><img imageRotate="0" src="assets/wf-40.png" /></li> 
   <li><p>Configure the properties on the node <span class="code">cq:listeners</span>.</p> <p>The <span class="code">cq:listener</span> node and its properties allows you to set event handlers that react to events in the touch-enabled UI model editor; such as dragging a step onto a model page or editing a step properties.</p>  
    <ul> 
     <li><code class="code">afterMove: REFRESH_PAGE
       <discoiqbr /> </code></li> 
     <li><code class="code">afterdelete: CQ.workflow.flow.Step.afterDelete
       <discoiqbr /> </code></li> 
     <li><code class="code">afteredit: CQ.workflow.flow.Step.afterEdit
       <discoiqbr /> </code></li> 
     <li><span class="code">afterinsert: CQ.workflow.flow.Step.afterInsert</span></li> 
    </ul> <p>This configuration, is essential for the proper functioning of the editor. In the most cases this configuration must not be changed. </p> <p>However, setting <span class="code">cq:inherit</span> to true (on the <span class="code">cq:editConfig</span> node, see above) allows you to inherit this configuration, without needing to explicitly include it in your step definition. If no inheritance is in place, then you do need to add this node with the following properties and values. </p> <p>In this example, inheritance has been activated so we could remove the <span class="code">cq:listeners</span> node and the step will still function correctly.</p> <img imageRotate="0" src="assets/wf-41.png" /></li> 
   <li><p>You can now add an instance of your step to a workflow model. When you <strong>Configure</strong> the step you will see the dialog:<br /> </p> <img imageRotate="0" src="assets/wf-42.png" /><img imageRotate="0" src="assets/wf-43.png" /></li> 
  </ol> 
  <h4>Sample Markup used in this Example</h4> 
  <p>Markup for a custom step is be represented in the <span class="code">.content.xml</span> of the component root node. The sample <span class="code">.content.xml</span> used for this example:</p> 
  <p style="margin-left: 40px;"><span class="code">/apps/cq/workflow/components/model/myCustomStep/.content.xml</span></p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;jcr:root&amp;nbsp;xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:icon="bell"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:Component"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="My&amp;nbsp;Custom&amp;nbsp;Step"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceSuperType="cq/workflow/components/model/process"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allowedParents="[*/parsys]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;componentGroup="Workflow"/&gt; 
  </codeblock> 
  <p>The <span class="code">_cq_editConfig.xml</span> sample used in this example: </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"&amp;nbsp;xmlns:nt="http://www.jcp.org/jcr/nt/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:disableTargeting="{Boolean}true"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:inherit="{Boolean}true"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:formParameters!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="My&amp;nbsp;Custom&amp;nbsp;Step&amp;nbsp;Card"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SAMPLE_PROPERY="sample&amp;nbsp;value"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:listeners!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditListenersConfig"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterdelete="CQ.workflow.flow.Step.afterDelete"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afteredit="CQ.workflow.flow.Step.afterEdit"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterinsert="CQ.workflow.flow.Step.afterInsert"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterMove="REFRESH_PAGE"/&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <p>The <span class="code">_cq_dialog/.content.xml</span> sample used in this example: </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;jcr:root&amp;nbsp;xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"&amp;nbsp;xmlns:nt="http://www.jcp.org/jcr/nt/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="My&amp;nbsp;Custom&amp;nbsp;-&amp;nbsp;Step&amp;nbsp;Properties"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="cq/gui/components/authoring/dialog"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;content!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/tabs"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;items&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;common!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:hideOnEdit="true"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="Common"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/fixedcolumns"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;process!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:hideOnEdit="true"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="Process"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/fixedcolumns"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;mycommon!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="Common"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/fixedcolumns"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;items&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;columns!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/container"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;items&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;title!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/form/textfield"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fieldLabel="Title"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="./jcr:title"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;description!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/form/textarea"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fieldLabel="Description"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="./jcr:description"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/items&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/columns&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/items&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/mycommon&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;advanced!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:title="Advanced"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/fixedcolumns"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;items&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;columns!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/container"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;items&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;email!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sling:resourceType="granite/ui/components/coral/foundation/form/checkbox"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fieldDescription="Notify&amp;nbsp;user&amp;nbsp;via&amp;nbsp;email."!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fieldLabel="Email"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="./metaData/PROCESS_AUTO_ADVANCE"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text="Notify&amp;nbsp;user&amp;nbsp;via&amp;nbsp;email."!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value="true"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/items&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/columns&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/items&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/advanced&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/items&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/content&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <note> 
   <p>Notice the common and process nodes in the dialog definition. These are inherited from the process step we used as supertype for our custom step:</p> 
   <p style="margin-left: 40px;"><span class="code">sling:resourceSuperType : cq/workflow/components/model/process</span></p> 
  </note> 
  <note> 
   <p>Classic UI model editor dialogs will still work with the standard, touch-enabled UI editor.</p> 
   <p>Though AEM has a <a href="../../../sites/developing/using/dialog-conversion.md">dialog conversion</a> tool if you want to upgrade your classic UI step dialogs to standard UI dialogs. After conversion there are still some manual improvements that could be done to the dialog for certain cases.<br /> </p> 
   <ul> 
    <li>In cases where an upgraded dialog is empty you can look at dialogs in <span class="code">/libs</span> that have similar functionality as examples of how to provide a solution. For example: 
     <ul> 
      <li><span class="code">/libs/cq/workflow/components/model</span></li> 
      <li><span class="code">/libs/cq/workflow/components/workflow</span></li> 
      <li><span class="code">/libs/dam/components</span></li> 
      <li><span class="code">/libs/wcm/workflow/components/autoassign</span></li> 
      <li><span class="code">/libs/cq/projects</span></li> 
     </ul> You must not modify anything in <span class="code">/libs</span>, simply use them as examples. If you want to leverage any of the existing steps, copy them to <span class="code">/apps</span> and modify them there.</li> 
   </ul> 
  </note> 
  <draft-comment type="draft"> 
   <h2>Example: Create a Logger Workflow Step</h2> 
  </draft-comment> 
  <draft-comment color="green" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-09T04:08:21.357-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
   <p>either</p> 
   <ul> 
    <li>needs a (major?) review</li> 
   </ul> 
   <p>or</p> 
   <ul> 
    <li>remove completely as there's a new example above (preferred option)<br /> </li> 
   </ul> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>The following procedures create an example workflow step that sends workflow-related information to the AEM log. Generally, the quickest way to create a custom step component is to create a copy of the <strong>No Operation</strong> step component. The <strong>No Operation</strong> step component includes the nodes that define the edit dialog, process arguments, and parameters for using the process with forms. After copying the component you need to change several title and description properties that appear in the UI, and specify the class that implements the step behavior.</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <h3>Creating the step component</h3> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>Create a custom step component that enables model creators to set two process arguments. Copy the <strong>No Operation</strong> component to your application and modify node properties.</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <ol> 
    <li><p>Use CRXDE Lite to create a folder named <span class="code">mycompany</span> below the <span class="code">/content/apps</span> folder. Continue to create the folders of the following path:</p>  </li> 
    <li><p>Copy the noopprocess at <span class="code">/libs/cq/workflow/components/workflow/noopprocess</span> to the <span class="code">/apps/mycompany/components/workflow </span>folder. Change the name of the node to <span class="code">loggerprocess</span>.</p> </li> 
    <li><p>Change following properties of the <span class="code">/apps/mycompany/components/workflow/loggerproces</span>s node:</p> 
     <ul> 
      <li><span class="code">jcr:title</span>: <span class="code">Logger</span></li> 
      <li><span class="code">jcr:description</span>: Writes workflow information to the log file.</li> 
     </ul> <p>These properties identify the component step in the Sidekick of the Models editor.</p> </li> 
    <li><p>Select the <span class="code">loggerprocess/cq:editConfig/cq:formParameters</span> node and change the following property values:</p> 
     <ul> 
      <li><span class="code">jcr:title</span>: <span class="code">Logger Process</span></li> 
      <li><span class="code">jcr:description</span>: Logs workflow values to the log.</li> 
      <li><span class="code">PROCESS</span>: <span class="code">com.adobe.example.workflow.impl.process.LoggerProcess</span></li> 
     </ul> <p>These properties identify the workflow component and implementation when using it with a form.</p> </li> 
    <li><p>Select the <span class="code">loggerprocess/dialog</span> node and change the value of the title property to <span class="code">Logger Process - Step Properties</span>.</p> <p>The dialog node defines the edit dialog of the component.</p> </li> 
    <li><p>Select the <span class="code">loggerprocess/dialog/items/tabs/items/processargs</span> node and change the value of the path property to:</p>  <p>The widgets that are defined below the <span class="code">loggerprocess/processargs</span> node appear in the dialog.</p> </li> 
    <li><p>To add argument widgets to the component, add two nodes of type <span class="code">cq:Widget</span> below the <span class="code">/apps/mycompany/components/workflow/loggerprocess/processargs/items/arguments/items</span> node. Use the following node names:</p> 
     <ul> 
      <li><span class="code">singlearg</span></li> 
      <li><span class="code">multiarg</span></li> 
     </ul> </li> 
    <li><p>Add the following properites to the <span class="code">singlearg</span> node:</p> 
     <draft-comment color="green" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-01T03:58:47.132-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
      <p>needs a review</p> 
     </draft-comment> 
     <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
      <tbody> 
       <tr> 
        <th>Name</th> 
        <th>Type</th> 
        <th>Value</th> 
       </tr> 
       <tr> 
        <td><span class="code">name</span></td> 
        <td><span class="code">String</span></td> 
        <td><span class="code">./metaData/argSingle</span></td> 
       </tr> 
       <tr> 
        <td><span class="code">fieldLabel</span></td> 
        <td><span class="code">String</span></td> 
        <td>Single Argument</td> 
       </tr> 
      </tbody> 
     </table> 
     <draft-comment color="yellow" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-05T04:19:12.870-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
      <p>orig below</p> 
     </draft-comment> 
     <draft-comment type="draft"> 
      <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
       <tbody> 
        <tr> 
         <th>Name</th> 
         <th>Type</th> 
         <th>Value</th> 
        </tr> 
        <tr> 
         <td><span class="code">xtype</span></td> 
         <td><span class="code">String</span></td> 
         <td><span class="code">textfield</span></td> 
        </tr> 
        <tr> 
         <td><span class="code">name</span></td> 
         <td><span class="code">String</span></td> 
         <td><span class="code">./metaData/argSingle</span></td> 
        </tr> 
        <tr> 
         <td><span class="code">fieldLabel</span></td> 
         <td><span class="code">String</span></td> 
         <td>Single Argument</td> 
        </tr> 
       </tbody> 
      </table> 
     </draft-comment></li> 
    <li><p>Add the following properites to the <span class="code">multiarg</span> node:</p> 
     <draft-comment color="green" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-01T04:00:02.659-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
      <p>needs a review</p> 
     </draft-comment> 
     <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
      <tbody> 
       <tr> 
        <th>Name</th> 
        <th>Type</th> 
        <th>Value</th> 
       </tr> 
       <tr> 
        <td><span class="code">name</span></td> 
        <td><span class="code">String</span></td> 
        <td>./metaData/argMulti</td> 
       </tr> 
       <tr> 
        <td><span class="code">fieldLabel</span></td> 
        <td><span class="code">String</span></td> 
        <td>Multi Arg</td> 
       </tr> 
      </tbody> 
     </table> 
     <draft-comment color="yellow" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-05T04:19:28.880-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
      <p>orig below</p> 
     </draft-comment> 
     <draft-comment type="draft"> 
      <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
       <tbody> 
        <tr> 
         <th>Name</th> 
         <th>Type</th> 
         <th>Value</th> 
        </tr> 
        <tr> 
         <td><span class="code">xtype</span></td> 
         <td><span class="code">String</span></td> 
         <td><span class="code">multifield</span></td> 
        </tr> 
        <tr> 
         <td><span class="code">name</span></td> 
         <td><span class="code">String</span></td> 
         <td>./metaData/argMulti</td> 
        </tr> 
        <tr> 
         <td><span class="code">fieldLabel</span></td> 
         <td><span class="code">String</span></td> 
         <td>Multi Arg</td> 
        </tr> 
       </tbody> 
      </table> 
     </draft-comment></li> 
   </ol> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>The <strong>Logger Process</strong> component is added to the Sidekick of the Model editor. The edit dialog of the <strong>Logger Process</strong> step component contains the fields defined by the <span class="code">singlearg</span> and <span class="code">multiarg</span> nodes.</p> 
  </draft-comment> 
  <draft-comment color="yellow" lastModifiedBy="aheimoz" lastModifiedDate="2018-03-05T04:19:44.450-0500" prevFirstName="Alison" prevLastName="Heimoz" type="remark"> 
   <p>orig text and image below</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>The <strong>Logger Process</strong> component is added to the Sidekick of the Model editor.</p> 
   <p>The edit dialog of the <strong>Logger Process</strong> step component contains the widgets that the <span class="code">singlearg</span> and <span class="code">multiarg</span> nodes define:</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <img imageRotate="0" src="assets/screen_shot_2012-02-01at20808pm.png" /> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <h3>Creating the step implementation</h3> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>Create the <span class="code">com.adobe.example.workflow.impl.process.LoggerProcess</span> implementation. This is the class that you specified for the <span class="code">PROCESS</span> property of the <span class="code">loggerprocess/cq:editConfig/cq:formParameters</span> node.</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <note type="note"> 
    <p>Create a Maven project using the <a href="../../../sites/developing/using/ht-projects-maven.md">multimodule-content-package-archetype archetype</a>. To install the content package, use the command:</p> 
    <p><span class="code">mvn clean install -P autoInstallPackage</span></p> 
    <p>See <a href="#definingaprocessstepwithajavaclass">Defining a Process Step with a Java Class</a> for details about creating a Java based process step.</p> 
   </note> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <codeblock gutter="true" class="syntax java">
     package&amp;nbsp;com.adobe.example.workflow.impl.process;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowException;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.WorkflowSession;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkItem;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.exec.WorkflowProcess;!!discoiqbr!!import&amp;nbsp;com.adobe.granite.workflow.metadata.MetaDataMap;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Component;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Property;!!discoiqbr!!import&amp;nbsp;org.apache.felix.scr.annotations.Service;!!discoiqbr!!!!discoiqbr!!import&amp;nbsp;org.osgi.framework.Constants;!!discoiqbr!!import&amp;nbsp;org.slf4j.Logger;!!discoiqbr!!import&amp;nbsp;org.slf4j.LoggerFactory;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.util.Arrays;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!/**!!discoiqbr!!&amp;nbsp;*&amp;nbsp;Sample&amp;nbsp;workflow&amp;nbsp;process&amp;nbsp;that&amp;nbsp;logs&amp;nbsp;arguments&amp;nbsp;into&amp;nbsp;the&amp;nbsp;logfile.!!discoiqbr!!&amp;nbsp;*/!!discoiqbr!!@Component!!discoiqbr!!@Service!!discoiqbr!!!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;LoggerProcess&amp;nbsp;implements&amp;nbsp;WorkflowProcess&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Logger&amp;nbsp;process&amp;nbsp;implementation.")!!discoiqbr!!&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;DESCRIPTION&amp;nbsp;=&amp;nbsp;Constants.SERVICE_DESCRIPTION;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Adobe")!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;VENDOR&amp;nbsp;=&amp;nbsp;Constants.SERVICE_VENDOR;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Property(value&amp;nbsp;=&amp;nbsp;"Logger&amp;nbsp;Process")!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;LABEL="process.label";!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;log&amp;nbsp;=&amp;nbsp;LoggerFactory.getLogger(LoggerProcess.class);!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(WorkItem&amp;nbsp;item,&amp;nbsp;WorkflowSession&amp;nbsp;session,&amp;nbsp;MetaDataMap&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;WorkflowException&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;singleValue&amp;nbsp;=&amp;nbsp;args.get("argSingle",&amp;nbsp;"not&amp;nbsp;set");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String[]&amp;nbsp;multiValue&amp;nbsp;=&amp;nbsp;args.get("argMulti",&amp;nbsp;new&amp;nbsp;String[]{"not&amp;nbsp;set"});!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("--&amp;nbsp;Workflow&amp;nbsp;Paramter&amp;nbsp;-&amp;nbsp;Single&amp;nbsp;Value:&amp;nbsp;{}",&amp;nbsp;singleValue);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info("--&amp;nbsp;Workflow&amp;nbsp;Paramter&amp;nbsp;-&amp;nbsp;Multi&amp;nbsp;Value:&amp;nbsp;{}",&amp;nbsp;Arrays.toString(multiValue));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
   </codeblock> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <h3>LoggerProcess Maven Dependencies</h3> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>When you create a Maven project using the <a href="../../../sites/developing/using/ht-projects-maven.md"><span class="code">multimodule-content-package-archetype</span> archetype</a>, to support the <span class="code">LoggerProcess</span> class you need to add the following dependencies to the <span class="code">pom.xml</span> files.</p> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <note type="caution"> 
    <p>The following is an example only, please check the versions required for your instance before using. You can do this using the Web Console; for example:</p> 
    <p><span class="code">http://localhost:4502/system/console/depfinder</span></p> 
   </note> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <ul> 
    <li> 
     <codeblock class="syntax xml">
       &lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&lt;groupId&gt;com.adobe.granite&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&lt;artifactId&gt;com.adobe.granite.workflow.api&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&lt;version&gt;1.0.0&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&lt;scope&gt;provided&lt;/scope&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&lt;artifactId&gt;org.apache.sling.jcr.jcr-wrapper&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&lt;version&gt;2.0.0&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&lt;scope&gt;provided&lt;/scope&gt;!!discoiqbr!!&lt;/dependency&gt; 
     </codeblock></li> 
    <li><p>In addition, ensure that the dependency for the <span class="code">slf4j-ap</span>i artifact is correct.</p> </li> 
   </ul> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p><br /> </p> 
  </draft-comment> 
 </body> 
</html>