<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="9c315105-cb84-4ebd-96d4-9011389e1a91" name="jcr:uuid" /> 
  <meta content="2018-05-08T12:41:40.587-0400" name="cq:lastModified" /> 
  <meta content="ContextHub Javascript API Reference" name="navTitle" /> 
  <meta content="ContextHub Javascript API Reference" name="jcr:title" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="ContextHub Javascript API Reference" name="seoTitle" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/contexthub-api.html" name="publishExternalURL" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="2018-05-08T12:41:40.586-0400" name="locHandOffDate" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="6894da5b-fdb0-43f6-b06c-b4eb1d68c828" name="jcr:predecessors" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2018-01-18T11:19:33.234-0500" name="lastPublishExternalDate" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="2018-01-19T19:04:44.330-0500" name="jcr:created" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="2018-01-18T11:19:33.234-0500" name="publishExternalDate" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="2018-01-18T11:19:33.234-0500" name="topicBrowsingSortDate" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:personalization;content_type:reference" name="cq:tags" /> 
  <meta content="2018-04-03T09:00:18.011-0400" name="cq:lastReplicated" /> 
  <meta content="/content/docs/en/aem/6-3/develop/personalization/contexthub/contexthub-api" name="qaNotes" /> 
  <meta content="2017-10-31T16:17:10.884-0400" name="firstPublishExternalDate" /> 
  <meta content="The ContextHub Javascript API is available to your scripts when the ContextHub component has been added to the page" name="seoDescription" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/personalization;/content/help/en/experience-manager/6-4/sites/developing/morehelp/personalization" name="moreHelpPaths" /> 
 </head> 
 <body> 
  <p>The ContextHub Javascript API is available to your scripts when the <a href="../../../sites/developing/using/ch-adding.md#main-pars-title">ContextHub component has been added to the page</a>.</p> 
  <h2>ContextHub Constants</h2> 
  <p>Constant values that the ContextHub Javascript API defines.</p> 
  <h3>Event Constants</h3> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:37.036-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/constants/ContextHub.constants.js</p> 
  </draft-comment> 
  <p>The following table lists the names events that occur for ContextHub Stores. See also <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">ContextHub.Utils.Eventing</a>.</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th>Constant</th> 
     <th>Description</th> 
     <th>Value</th> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_NAMESPACE</td> 
     <td>ContextHub's event namespace</td> 
     <td>ch</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_ALL_STORES_READY</td> 
     <td>Indicates that all required stores are registered, initialized and ready to be consumed</td> 
     <td>all-stores-ready</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_STORES_PARTIALLY_READY</td> 
     <td>Indicates that not all stores were initialized within a given timeout</td> 
     <td>stores-partially-ready</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_STORE_REGISTERED</td> 
     <td>Fired when a store is registered</td> 
     <td>store-registered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_STORE_READY</td> 
     <td>Indicates that stores is ready to work. It is triggered immediately after registration, except JSONP stores, where it is fired when data is fetched).</td> 
     <td>store-ready</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_STORE_UPDATED</td> 
     <td>Fired when a store updates its persistence</td> 
     <td>store-updated</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.PERSISTENCE_CONTAINER_NAME</td> 
     <td>Persistence container name</td> 
     <td>ContextHubPersistence</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.SERVICE_RAW_RESPONSE_KEY</td> 
     <td>Stores specific persistence key name where raw JSON result is stored</td> 
     <td>/_/raw-response</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.SERVICE_RESPONSE_TIME_KEY</td> 
     <td>Stores specific timestamp indicating when JSON data was fetched</td> 
     <td>/_/response-time</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.SERVICE_LAST_URL_KEY</td> 
     <td>Stores specific url of JSON service used during last call</td> 
     <td>/_/url</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.IS_CONTAINER_EXPANDED</td> 
     <td>Indicates whether ContextHub's UI is expanded</td> 
     <td>/_/container-expanded</td> 
    </tr> 
   </tbody> 
  </table> 
  <h3>UI Event Constants</h3> 
  <p>The following table lists the names of events that occur for the ContextHub UI.</p> 
  <p> </p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td><strong>Constant</strong></td> 
     <td><strong>Description</strong></td> 
     <td><strong>Value</strong></td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_REGISTERED</td> 
     <td>Fired when a mode is registered</td> 
     <td>ui-mode-registered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_UNREGISTERED</td> 
     <td>Fired when a mode is unregistered</td> 
     <td>ui-mode-unregistered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_RENDERER_REGISTERED</td> 
     <td>Fired when a mode renderer is registered</td> 
     <td>ui-mode-renderer-registered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_RENDERER_UNREGISTERED</td> 
     <td>Fired when a mode renderer is unregistered</td> 
     <td>ui-mode-renderer-unregistered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_ADDED</td> 
     <td>Fired when a new mode is added</td> 
     <td>ui-mode-added</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_REMOVED</td> 
     <td>Fired when a mode is removed</td> 
     <td>ui-mode-removed</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODE_SELECTED</td> 
     <td>Fired when a mode is selected by the user</td> 
     <td>ui-mode-selected</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_REGISTERED</td> 
     <td>Fired when a new module is registered</td> 
     <td>ui-module-registered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_UNREGISTERED</td> 
     <td>Fired when a module is unregistered</td> 
     <td>ui-module-unregistered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_RENDERER_REGISTERED</td> 
     <td>Fired when a module renderer is registered</td> 
     <td>ui-module-renderer-registered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_RENDERER_UNREGISTERED</td> 
     <td>Fired when a module renderer is unregistered</td> 
     <td>ui-module-renderer-unregistered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_ADDED</td> 
     <td>Fired when a new module is added</td> 
     <td>ui-module-added</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_MODULE_REMOVED</td> 
     <td>Fired when a module is removed</td> 
     <td>ui-module-removed</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_CONTAINER_ADDED</td> 
     <td>Fired when the UI container is added to the page</td> 
     <td>ui-container-added</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_CONTAINER_OPENED</td> 
     <td>Fired when the ContextHub UI is opened</td> 
     <td>ui-container-opened</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_CONTAINER_CLOSED</td> 
     <td>Fired when the ContextHub UI is collapsed</td> 
     <td>ui-container-closed</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_PROPERTY_MODIFIED</td> 
     <td>Fired when a property is modified</td> 
     <td>ui-property-modified</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_RENDERED</td> 
     <td>Fired every time the ContextHub UI is rendered (e.g. after a property change)</td> 
     <td>ui-rendered</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.EVENT_UI_INITIALIZED</td> 
     <td>Fired when UI container gets initialized</td> 
     <td>ui-initialized</td> 
    </tr> 
    <tr> 
     <td>ContextHub.Constants.ACTIVE_UI_MODE</td> 
     <td>Indicates active UI mode</td> 
     <td>/_/active-ui-mode</td> 
    </tr> 
   </tbody> 
  </table> 
  <h2>ContextHub Javascript API Reference</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders" lastModifiedDate="2018-01-18T11:19:37.216-0500" type="remark"> 
   <p>/libs/granite/contexthub/code/kernel/core/initialization/ContextHub.js</p> 
  </draft-comment> 
  <p>The ContextHub object provides access to all stores.</p> 
  <h3>Functions (ContextHub)</h3> 
  <h4>getAllStores()</h4> 
  <p>Returns all registered ContextHub stores. </p> 
  <p>This function has no parameters.</p> 
  <p><strong>Returns</strong></p> 
  <p>An object that contains all ContextHub stores. Each store is an object that uses the same name s the store. </p> 
  <p><strong>Example</strong></p> 
  <p>The following example retrieves all stores and then retrieves the geolocation store:</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;allStores&amp;nbsp;=&amp;nbsp;ContextHub.getAllStores();!!discoiqbr!!var&amp;nbsp;geoloc&amp;nbsp;=&amp;nbsp;allStores.geolocation 
  </codeblock> 
  <h4>getStore(name)</h4> 
  <p>Retrieves a store as a Javascript object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> The name with which the store was registered.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An object that represents the store.</p> 
  <p><strong>Example</strong></p> 
  <p>The following example retrieves the geolocation store:</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;geoloc&amp;nbsp;=&amp;nbsp;ContextHub.getStore("geolocation"); 
  </codeblock> 
  <h2>ContextHub.SegmentEngine.Segment</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders" lastModifiedDate="2018-01-18T11:19:37.590-0500" type="remark"> 
   <p>/libs/cq/contexthub/code/kernel/segment-engine/ContextHub.SegmentEngine.Segment.js</p> 
  </draft-comment> 
  <p>Represents a ContextHub segment. Use the ContextHub.SegmentEngine.SegmentManager to obtain segments.</p> 
  <h3>Functions (ContextHub.ContextEngine.Segment)</h3> 
  <h4>getName()</h4> 
  <p>Returns the name of the segment as a String value.</p> 
  <h4>getPath()</h4> 
  <p>Returns the repositoy path of the segment definition as a String value.</p> 
  <h2>ContextHub.SegmentEngine.SegmentManager</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders" lastModifiedDate="2018-01-18T11:19:37.806-0500" type="remark"> 
   <p>/libs/cq/contexthub/code/kernel/segment-engine/ContextHub.SegmentEngine.SegmentManager.js</p> 
  </draft-comment> 
  <p>Provides access to ContextHub segments.</p> 
  <h3>Functions (ContextHub.SegmentEngine.SegmentManager)</h3> 
  <h4>getResolvedSegments()</h4> 
  <p>Returns the segments that are resolved in the current context. This function has no parameters.</p> 
  <p><strong>Returns</strong></p> 
  <p>An array of ContextHub.SegmentEngine.Segment objects.</p> 
  <h2>ContextHub.Store.Core</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:37.975-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/generic-stores/ContextHub.Store.Core.js</p> 
  </draft-comment> 
  <p>The base class for ContextHub stores. </p> 
  <h3>Properties (ContextHub.Store.Core)</h3> 
  <h4>eventing</h4> 
  <p>A <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">ContextHub.Utils.Eventing</a> object. Use this object for binding functions to store events. For information about the default value and initialization, see <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-16">init(name,config)</a>.</p> 
  <h4>name</h4> 
  <p>The name of the store. </p> 
  <h4>persistence</h4> 
  <p>A ContextHub.Utils.Persistence object. For information about the default value and initialization, see <span class="code"><a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-16">init(name,config)</a>.</span></p> 
  <h3>Functions (ContextHub.Store.Core)</h3> 
  <h4>addAllItems(tree, options)</h4> 
  <p>Merges a data object or an array with the store data. Each key/value pair in the object or array is added to the store (via the <span class="code">setItem</span> function):</p> 
  <ul> 
   <li><strong>Object:</strong> Keys are the property names.</li> 
   <li><strong>Array:</strong> Keys are the array indices.</li> 
  </ul> 
  <p>Note that values can be objects.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>tree:</strong> (Object or array) The data to add to the store.</li> 
   <li><strong>options:</strong> (Object) An optional object of options that is passed to the setItem function. For information, see the <span class="code">options</span> parameter of <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-24">setItem(key,value,options)</a>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value:</p> 
  <ul> 
   <li>A value of <span class="code">true</span> indicates the data object was stored.</li> 
   <li>A value of <span class="code">false</span> indicates that the data store is unchanged.</li> 
  </ul> 
  <h4>addReference(key, anotherKey)</h4> 
  <draft-comment color="yellow" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:38.276-0500" type="remark"> 
   <p>what is the use case for this?</p> 
  </draft-comment> 
  <p>Creates a reference from one key to another key. A key cannot reference itself.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> The key that references <span class="code">anotherKey</span>.</li> 
   <li><strong>anotherkey:</strong> They key that is referenced by <span class="code">key</span>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value:</p> 
  <ul> 
   <li>A value of <span class="code">true</span> indicates that the reference was added.</li> 
   <li>A value of <span class="code">false</span> indicates that no reference was added.</li> 
  </ul> 
  <h4>announceReadiness()</h4> 
  <p>Triggers the <span class="code">ready</span> event for this store. This function has no parameters and returns no value.</p> 
  <h4>clean()</h4> 
  <p>Removes all data from the store. The function has no parameters and no return value.</p> 
  <h4>getItem(key)</h4> 
  <p>Returns the value that is associated with a key.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> (String) The key for which to return the value.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An Object that represents the value for the key.</p> 
  <h4>getKeys(includeInternals)</h4> 
  <draft-comment color="yellow" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:38.534-0500" type="remark"> 
   <p>Is there a use case where customers need to know about internals? If not, remove the paramter and don't mention it.</p> 
  </draft-comment> 
  <p>Retrieves the keys from the store. Optionally you can retrieve the keys that are used internally by the ContextHub framework.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>includeInternals:</strong> A value of <span class="code">true</span> includes internally-used keys in the results. These keys begin with the underscore ("_") character. The default value is <span class="code">false</span>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An array of key names (<span class="code">string</span> values).</p> 
  <h4>getReferences()</h4> 
  <p>Retrieves the references from the store.</p> 
  <p><strong>Returns</strong></p> 
  <p>An array that uses referencing keys as indices for the referenced keys:</p> 
  <ul> 
   <li>Referencing keys correspond with the <span class="code">key</span> parameter of the <span class="code">addReference</span> function.</li> 
   <li>Referenced keys correspond with the <span class="code">anotherKey</span> parameter of the <span class="code">addReference</span> function.</li> 
  </ul> 
  <h4>getTree(includeInternals)</h4> 
  <p>Retrieves the data tree from the store. Optionally you can include the key/value pairs that are use internally by the ContextHub framework.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><span class="code">includeInternals:</span> A value of <span class="code">true</span> includes internally-used key/value pairs in the results. The keys of this data begin with the underscore ("_") character. The default value is <span class="code">false</span>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An object that represents the data tree. The keys are the property names of the object.</p> 
  <h4>init(name, config)</h4> 
  <draft-comment color="yellow" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:38.757-0500" type="remark"> 
   <p>need to explain that extensions of this class can override the init.</p> 
   <p>Explain about the config.initialValues that can be used in extensions if needed. (see the reset function)</p> 
  </draft-comment> 
  <p>Initializes the store.</p> 
  <ul> 
   <li>Sets the store data to an empty object. </li> 
   <li>Sets the store references to an empty object.</li> 
   <li>The eventChannel is data:<i>name</i>, where <i>name</i> is the store name. </li> 
   <li>The storeDataKey is /store/<i>name</i>, where <i>name</i> is the store name.</li> 
  </ul> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> The name of the store.</li> 
   <li><strong>config:</strong> An object that contains configuration properties: 
    <ul> 
     <li>eventDeferring: Default value is 32.</li> 
     <li>eventing: The <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">ContextHub.Utils.Eventing</a> object for this store. The default value is the ContextHub.eventing object uses.</li> 
     <li>persistence: The ContextHub.Utils.Persistence object for this store. The default value is the ContextHub.persistence object.</li> 
    </ul> </li> 
  </ul> 
  <h4>isEventingPaused()</h4> 
  <p>Determines whether eventing is paused for this store.</p> 
  <p><strong>Returns</strong></p> 
  <p>A boolean value:</p> 
  <ul> 
   <li><span class="code">true</span>: Eventing is paused so that no events are triggered for this store.</li> 
   <li><span class="code">false</span>: Eventing is not paused so that events are triggered for this store.</li> 
  </ul> 
  <h4>pauseEventing()</h4> 
  <p>Pauses eventing for the store so that no events are triggered. This function requires no parameters and returns no value.</p> 
  <h4>removeItem(key, options)</h4> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">Removes a key/value pair from the store. </p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">When a key is removed, the function triggers the <span class="code">data</span> event. The event data includes the store name, the name of the key that was removed, the value that was removed, new value for the key (null), and the action type of "remove".</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">Optionally, you can prevent the triggering of the <span class="code">data</span> event.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> (String) The name of the key to remove.</li> 
   <li><strong>options:</strong> (Object) An object of options. The following object properties are valid: 
    <ul> 
     <li>silent: A value of <span class="code">true</span> prevents the triggering of the <span class="code">data</span> event. The default value is <span class="code">false</span>.</li> 
    </ul> </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value:</p> 
  <ul> 
   <li>A value of <span class="code">true</span> indicates the key/value pair was removed.</li> 
   <li>A value of <span class="code">false</span> indicates that the data store is unchanged because the key was not found in the store.</li> 
  </ul> 
  <h4>removeReference(key)</h4> 
  <p>Removes a reference from the store.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> The key reference to remove. This parameter corresponds with the <span class="code">key</span> parameter of the <span class="code">addReference</span> function.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value:</p> 
  <ul> 
   <li>A value of <span class="code">true</span> indicates the reference was removed.</li> 
   <li>A value of <span class="code">false</span> indicates that the key was not valid and the store is unchanged.</li> 
  </ul> 
  <h4>reset(keepRemainingData)</h4> 
  <p>Resets the initial values of the store's persisted data. Optionally, you can remove all other data from the store. Eventing is paused for this store while the store is reset. This function returns no value.</p> 
  <p>Initial values are provided in the initialValues property of the config object that is used to instantiate the store object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>keepRemainingData:</strong> (Boolean) A value of true causes non-initial data to be persisted. A value of false causes all data to be removed except for the initial values.</li> 
  </ul> 
  <p>Resets the initial values of the store's persisted data. Optionally, you can remove all other data from the store. Eventing is paused for this store while the store is reset. This function returns no value.</p> 
  <p>Initial values are provided in the initialValues property of the config object that is used to instantiate the store object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li>keepRemainingData: (Boolean) A value of true causes non-initial data to be persisted. A value of false causes all data to be removed except for the initial values.</li> 
  </ul> 
  <h4>resolveReference(key, retry)</h4> 
  <draft-comment color="yellow" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:39.065-0500" type="remark"> 
   <p>I don't really undestand the iterations part. What is it doing?</p> 
  </draft-comment> 
  <p>Retrieves a referenced key. Optionally, you can specify the number of iterations to use for resolving the best match.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> (String) The key for which to resolve the reference. This <span class="code">key</span> parameter corresponds with the <span class="code">key</span> parameter of the <span class="code">addReference</span> function.</li> 
   <li><strong>retry:</strong> (Number) The number of iterations to use.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">string</span> value that represents the referenced key. If no reference is resolved, the value of the <span class="code">key</span> parameter is returned.</p> 
  <h4>resumeEventing()</h4> 
  <p>Resumes eventing for this store so that events are triggered. This function defines no parameters and returns no value.</p> 
  <h4>setItem(key, value, options)</h4> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">Adds a key/value pair to the store.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">Triggers the <span class="code">data</span> event only if the value for the key is different than the value that is currently stored for the key. You can optionally prevent the triggering of the <span class="code">data</span> event.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">The event data includes the store name, the key, the previous value, the new value, and the action type of <span class="code">set</span>.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Parameters</strong></p> 
  <ul style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"> 
   <li><strong>key:</strong> (String) The name of the key.</li> 
   <li><strong>options:</strong> (Object) An object of options. The following object properties are valid: 
    <ul> 
     <li>silent: A value of <span class="code">true</span> prevents the triggering of the <span class="code">data</span> event. The default value is <span class="code">false</span>.</li> 
    </ul> </li> 
   <li><strong>value:</strong> (Object) The value to associate with the key.</li> 
  </ul> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value:</p> 
  <ul> 
   <li>A value of <span class="code">true</span> indicates the data object was stored.</li> 
   <li>A value of <span class="code">false</span> indicates that the data store is unchanged.</li> 
  </ul> 
  <h2>ContextHub.Store.JSONPStore</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:39.215-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/generic-stores/ContextHub.Store.JSONPStore.js</p> 
  </draft-comment> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">A store that contains JSON data. The data is retrieved from an external JSONP service, or optionally from a service that returns JSON data. Specify the service details using the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-30"><span class="code">init</span></a> function when you create an instance of this class.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">The store uses in-memory persistance (Javascript variable). Store data is available only during the lifetime of the page.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">ContextHub.Store.JSONPStore extends <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title">ContextHub.Store.Core</a> and inherits the functions of that class.</p> 
  <h3>Functions (ContextHub.Store.JSONPStore)</h3> 
  <h4>configureService(serviceConfig, override)</h4> 
  <p>Configures the details for connecting to the JSONP service that this object uses. You can either update or replace the existing configuration. The function returns no value.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>serviceConfig:</strong> An object that contains the following properties: 
    <ul> 
     <li>host: (String) The server name or IP address.</li> 
     <li>jsonp: (Boolean) A value of true indicates that the service is a JSONP service, false otherwise. When true, the {callback: "ContextHub.Callbacks.<i>Object.name</i>} object is added to the service.params object.</li> 
     <li>params: (Object) URL parameters represented as object properties. Parameter names are property names and parameter values are property values. </li> 
     <li>path: (String) The path to the service.</li> 
     <li>port: (Number) The port number of the service.</li> 
     <li>secure: (String or Boolean) Determines the protocol to use for the service URL: 
      <ul> 
       <li>auto: //</li> 
       <li>true: https://</li> 
       <li>false: http://</li> 
      </ul> </li> 
    </ul> </li> 
   <li><strong>override:</strong> (Boolean). A value of <span class="code">true</span> causes the existing service configuration to be replaced by the properties of <span class="code">serviceConfig</span>. A value of <span class="code">false</span> causes the existing service configuration properties to be merged with the properties of <span class="code">serviceConfig</span>.</li> 
  </ul> 
  <h4>getRawResponse()</h4> 
  <p>Returns the raw response that is cached since the last call to the JSONP service. The function requires no parameters.</p> 
  <p><strong>Returns</strong></p> 
  <p>An object that represents the raw response.</p> 
  <h4>getServiceDetails()</h4> 
  <p>Retrieves the service object for this ContextHub.Store.JSONPStore object. The service object contains all of the information required to create the service URL.</p> 
  <p><strong>Returns</strong></p> 
  <p>An object with the following properties:</p> 
  <ul> 
   <li><strong>host:</strong> (String) The server name or IP address.</li> 
   <li><strong>jsonp:</strong> (Boolean) A value of true indicates that the service is a JSONP service, false otherwise. When true, the {callback: "ContextHub.Callbacks.<i>Object.name</i>} object is added to the service.params object.</li> 
   <li><strong>params:</strong> (Object) URL parameters represented as object properties. Parameter names are property names and parameter values are property values. </li> 
   <li><strong>path:</strong> (String) The path to the service.</li> 
   <li><strong>port:</strong> (Number) The port number of the service.</li> 
   <li><strong>secure:</strong> (String or Boolean) Determines the protocol to use for the service URL: 
    <ul> 
     <li>auto: //</li> 
     <li>true: https://</li> 
     <li>false: http://</li> 
    </ul> </li> 
  </ul> 
  <div> 
  </div> 
  <h4>getServiceURL(resolve)</h4> 
  <p>Retrieves the URL of the JSONP service.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>resolve:</strong> (Boolean) Determines whether to include resolved parameters in the URL. A value of <span class="code">true</span> resolves parameters, and <span class="code">false</span> does not.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">string</span> value that represents the service URL.</p> 
  <h4>init(name, config)</h4> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">initializes the ContextHub.Store.JSONPStore object. </p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> (String) The name of the store.</li> 
   <li><strong>config:</strong> (Object) An object that contains the service property. The JSONPStore object uses the properties of the <span class="code">service</span> object to construct the URL of the JSONP service: 
    <ul> 
     <li>eventDeferring: 32.</li> 
     <li>eventing: The ContextHub.Utils.Eventing object for this store. The default value is the <span class="code">ContextHub.eventing</span> object.</li> 
     <li>persistence: The ContextHub.Utils.Persistence object for this store. By default, memory persistence is used (Javascript object).</li> 
     <li>service: (Object) 
      <ul> 
       <li>host: (String) The server name or IP address.</li> 
       <li>jsonp: (Boolean) A value of true indicates that the service is a JSONP service, false otherwise. When true, the <span class="code">{callback: "ContextHub.Callbacks.<i>Object.name</i>} </span>object is added to <span class="code">service.params</span>.</li> 
       <li>params: (Object) URL parameters represented as object properties. Parameter names and values are the object property names and values, respectively. </li> 
       <li>path: (String) The path to the service.</li> 
       <li>port: (Number) The port number of the service.</li> 
       <li>secure: (String or Boolean) Determines the protocol to use for the service URL: 
        <ul> 
         <li>auto: //</li> 
         <li>true: https://</li> 
         <li>false: http://</li> 
        </ul> </li> 
       <li>timeout: (Number) The amount of time to wait for the JSONP service to respond before timing out, in milliseconds.</li> 
       <li>ttl: The minimum amount of time in milliseconds that passes between calls to the JSONP service. (See the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-31">queryService</a> function).</li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
  <h4>queryService(reload)</h4> 
  <p>Queries the remote JSONP service and caches the response. If the amount of time since the previous call to this function is less than the value of <span class="code">config.service.ttl</span>, the service is not called and the cached response is not changed. Optionally, you can force the service to be called. The <span class="code">config.service.ttl </span>property is set when calling the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-30">init</a> function to initialize the store.</p> 
  <p>Triggers the ready event when the query is finished. If the JSONP service URL is not set, the function does nothing.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>reload:</strong> (Boolean) A value of true removes the cached response and forces the JSONP service to be called.</li> 
  </ul> 
  <h4>reset</h4> 
  <p>Resets the initial values of the store's persisted data and then calls the JSONP service. Optionally, you can remove all other data from the store. Eventing is paused for this store while the initial values are reset. This function returns no value.</p> 
  <p>Initial values are provided in the initialValues property of the config object that is used to instantiate the store object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>keepRemainingData:</strong> (Boolean) A value of true causes non-initial data to be persisted. A value of false causes all data to be removed except for the initial values.</li> 
  </ul> 
  <h4>resolveParameter(f)</h4> 
  <p>Resolves the given parameter.</p> 
  <h2>ContextHub.Store.PersistedJSONPStore</h2> 
  <p>ContextHub.Store.PersistedJSONPStore extends <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-0">ContextHub.Store.JSONPStore</a> so it inherits all of the functions of that class. However, the data that is retrieved from the JSONP service is persisted according to the configuration of ContextHub persistence. (See <a href="../../../sites/developing/using/ch-adding.md#main-pars-title-1163491688">Persistence Modes</a>.)</p> 
  <h2>ContextHub.Store.PersistedStore</h2> 
  <p>ContextHub.Store.PersistedStore extends <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title">ContextHub.Store.Core</a> so it inherits all of the functions of that class. The data in this store is persisted according to the configuration of ContextHub persistence.</p> 
  <h2>ContextHub.Store.SessionStore</h2> 
  <p>ContextHub.Store.SessionStore extends <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title">ContextHub.Store.Core</a> so it inherits all of the functions of that class. The data in this store is persisted using in-memory persistance (Javascript object).</p> 
  <h2>ContextHub.UI</h2> 
  <p>Manages UI modules and UI module renderers.</p> 
  <h3>Functions (ContextHub.UI)</h3> 
  <h4>registerRenderer(moduleType, renderer, dontRender)</h4> 
  <p>Registers a UI module renderer with ContextHub. After the renderer is registered, it can be used to <a href="../../../sites/administering/using/contexthub-config.md#main-pars-title-2108758587">create UI modules</a>. Use this function when you are <a href="../../../sites/developing/using/ch-extend.md#main-pars-title-2121301991">extending ContextHub.UI.BaseModuleRenderer</a> to create a custom UI Module renderer.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>moduleType:</strong> (String) The identifier for the UI module renderer. If a renderer is already registered using the specified value, the existing renderer is unregistered before this renderer is registered. </li> 
   <li><strong>renderer:</strong> (String) The name of the class that renders the UI module. </li> 
   <li><strong>dontRender:</strong> (Boolean) Set to <span class="code">true</span> to prevent the ContextHub UI from being rendered after the renderer is registered. The default value is <span class="code">false</span>.</li> 
  </ul> 
  <p><strong>Example</strong></p> 
  <p>The following example registers a renderer as the contexthub.browserinfo module type. </p> 
  <codeblock class="syntax js">
    ContextHub.UI.registerRenderer('contexthub.browserinfo',&amp;nbsp;new&amp;nbsp;SurferinfoRenderer()); 
  </codeblock> 
  <h2>ContextHub.Utils.Cookie</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:39.922-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/utils/ContextHub.Utils.cookie.js</p> 
  </draft-comment> 
  <p>A utility class for interacting with cookies.</p> 
  <h3>Functions (ContextHub.Utils.Cookie)</h3> 
  <h4>exists(key)</h4> 
  <p>Determines whether a cookie exists.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> A <span class="code">String</span> that contains the key of the cookie for which you are testing.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A <span class="code">boolean</span> value of true indicates that the cookie exists.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    if&amp;nbsp;(ContextHub.Utils.Cookie.exists("name"))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;conditionally-executed&amp;nbsp;code!!discoiqbr!!} 
  </codeblock> 
  <h4>getAllItems(filter)</h4> 
  <p>Returns all cookies that have keys that match a filter.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li>(Optional) <strong>filter:</strong> Criteria for matching cookie keys. To return all cookies, specify no value. The following types are supported: 
    <ul> 
     <li>String: The string is compared to the cookie key.</li> 
     <li>Array: Each item in the array is a filter.</li> 
     <li>A RegExp object: The test function of the object is used to match cookie keys. </li> 
     <li>A function: A function that tests a cookie key for a match. The function must take the cookie key as a paramter and return true if the test confirms a match.</li> 
    </ul> </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An object of cookies. Object properties are cookie keys and key values are cookie values.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.Cookie.getAllItems([/^cq-authoring/,&amp;nbsp;/^cq-editor/]) 
  </codeblock> 
  <h4>getItem(key)</h4> 
  <p>Returns a cookie value.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> The key of the cookie for which you want the value.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>The cookie value, or <span class="code">null</span> if no cookie was found for the key.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.Cookie.getItem("name"); 
  </codeblock> 
  <h4>getKeys(filter)</h4> 
  <p>Returns an array of the keys of existing cookies that match a filter.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>filter:</strong> Criteria for matching cookie keys. The following types are supported: 
    <ul> 
     <li>String: The string is compared to the cookie key.</li> 
     <li>Array: Each item in the array is a filter.</li> 
     <li>A RegExp object: The test function of the object is used to match cookie keys. </li> 
     <li>A function: A function that tests a cookie key for a match. The function must take the cookie key as a paramter and return <span class="code">true</span> if the test confirms a match.</li> 
    </ul> </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An array of strings where each string is the key of a cookie that matches the filter.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.Cookie.getKeys([/^cq-authoring/,&amp;nbsp;/^cq-editor/]) 
  </codeblock> 
  <h4>removeItem(key, options)</h4> 
  <p>Removes a cookie. To remove the cookie, the value is set to an emtpy string and the expiry date is set to the day before the current date.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> A <span class="code">String</span> value that represents the key of the cookie to remove.</li> 
   <li><strong>options:</strong> An object that contains property values for configuring the cookie attributes. See the <span class="code"><a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-45">setItem</a></span> function for information. The <span class="code">expires</span> property has no effect.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>This function does not return a value.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.Cookie.vanish([/^cq-authoring/,&amp;nbsp;'cq-scrollpos']); 
  </codeblock> 
  <h4>setItem(key, value, options)</h4> 
  <p>Creates a cookie of the given key and value, and adds the cookie to the current document. Optionally, you can specify options that configure the attributes of the cookie.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> A String that contains the key of the cookie.</li> 
   <li><strong>value:</strong> A String that contains the cookie value.</li> 
   <li><strong>options:</strong> (Optional) An object that contains any of the following properties that configure the cookie attributes: 
    <ul> 
     <li>expires: A <span class="code">date</span> or <span class="code">number</span> value that specifies when the cookie expires. A date value specifies the absolute time of expiry. A number (in days) sets the time of expiry to the current time plus the number. The default value is <span class="code">undefined</span>.</li> 
     <li>secure: A <span class="code">boolean</span> value that specifies the <span class="code">Secure</span> attribute of the cookie. The default value is <span class="code">false</span>.</li> 
     <li>path: A <span class="code">String</span> value to use as the <span class="code">Path</span> attribute of the cookie. The default value is <span class="code">undefined</span>.</li> 
    </ul> </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>The cookie with the set value.</p> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.Cookie.setItem("name",&amp;nbsp;"mycookie",&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expires:&amp;nbsp;3,!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;domain:&amp;nbsp;'localhost',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;path:&amp;nbsp;'/some/directory',!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;secure:&amp;nbsp;true!!discoiqbr!!}); 
  </codeblock> 
  <h4>vanish(filter, options)</h4> 
  <p>Removes all cookies that match a given filter. Cookies are matched using the getKeys function and removed using the removeItem function.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>filter:</strong> The <span class="code">filter</span> argument to use in the call to the <span class="code"><a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-49">getKeys</a></span> function.</li> 
   <li><strong>options:</strong> The <span class="code">options</span> argument to use in the call to the <span class="code"><a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-47">removeItem</a></span> function.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>This function does not return a value.</p> 
  <h2>ContextHub.Utils.Eventing</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders" lastModifiedDate="2018-01-18T11:19:40.506-0500" type="remark"> 
   <p>/libs/granite/contexthub/code/kernel/utils/ContextHub.Utils.eventing.js</p> 
  </draft-comment> 
  <p>Enables you to bind and unbind functions to ContextHub store events. Access ContextHub.Utils.Eventing objects for a store using the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-62">eventing</a> property of the store.</p> 
  <h3>Functions (ContextHub.Utils.Eventing)</h3> 
  <h4>off(name, selector)</h4> 
  <p>Unbinds a function from an event.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> The <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">name of the event</a> for which you are unbinding the function.</li> 
   <li><strong>selector:</strong> The selector that identifies the bind. (See the <span class="code">selector</span> parameter for the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-1653326109">on</a> and <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-401556000">once</a> functions). </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>This function returns no value.</p> 
  <h4>on(name, handler, selector, triggerForPastEvents)</h4> 
  <p>Binds a function to an event. The function is called every time the event occurs. Optionally, the function can be called for events that have occurred in the past, before the binding is established.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> (String) The <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">name of the event</a> to which you are binding the function.</li> 
   <li><strong>handler:</strong> (Function) The function to bind to the event.</li> 
   <li><strong>selector:</strong> (String) A unique identifier for the bind. You need the selector to identify the bind if you want to use the <span class="code">off</span> function to remove the bind.</li> 
   <li><strong>triggerForPastEvents:</strong> (Boolean) Indicates whether the handler should be executed for events that occurred in the past. A value of <span class="code">true</span> calls the handler for past events. A value of <span class="code">false</span> calls the hander for future events. The default value is <span class="code">true</span>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>When the <span class="code">triggerForPastEvents</span> argument is <span class="code">true</span>, this function returns a <span class="code">boolean</span> value that indicates whether the event occurred in the past:</p> 
  <ul> 
   <li><span class="code">true</span>: The event occurred in the past and the handler will be called.</li> 
   <li><span class="code">false</span>: The event has not occurred in the past.</li> 
  </ul> 
  <p>If <span class="code">triggerForPastEvents</span> is <span class="code">false</span>, this function returns no value.</p> 
  <p><strong>Example</strong></p> 
  <p>The following example binds a function to the data event of the geolocation store. The function populates an element on the page with the value for the latitude data item from the store.</p> 
  <draft-comment color="yellow" lastModifiedBy="sbroders" lastModifiedDate="2018-01-18T11:19:40.649-0500" type="remark"> 
   <p>needs review</p> 
  </draft-comment> 
  <codeblock class="syntax js">
    &lt;div&amp;nbsp;class="location"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;p&gt;latitude:&amp;nbsp;&lt;span&amp;nbsp;id="lat"&gt;&lt;/span&gt;&lt;/p&gt;!!discoiqbr!!&lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!!!discoiqbr!!&lt;script&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;geostore&amp;nbsp;=&amp;nbsp;ContextHub.getStore("geolocation");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;geostore.eventing.on(ContextHub.Constants.EVENT_DATA_UPDATE,getlat,"getlat");!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;function&amp;nbsp;getlat(){!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;latitude&amp;nbsp;=&amp;nbsp;geostore.getItem("latitude");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$("#lat").html(latitude);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&lt;/script&gt; 
  </codeblock> 
  <h4>once(name, handler, selector, triggerForPastEvents)</h4> 
  <p>Binds a function to an event. The function is called only once, for the first occurrence of the event. Optionally, the function can be called for the event that has occurred in the past, before the binding is established.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>name:</strong> (String) The <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-574450215">name of the event</a> to which you are binding the function.</li> 
   <li><strong>handler:</strong> (Function) The function to bind to the event.</li> 
   <li><strong>selector:</strong> (String) A unique identifier for the bind. You need the selector to identify the bind if you want to use the <span class="code">off</span> function to remove the bind.</li> 
   <li><strong>triggerForPastEvents:</strong> (Boolean) Indicates whether the handler should be executed for events that occurred in the past. A value of <span class="code">true</span> calls the handler for past events. A value of <span class="code">false</span> calls the hander for future events. The default value is <span class="code">true</span>.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>When the <span class="code">triggerForPastEvents</span> argument is <span class="code">true</span>, this function returns a <span class="code">boolean</span> value that indicates whether the event occurred in the past:</p> 
  <ul> 
   <li><span class="code">true</span>: The event occurred in the past and the handler will be called.</li> 
   <li><span class="code">false</span>: The event has not occurred in the past.</li> 
  </ul> 
  <p>If <span class="code">triggerForPastEvents</span> is <span class="code">false</span>, this function returns no value.</p> 
  <h2>ContextHub.Utils.inheritance</h2> 
  <p>A utility class that enables an object to inherit the properties and methods of another object.</p> 
  <h3>Functions (ContextHub.Utils.inheritance)</h3> 
  <h4>inherit(child, parent)</h4> 
  <p>Causes an object to inherit the properties and methods of another object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>child:</strong> (Object) The object that inherits.</li> 
   <li><strong>parent:</strong> (Object) The object that defines the properties and methods that are inherited.</li> 
  </ul> 
  <h2>ContextHub.Utils.JSON</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:40.877-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/utils/ContextHub.Utils.json.js</p> 
  </draft-comment> 
  <p>Provides functions for serializing objects into JSON format and deserializing JSON strings into objects.</p> 
  <h3>Functions (ContextHub.Utils.JSON)</h3> 
  <h4>parse(data)</h4> 
  <p>Parses a string value as JSON and converts it into a javascript object.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>data:</strong> A string value in JSON format.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A Javascript object.</p> 
  <p><strong>Example</strong></p> 
  <p>The code <span class="code">ContextHub.Utils.JSON.parse("{'city':'Basel','country':'Switzerland','population':'173330'}");</span> returns the following object:</p> 
  <codeblock class="syntax js">
    Object&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;country:&amp;nbsp;"Switzerland",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;population:&amp;nbsp;173330!!discoiqbr!!} 
  </codeblock> 
  <h4>stringify(data)</h4> 
  <p>Serializes Javascript values and objects into string values of JSON format.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>data:</strong> The value or object to serialize. This function supports boolean, array, number, string, and date values.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>The serialized string value. When <span class="code">data</span> is a R<span class="code">egExp</span> value, this function returns an empty object. When <span class="code">data</span> is a function, returns <span class="code">undefined</span>.</p> 
  <p><strong>Example</strong></p> 
  <p>The following code returns <span class="code">"{'city':'Basel','country':'Switzerland','population':'173330'}":</span></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.JSON.stringify({!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;country:&amp;nbsp;"Switzerland",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;population:&amp;nbsp;173330!!discoiqbr!!}); 
  </codeblock> 
  <h2>ContextHub.Utils.JSON.tree</h2> 
  <p>This class facilitates the manipulation of data objects that to be stored or are retrieved from ContextHub stores.</p> 
  <h3>Functions (ContextHub.Utils.JSON.tree)</h3> 
  <h4>addAllItems()</h4> 
  <p>Creates a copy of a data object and adds to it the data tree from a second object. The function returns the copy and does not modify either of the original objects. When the data trees of the two objects contain identical keys, the value of the second object overwrites the value of the first object. </p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>tree:</strong> The object that is copied. </li> 
   <li><strong>secondTree:</strong> The object that is merged with the copy of the <span class="code">tree</span> object.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An object that contains the merged data.</p> 
  <h4>cleanup()</h4> 
  <p>Creates a copy of an object, finds and removes items in the data tree that contain no values, null values, or undefined values, and returns the copy.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>tree:</strong> The object to clean.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A copy of tree that is cleaned.</p> 
  <h4>getItem()</h4> 
  <p>Retrieves the value from an object for the a key.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>tree:</strong> The data object.</li> 
   <li><strong>key:</strong> The key for the value that you want to retrieve.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>The value that corresonds with the key. When the key has child keys, this function returns a complex object. When the type of the value for the key is <span class="code">undefined</span>, <span class="code">null</span> is returned.</p> 
  <p><strong>Example</strong></p> 
  <p>Consider the following Javascript object:</p> 
  <codeblock class="syntax js">
    myObject&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;user:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;details:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;population:&amp;nbsp;173330,!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elevation:&amp;nbsp;260!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;} 
  </codeblock> 
  <p>The following example code returns the value <span class="code">260</span>:</p> 
  <codeblock class="syntax js">
    ContextHub.Utils.JSON.tree.getItem(myObject,&amp;nbsp;"/user/location/details/elevation"); 
  </codeblock> 
  <p>The following example code retrieves the value for a key that has child keys:</p> 
  <codeblock class="syntax js">
    ContextHub.Utils.JSON.tree.getItem(myObject,&amp;nbsp;"/user"); 
  </codeblock> 
  <p>The function returns the following object:</p> 
  <codeblock class="syntax js">
    Object&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;location:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;details:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;population:&amp;nbsp;173330,!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elevation:&amp;nbsp;260!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <h4>getKeys()</h4> 
  <p>Retrieves all keys from the data tree of an object. Optionally, you can retrieve only the keys of the children of a specific key. You can also optionally specify a sort order of the retrieved keys.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>tree:</strong> The object from which to retrieve the keys of the data tree.</li> 
   <li><strong>parent:</strong> (Optional) The key of an item in the data tree for which you want to retrieve the keys of the child items.</li> 
   <li><strong>order:</strong> (Optional) A function that determines the sort order of the returned keys. (See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort</a> on the Mozilla Developer Network.)</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An array of keys.</p> 
  <p><strong>Example</strong></p> 
  <p>Consider the following object:</p> 
  <codeblock class="syntax js">
    myObject&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;location:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;weather:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;temperature:&amp;nbsp;"28C",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;humidity:&amp;nbsp;"77%",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;precipitation:&amp;nbsp;"10%",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wind:&amp;nbsp;"8km/h"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;country:&amp;nbsp;"Switzerland",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;longitude:&amp;nbsp;7.5925727,!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;latitude:&amp;nbsp;47.557421!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>The <span class="code">ContextHub.Utils.JSON.tree.getKeys(myObject);</span> script returns the following array:</p> 
  <codeblock class="syntax js">
    ["/location",&amp;nbsp;"/location/city",&amp;nbsp;"/location/country",&amp;nbsp;"/location/latitude",&amp;nbsp;"/location/longitude",&amp;nbsp;"/location/weather",&amp;nbsp;"/location/weather/humidity",&amp;nbsp;"/location/weather/precipitation",&amp;nbsp;"/location/weather/temperature",&amp;nbsp;"/location/weather/wind"] 
  </codeblock> 
  <h4>removeItem()</h4> 
  <p>Creates a copy of a given object, removes the specified branch from the data tree, and returns the modified copy. </p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li>tree: A data object.</li> 
   <li>key: The key to remove.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A copy of the original data object with the key removed.</p> 
  <p><strong>Example</strong></p> 
  <p>Consider the following object:</p> 
  <codeblock class="syntax js">
    myObject&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;one:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;foo:&amp;nbsp;"bar",!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;two:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;three:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;four:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;five:&amp;nbsp;5,!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;six:&amp;nbsp;6!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>The following example script removes the /one/two/three/four branch from the data tree:</p> 
  <codeblock class="syntax js">
    myObject&amp;nbsp;=&amp;nbsp;ContextHub.Utils.JSON.tree.removeItem(myObject,&amp;nbsp;"/one/two/three/four"); 
  </codeblock> 
  <p>The function returns the following object:</p> 
  <codeblock class="syntax js">
    myObject&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;one:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;foo:&amp;nbsp;"bar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <h4>sanitizeKey(key)</h4> 
  <p>Sanitizes string values to make them usable as keys. To sanitize a string, this function performs the following actions:</p> 
  <ul> 
   <li>Reduces multiple consecutive forward slashes to a single slash. </li> 
   <li>Removes whitespace from the beginning and ending of the string.</li> 
   <li>Splits the result into an array of strings that are demarcated by slashes.</li> 
  </ul> 
  <div>
    Use the resultant array to create a usable key. 
  </div> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>key:</strong> The <span class="code">string</span> to sanitize.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An array of <span class="code">string</span> values where each string is the portion of the <span class="code">key</span> that was demarcated by slashes. represents the sanitized key. If the sanitized array has a length of zero, this function returns <span class="code">null</span>.</p> 
  <p><strong>Example</strong></p> 
  <p>The following code sanitizes a string to produce the array <span class="code">["this", "is", "a", "path"]</span>, and then generates the key <span class="code">"/this/is/a/path"</span> from the array:</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;key&amp;nbsp;=&amp;nbsp;"&amp;nbsp;/&amp;nbsp;this////is/a/path&amp;nbsp;";!!discoiqbr!!ContextHub.Utils.JSON.tree.sanitizeKey(key)!!discoiqbr!!"/"&amp;nbsp;+&amp;nbsp;ContextHub.Utils.JSON.tree.sanitizeKey(key).join("/"); 
  </codeblock> 
  <h4>setItem(tree, key, value)</h4> 
  <p>Adds a key/value pair to the data tree of a copy of an object. For information about data trees, see <a href="../../../sites/developing/using/contexthub.md#main-pars-title-11">Store Data</a>.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li>tree: A data object.</li> 
   <li>key: The key to associate with the value that you are adding. The key is the path to the item in the data tree. This function calls <span class="code">ContextHub.Utils.JSON.tree.sanitize</span> to sanitize the key before adding it.</li> 
   <li>value: The value to add to the data tree.</li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>A copy of the <span class="code">tree</span> object that includes the <span class="code">key</span>/<span class="code">value</span> pair. </p> 
  <p><strong>Example</strong></p> 
  <p>Consider the following Javascript code:</p> 
  <codeblock class="syntax js">
    var&amp;nbsp;myObject&amp;nbsp;=&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;user:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location:&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;city:&amp;nbsp;"Basel"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};!!discoiqbr!!!!discoiqbr!!var&amp;nbsp;myKey&amp;nbsp;=&amp;nbsp;"/user/location/details";!!discoiqbr!!!!discoiqbr!!var&amp;nbsp;myValue&amp;nbsp;=&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;population:&amp;nbsp;173330,&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elevation:&amp;nbsp;260&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};!!discoiqbr!!!!discoiqbr!!myObject&amp;nbsp;=&amp;nbsp;ContextHub.Utils.JSON.tree.setItem(myObject,&amp;nbsp;myKey,&amp;nbsp;myValue); 
  </codeblock> 
  <p>The myObject object has the following value:</p> 
  <h2>ContextHub.Utils.storeCandidates</h2> 
  <draft-comment color="blue" lastModifiedBy="sbroders@adobe.com" lastModifiedDate="2018-01-18T11:19:41.826-0500" type="remark"> 
   <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">/libs/granite/contexthub/code/kernel/utils/ContextHub.Utils.storeCandidates.js</p> 
  </draft-comment> 
  <p>Enables you to register store candidates and obtain registered store candidates.</p> 
  <h3>Functions (ContextHub.Utils.storeCandidates)</h3> 
  <h4>getRegisteredCandidates(storeType)</h4> 
  <p>Returns the store types that are registered as store candidates. Either retrieve the registered candicates of a specific store type or of all store types.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>storeType:</strong> (String) The name of the store type. See the <span class="code">storeType</span> parameter of the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-4"><span class="code">ContextHub.Utils.storeCandidates.registerStoreCandidate</span></a> function. </li> 
  </ul> 
  <p><strong>Returns</strong></p> 
  <p>An object of store types. The object properties are the store type names, and the property values are an array of registered store candidates.</p> 
  <h4>getStoreFromCandidates(storeType)</h4> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">Returns a store type from the registered candidates. If more than one store type of the same name is regestered, the function returns the store type with the highest priority.</p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Parameters</strong></p> 
  <ul> 
   <li>storeType: (String) The name of the store candidate. See the <span class="code">storeType</span> parameter of the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-36"><span class="code">ContextHub.Utils.storeCandidates.registerStoreCandidate</span></a> function.</li> 
  </ul> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"><strong>Returns</strong></p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">An object that represents the registered store candidate. If the requested store Type is not registered, an error is thrown.</p> 
  <h4>getSupportedStoreTypes()</h4> 
  <p>Returns the names of the store types that are registered as store candidates. This function requires no parameters.</p> 
  <p><strong>Returns</strong></p> 
  <p>An array of string values, where each string is the storetype with which a store candidate was registered. See the <span class="code">storeType</span> parameter of the <a href="../../../sites/developing/using/contexthub-api.md#main-pars-title-4"><span class="code">ContextHub.Utils.storeCandidates.registerStoreCandidate</span></a> function.</p> 
  <h4>registerStoreCandidate(store, storeType, priority, applies)</h4> 
  <p>Registers a store object as a store candidate using a name and priority.</p> 
  <p>The priority is a number that indicates the importance of same-named stores. When a store candidate is registered using the same name as an already-registered store candidate, the candidate with the higher priority is used. When registering a store candidate, the store is registered only if the priority is higher than same-named registered store candidates.</p> 
  <p><strong>Parameters</strong></p> 
  <ul> 
   <li><strong>store:</strong> (Object) The store object to register as a store candidate.</li> 
   <li><strong>storeType:</strong> (String) The name of the store candidate. This value is required when creating an instance of the store candidate.</li> 
   <li><strong>priority:</strong> (Number) The priority of the store candidate. </li> 
   <li><strong>applies:</strong> (Function) The function to invoke that evaluates the applcability of the store in the current environment. The function must return <span class="code">true</span> if the store is applicable, and <span class="code">false</span> otherwise. The default value is a function that returns true: <span class="code">function() {return true;}</span></li> 
  </ul> 
  <p><strong>Example</strong></p> 
  <codeblock class="syntax js">
    ContextHub.Utils.storeCandidates.registerStoreCandidate(myStoreCandidate,&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'contexthub.mystorecandiate',&amp;nbsp;0); 
  </codeblock> 
 </body> 
</html>