<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="bohnert" name="cq:lastModifiedBy" /> 
  <meta content="2018-01-19T19:04:55.104-0500" name="jcr:created" /> 
  <meta content="AEM Components - The Basics" name="seoTitle" /> 
  <meta content="jsyal" name="cq:lastReplicatedBy" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="2018-01-18T11:18:29.138-0500" name="lastPublishExternalDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:components;content_type:reference" name="cq:tags" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="/content/docs/en/aem/6-3/develop/components/components-basics" name="qaNotes" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/components-basics.html" name="publishExternalURL" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2018-05-08T12:40:55.406-0400" name="locHandOffDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="2017-10-31T16:17:12.408-0400" name="firstPublishExternalDate" /> 
  <meta content="/content/docs/en/aem/6-0/develop/components/components-develop" name="legacyPath" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="Chris Bohnert" name="contentOwner" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="dist5" name="distType" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="2018-01-18T11:18:29.138-0500" name="publishExternalDate" /> 
  <meta content="2018-05-08T12:40:55.407-0400" name="cq:lastModified" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="2018-10-27T23:47:16.781-0400" name="cq:lastReplicated" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/components;/content/help/en/experience-manager/6-4/sites/developing/morehelp/components" name="moreHelpPaths" /> 
  <meta content="AEM Components - The Basics" name="navTitle" /> 
  <meta content="2018-01-18T11:18:29.138-0500" name="topicBrowsingSortDate" /> 
  <meta content="light" name="gnavTheme" /> 
  <meta content="When you start to develop new components you need to understand the basics of their structure and configuration" name="seoDescription" /> 
  <meta content="AEM Components - The Basics" name="jcr:title" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="3b07c232-7fd5-45c5-b60b-80ef986bffc6" name="jcr:predecessors" /> 
  <meta content="88ac1208-9b17-4e7c-9f2f-04676ea62d96" name="jcr:uuid" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
 </head> 
 <body> 
  <p>When you start to develop new components you need to understand the basics of their structure and configuration.</p> 
  <p>This process involves reading the theory and looking at the wide range of component implementations in a standard AEM instance. This latter approach is slightly complicated by the fact that although AEM has shifted to a new standard, modern, touch-enabled UI, it continues to support the classic UI.</p> 
  <h2>Overview</h2> 
  <p>This section covers key concepts and issues as an introduction to the details needed when developing your own components.<br /> </p> 
  <h3>Planning</h3> 
  <p>Before starting to actually configure/code your component you should ask:</p> 
  <ul> 
   <li>What exactly do you need the new component to do? 
    <ul> 
     <li>A clear specification helps at all stages of development, testing and handover.<br /> Details may change over time, but the specification can be updated (though changes should be documented too).<br /> </li> 
    </ul> </li> 
   <li>Do you need to create your component from scratch, or can you <a href="#extendingexistingcomponentsanddialogs">inherit the basics from an existing component</a>? 
    <ul> 
     <li>There is no need to reinvent the wheel.</li> 
     <li>There are several mechanisms provided by AEM to allow you to inherit and extend details from another component definition including override, overlay and the <a href="../../../sites/developing/using/sling-resource-merger.md">Sling Resource Merger</a>.</li> 
    </ul> </li> 
   <li>Will your component require logic to select/manipulate the content? 
    <ul> 
     <li>Logic should be kept separate from the user interface layer. HTL is designed to help ensure this happens.<br /> </li> 
    </ul> </li> 
   <li>Will your component need CSS formatting? 
    <ul> 
     <li>CSS formatting should be kept separate from the component definitions. Define conventions for naming your HTML elements so that you can modify them through external CSS files.</li> 
    </ul> </li> 
   <li>What security aspects should I take into consideration? 
    <ul> 
     <li>See <a href="../../../sites/administering/using/security-checklist.md#developmentbestpractices">Security Checklist - Development Best Practices</a> for further details.<br /> </li> 
    </ul> </li> 
  </ul> 
  <h3>Touch-Enabled vs Classic UI</h3> 
  <p>Before any serious discussion starts about developing components you need to know which UI your authors will be using:</p> 
  <ul> 
   <li><strong>Touch-Enabled UI</strong><br /> <a href="../../../sites/developing/using/touch-ui-concepts.md">The standard user interface</a> that was introduced in AEM 5.6.0 as a preview and extended in 6.x. It is based on the unified user experience for the Adobe Marketing Cloud, using the underlying technologies of <a href="../../../sites/developing/using/touch-ui-concepts.md#coralui">Coral UI</a> and <a href="../../../sites/developing/using/touch-ui-concepts.md#graniteui">Granite UI</a>.<br /> </li> 
   <li><strong>Classic UI</strong><br /> User interface based on ExtJS technology that was introduced with CQ 5.1.</li> 
  </ul> 
  <p>See <a href="../../../sites/deploying/using/ui-recommendations.md">UI Interface Recommendations for Customers</a> for more details.</p> 
  <p>Components can be implemented to support the touch-enabled UI, the classic UI or both. When looking at a standard instance you will also see out-of-the-box components that were originally designed for the classic UI, or the touch-enabled UI, and/or both.</p> 
  <p>For this reason we will cover the basics of both, and how to recognize them, on this page.<br /> </p> 
  <h3>Content Logic and Rendering Markup </h3> 
  <draft-comment color="blue" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:32.974-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>need more info/links</p> 
   <p>advantages of HTL to separate logic and rendering?</p> 
  </draft-comment> 
  <p>It is recommended to keep the code responsible for markup and rendering separate from the code that controls the logic used to select the component's content.</p> 
  <p>This philosophy is supported by <a href="/content/help/en/experience-manager/htl/user-guide">HTL</a>, a templating language that is purposely limited to ensure a real programming language is used to define the underlying business logic. This (optional) logic is invoked from HTL with a specific command. This mechanism highlights the code that is called for a given view and, if required, allows specific logic for different views of the same component.</p> 
  <h3>HTL vs JSP</h3> 
  <p>HTL is a HTML templating language, introduced with AEM 6.0. </p> 
  <p>The discussion of whether to use <a href="/content/help/en/experience-manager/htl/user-guide">HTL</a> or JSP (Java Server Pages) when developing your own components should be straightforward as HTL is now the recommended scripting language for AEM.</p> 
  <p>Both HTL and JSP can be used for developing components for both the classic and the touch-enabled UI. Although there can be a tendency to assume that HTL is only for the touch-enabled UI and JSP for the classic UI, this is a misconception and more due to timing. The touch-enabled UI and HTL were incorporated into AEM over approximately the same period. Since HTL is now the recommended language, it is being used for new components, which tend to be for the touch-enabled UI.<br /> </p> 
  <draft-comment color="blue" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:33.071-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>need more info/links?</p> 
   <p>mention advantages of HTL ability to separate logic and rendering?</p> 
  </draft-comment> 
  <note> 
   <p>The exceptions are Granite UI Foundation Form Fields (as used in dialogs). These still require the use of JSP.<br /> </p> 
  </note> 
  <h3>Developing Your Own Components</h3> 
  <draft-comment color="blue" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:33.141-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>CM&amp;gt; (<a href="https://jira.corp.adobe.com/browse/DOC-4494">https://jira.corp.adobe.com/browse/DOC-4494</a>)</p> 
   <p>"The whole "Developing Components" deals with JSPs; we should probably have some explanations on HTL too."</p> 
   <p>AJH&amp;gt; Agree, but we need examples from RnD/PMs.</p> 
  </draft-comment> 
  <p>To create your own components for the appropriate UI see (after reading this page):</p> 
  <ul> 
   <li><a href="../../../sites/developing/using/developing-components.md">AEM Components for the Touch-Enabled UI</a></li> 
   <li><a href="../../../sites/developing/using/developing-components-classic.md">AEM Components for the Classic UI</a></li> 
  </ul> 
  <p>A quick way to get started is to copy an existing component and then make the changes you want. To learn how to create your own components and add them to the paragraph system see:</p> 
  <ul> 
   <li><a href="../../../sites/developing/using/developing-components-samples.md">Developing Components</a> (focused on the touch-enabled UI)</li> 
  </ul> 
  <h3>Moving Components to the Publish Instance</h3> 
  <p>The components that render content must be deployed on the same AEM instance as the content. Therefore, all components that are used for authoring and rendering pages on the author instance must be deployed on the publish instance. When deployed, the components are available to render activated pages.</p> 
  <p>Use the following tools to move your components to the publish instance:</p> 
  <ul> 
   <li><a href="../../../sites/administering/using/package-manager.md">Use Package Manager</a> to add your components to a package and move them to another AEM instance.</li> 
   <li><a href="../../../sites/authoring/using/publishing-pages.md#howtoactivateacompletesectiontreeofyourwebsite">Use the Activate Tree replication tool</a> to replicate the components.</li> 
  </ul> 
  <note> 
   <p>These mechanisms can also be used for transferring your component between other instances e.g. from your development to your test instance.</p> 
  </note> 
  <h3>Components to be Aware of from the Start</h3> 
  <ul> 
   <li>Page: 
    <ul> 
     <li>AEM has the <i>page</i> component (<span class="code">cq:Page</span>).</li> 
     <li>This is a specific type of resource that is important for content management.</li> 
     <li>A page corresponds to a web page holding content for your website.</li> 
    </ul> </li> 
   <li>Paragraph system(s): 
    <ul> 
     <li>The paragraph system is a key part of a website as it manages a list of paragraphs. It is used to hold and structure the individual components that hold the actual content.</li> 
     <li>You can create, move, copy, and delete paragraphs in the paragraph system.</li> 
     <li>You can also select the components to be available for use within a specific paragraph system.</li> 
     <li>There are various paragraph systems available within a standard instance (e.g. <span class="code">parsys</span>, <span class="code"><a href="../../../sites/authoring/using/responsive-layout.md">responsivegrid</a></span>).</li> 
    </ul> </li> 
  </ul> 
  <h2>Structure</h2> 
  <p>The structure of an AEM component is powerful and flexible, the main considerations are:<br /> </p> 
  <ul> 
   <li>Resource Type<br /> </li> 
   <li>Component Definition<br /> </li> 
   <li>Properties and Child Nodes of a Component<br /> </li> 
   <li>Dialogs<br /> </li> 
   <li>Design Dialogs<br /> </li> 
   <li>Component Availability<br /> </li> 
   <li>Components and the Content They Create</li> 
  </ul> 
  <h3>Resource Type</h3> 
  <p>A key element of the structure is the resource type.</p> 
  <ul> 
   <li>Content structure declares intentions.<br /> </li> 
   <li>Resource type implement them.</li> 
  </ul> 
  <p>This is an abstraction that helps ensure that even when the look and feel changes over time,  the intention stays the time.</p> 
  <h3>Component Definition</h3> 
  <h4>Component Basics</h4> 
  <p>The definition of a component can be broken down as follows:</p> 
  <ul> 
   <li>AEM components are based on <a href="https://sling.apache.org/documentation.html">Sling</a>.</li> 
   <li>AEM components are (usually) located under: 
    <ul> 
     <li>HTL: <span class="code">/libs/wcm/foundation/components</span> <br /> </li> 
     <li>JSP: <span class="code">/libs/foundation/components</span><br /> </li> 
    </ul> </li> 
   <li>Project/Site specific components are (usually) located under: 
    <ul> 
     <li><span class="code">/apps/&amp;lt;myApp&amp;gt;/components</span></li> 
    </ul> </li> 
   <li>AEM standard components are defined as <span class="code">cq:Component</span> and have the key elements: 
    <ul> 
     <li>jcr properties:<br /> A list of jcr properties; these are variable and some may be optional though the basic structure of a component node, its properties and subnodes are defined by the <span class="code">cq:Component</span> definition</li> 
     <li>Resources:<br /> These define static elements used by the component.</li> 
     <li>Scripts:<br /> Are used to implement the behavior of the resulting instance of the component.</li> 
    </ul> </li> 
   <li><strong>Root Node</strong>: 
    <ul> 
     <li><span class="code">&amp;lt;mycomponent&amp;gt; (cq:Component)</span> - Hierarchy node of the component.</li> 
    </ul> </li> 
   <li><strong>Vital Properties</strong>: 
    <ul> 
     <li><span class="code">jcr:title</span> - Component title; for example, used as a label when the component is listed in the components browser or sidekick.</li> 
     <li><span class="code">jcr:description</span> - Description for the component; can be used as mouse-over hint in the components browser or sidekick.</li> 
     <li>Classic UI:<br /> 
      <ul> 
       <li><span class="code">icon.png</span> - Icon for this component.</li> 
       <li><span class="code">thumbnail.png</span> - Image shown if this component is listed within the paragraph system.</li> 
      </ul> </li> 
     <li>Touch UI 
      <ul> 
       <li>See the section <a href="../../../sites/developing/using/components-basics.md#main-pars-title-4779">Component Icon in Touch UI</a> for details.</li> 
      </ul> </li> 
    </ul> </li> 
   <li><strong>Vital Child Nodes</strong>: 
    <ul> 
     <li><span class="code">cq:editConfig (cq:EditConfig)</span> - Defines the edit properties of the component and enables the component to appear in the Components browser or Sidekick.<br /> Note: if the component has a dialog, it will automatically appear in the Components browser or Sidekick, even if the cq:editConfig does not exist.</li> 
     <li><span class="code">cq:childEditConfig (cq:EditConfig)</span> - Controls author UI aspects for child components that do not define their own <span class="code">cq:editConfig</span>.<br /> </li> 
     <li>Touch-Enabled UI: 
      <ul> 
       <li><span class="code">cq:dialog</span> (<span class="code">nt:unstructured</span>) - Dialog for this component. Defines the interface allowing the user to configure the component and/or edit content.<br /> </li> 
       <li><span class="code">cq:design_dialog</span> (<span class="code">nt:unstructured</span>) - Design editing for this component</li> 
      </ul> </li> 
     <li>Classic UI:<br /> 
      <ul> 
       <li><span class="code">dialog</span> (<span class="code">cq:Dialog</span>) - Dialog for this component. Defines the interface allowing the user to configure the component and/or edit content.<br /> </li> 
       <li><span class="code">design_dialog</span> (<span class="code">cq:Dialog</span>) - Design editing for this component.<br /> </li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
  <h4>Component Icon in Touch UI</h4> 
  <p>The icon or abbreviation for the component is defined via JCR properties of the component when the component is created by the developer. These properties are evaluated in the following order and the first valid property found is used.</p> 
  <ol> 
   <li><span class="code">cq:icon</span> - String property pointing to a standard icon in the <a href="/sites/developing/using/reference-materials/coral-ui/coralui3/Coral.Icon">Coral UI library</a> to display in the component browser 
    <ul> 
     <li>Use the value of the HTML attribute of the Coral icon.</li> 
    </ul> </li> 
   <li><span class="code">abbreviation</span> - String property to customize the abbreviation of the component name in the component browser 
    <ul> 
     <li>The abbreviation should be limited to two characters.</li> 
     <li>Providing an empty string will build the abbreviation from first two characters of the <span class="code">jcr:title</span> property. 
      <ul> 
       <li>For example "Im" for "Image"</li> 
       <li>The localized title will be used to build the abbreviation.</li> 
      </ul> </li> 
     <li>The abbreviation is only translated if the component has an <span class="code">abbreviation_commentI18n</span> property, which is then used as translation hint.</li> 
    </ul> </li> 
   <li><span class="code">cq:icon.png</span> or <span class="code">cq:icon.svg</span> - Icon for this component, which is shown in the component browser 
    <ul> 
     <li>20 x 20 pixels is the size of icons of standard components. 
      <ul> 
       <li>Larger icons will be downsized (client-side).</li> 
      </ul> </li> 
     <li>The recommended color is rgb(112, 112, 112) -&amp;gt; #707070</li> 
     <li>The background of standard component icons is transparent.</li> 
     <li>Only <span class="code">.png</span> and <span class="code">.svg</span> files are supported.</li> 
     <li>If importing from the file system via Eclipse plugin, filenames need to be esacaped as <span class="code">_cq_icon.png</span> or <span class="code">_cq_icon.svg</span> for example.</li> 
     <li><span class="code">.png</span> takes precedent over <span class="code">.svg</span> if both are present</li> 
    </ul> </li> 
  </ol> 
  <p>If none of the above properties (<span class="code">cq:icon</span>, <span class="code">abbreviation</span>, <span class="code">cq:icon.png</span> or <span class="code">cq:icon.svg</span>) are found on the component:</p> 
  <ul> 
   <li>The system will search for the same properties on the super components following the <span class="code">sling:resourceSuperType</span> property.</li> 
   <li>If nothing or an empty abbreviation is found at the super component level, the system will build the abbreviation from the first letters of the <span class="code">jcr:title</span> property of the current component.</li> 
  </ul> 
  <p>To cancel the inheritance of icons from super components, setting an empty <span class="code">abbreviation</span> property on the component will revert to the default behavior.</p> 
  <p>The <a href="../../../sites/authoring/using/default-components-console.md#main-pars-title-1913426132">Component Console</a> displays how the icon for a particular component is defined.</p> 
  <p> </p> 
  <h4>SVG Icon Example</h4> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="utf-8"?&gt;!!discoiqbr!!&lt;!DOCTYPE&amp;nbsp;svg&amp;nbsp;PUBLIC&amp;nbsp;"-//W3C//DTD&amp;nbsp;SVG&amp;nbsp;1.1//EN"&amp;nbsp;"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;!!discoiqbr!!&lt;svg&amp;nbsp;version="1.1"&amp;nbsp;id="Layer_1"&amp;nbsp;xmlns="http://www.w3.org/2000/svg"&amp;nbsp;xmlns:xlink="http://www.w3.org/1999/xlink"&amp;nbsp;x="0px"&amp;nbsp;y="0px"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;width="20px"&amp;nbsp;height="20px"&amp;nbsp;viewBox="0&amp;nbsp;0&amp;nbsp;20&amp;nbsp;20"&amp;nbsp;enable-background="new&amp;nbsp;0&amp;nbsp;0&amp;nbsp;20&amp;nbsp;20"&amp;nbsp;xml:space="preserve"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ellipse&amp;nbsp;cx="5"&amp;nbsp;cy="5"&amp;nbsp;rx="3"&amp;nbsp;ry="3"&amp;nbsp;fill="#707070"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ellipse&amp;nbsp;cx="15"&amp;nbsp;cy="5"&amp;nbsp;rx="4"&amp;nbsp;ry="4"&amp;nbsp;fill="#707070"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ellipse&amp;nbsp;cx="5"&amp;nbsp;cy="15"&amp;nbsp;rx="5"&amp;nbsp;ry="5"&amp;nbsp;fill="#707070"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ellipse&amp;nbsp;cx="15"&amp;nbsp;cy="15"&amp;nbsp;rx="4"&amp;nbsp;ry="4"&amp;nbsp;fill="#707070"/&gt;!!discoiqbr!!&lt;/svg&gt; 
  </codeblock> 
  <h3>Properties and Child Nodes of a Component</h3> 
  <draft-comment color="yellow" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:33.768-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>link to https://docs.adobe.com/docs/en/aem/6-2/develop/platform/custom-nodetypes.html#cq:Component when it's updated?</p> 
  </draft-comment> 
  <p>Many of the nodes/properties needed to define a component are common to both UIs, with differences remaining independent so that your component can work in both environments.</p> 
  <p>A component is a node of type <span class="code">cq:Component</span> and has the following properties and child nodes:</p> 
  <table border="1" cellpadding="1" cellspacing="0" columns="3" header="none" width="600"> 
   <tbody> 
    <tr> 
     <td><strong>Name <br /> </strong></td> 
     <td><strong>Type <br /> </strong></td> 
     <td><strong>Description <br /> </strong></td> 
    </tr> 
    <tr> 
     <td>.<br /> </td> 
     <td><span class="code">cq:Component</span></td> 
     <td>Current component. A component is of node type <span class="code">cq:Component</span>.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">componentGroup</span></td> 
     <td><span class="code">String</span></td> 
     <td>Group under which the component can be selected in the Components browser (touch-enabled UI) or Sidekick (classic UI).<br /> A value of <span class="code">.hidden</span> is used for components that are not available for selection from the UI such as the actual paragraph systems.</td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:isContainer</span></td> 
     <td><span class="code">String</span></td> 
     <td>Indicates whether the component is a container component and therefore can contain other components such as a paragraph system.</td> 
    </tr> 
    <tr> 
     <td> </td> 
     <td> </td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:dialog</span></td> 
     <td><span class="code">nt:unstructured</span><br /> </td> 
     <td>Definition of the edit dialog for the touch-enabled UI.</td> 
    </tr> 
    <tr> 
     <td><span class="code">dialog</span></td> 
     <td><span class="code">cq:Dialog</span></td> 
     <td>Definition of the edit dialog for the classic UI.</td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:design_dialog</span></td> 
     <td><span class="code">nt:unstructured</span></td> 
     <td>Definition of the design dialog for the touch-enabled UI.</td> 
    </tr> 
    <tr> 
     <td><span class="code">design_dialog</span></td> 
     <td><span class="code">cq:Dialog </span></td> 
     <td>Definition of the design dialog for the classic UI.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">dialogPath</span></td> 
     <td><span class="code">String</span></td> 
     <td>Path to a dialog to cover the case when the component does not have a dialog node.<br /> </td> 
    </tr> 
    <tr> 
     <td> </td> 
     <td> </td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:cellName</span></td> 
     <td><span class="code">String</span></td> 
     <td>If set, this property is taken as Cell ID. For more information, please refer to the Knowledge Base article <a href="/content/help/en/experience-manager/kb/DesigneCellId">How are Design Cell IDs built</a>.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:childEditConfig</span></td> 
     <td><span class="code">cq:EditConfig</span></td> 
     <td>When the component is a container, as for example a paragraph system, this drives the edit configuration of the child nodes.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:editConfig</span></td> 
     <td><span class="code">cq:EditConfig</span></td> 
     <td><a href="#editbehavior">Edit configuration of the component</a>.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:htmlTag</span></td> 
     <td><span class="code">nt:unstructured </span></td> 
     <td>Returns additional tag attributes that are added to the surrounding html tag. Enables addition of attributes to the automatically generated divs.</td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:noDecoration</span></td> 
     <td><span class="code">Boolean</span></td> 
     <td>If true, the component is not rendered with automatically generated div and css classes.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:template</span></td> 
     <td><span class="code">nt:unstructured</span></td> 
     <td>If found, this node will be used as a content template when the component is added from the Components Browser or Sidekick.</td> 
    </tr> 
    <tr> 
     <td><span class="code">cq:templatePath</span></td> 
     <td><span class="code">String</span></td> 
     <td>Path to a node to use as a content template when the component is added from the Components browser or Sidekick. This must be an absolute path, not relative to the component node.<br /> Unless you want to reuse content already available elsewhere, this is not required and <span class="code">cq:template</span> is sufficient (see below).</td> 
    </tr> 
    <tr> 
     <td><span class="code">jcr:created</span></td> 
     <td><span class="code">Date</span></td> 
     <td>Date of creation of the component.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">jcr:description</span></td> 
     <td><span class="code">String</span></td> 
     <td>Description of the component.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">jcr:title</span></td> 
     <td><span class="code">String</span></td> 
     <td>Title of the component.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">sling:resourceSuperType</span></td> 
     <td><span class="code">String</span></td> 
     <td>When set, the component inherits from this component.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">virtual</span></td> 
     <td><span class="code">sling:Folder</span></td> 
     <td>Enables creation of virtual components. To see an example, please look at the contact component at:<br /> <span class="code">/libs/foundation/components/profile/form/contact</span></td> 
    </tr> 
    <tr> 
     <td> </td> 
     <td> </td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">&lt;breadcrumb.jsp&gt;</span></td> 
     <td><span class="code">nt:file</span><br /> </td> 
     <td>Script file.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">icon.png</span></td> 
     <td><span class="code">nt:file</span></td> 
     <td>Icon of the component, appears next to the Title in Sidekick.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">thumbnail.png</span></td> 
     <td><span class="code">nt:file</span></td> 
     <td>Optional thumbnail that is shown while the component is dragged into place from Sidekick.<br /> </td> 
    </tr> 
   </tbody> 
  </table> 
  <p>If we look at the <strong>Text</strong> component (either version), we can see these elements:</p> 
  <ul> 
   <li><p>HTL (<span class="code">/libs/wcm/foundation/components/text</span>)<br /> </p> <img imageRotate="0" src="assets/chlimage_1-263.png" /></li> 
   <li><p>JSP (<span class="code">/libs/foundation/components/text</span>)<br /> </p> <img imageRotate="0" src="assets/screen_shot_2012-02-13at60457pm.png" /></li> 
  </ul> 
  <p>Properties of particular interest include:</p> 
  <ul> 
   <li><span class="code">jcr:title</span> - title of the component; this can be used to identify the component, for example, it appears in the component list within the components browser or sidekick</li> 
   <li><span class="code">jcr:description</span> - description for the component; can be used as mouse-over hint in the component list within sidekick<br /> </li> 
   <li><span class="code">sling:resourceSuperType</span>: this indicates the path of inheritance when extending a component (by overriding a definition)</li> 
  </ul> 
  <p>Child nodes of particular interest include:</p> 
  <ul> 
   <li><span class="code">cq:editConfig</span> (<span class="code">cq:EditConfig</span>) - this controls visual aspects; for example, it can define the appearance of a bar or widget, or can add customized controls</li> 
   <li><span class="code">cq:childEditConfig</span> (<span class="code">cq:EditConfig</span>) - this controls the visual aspects for child components that do not have their own definitions</li> 
   <li>Touch-Enabled UI: 
    <ul> 
     <li><span class="code">cq:dialog</span> (<span class="code">nt:unstructured</span>) - defines the dialog for editing content of this component</li> 
     <li><span class="code">cq:design_dialog</span> (<span class="code">nt:unstructured</span>) - specifies the design editing options for this component</li> 
    </ul> </li> 
   <li>Classic UI:<br /> 
    <ul> 
     <li><span class="code">dialog</span> (<span class="code">cq:Dialog</span>) - defines the dialog for editing content of this component (specific to the classic UI)<br /> </li> 
     <li><span class="code">design_dialog</span> (<span class="code">cq:Dialog</span>) - specifies the design editing options for this component<br /> </li> 
     <li><span class="code">icon.png</span> - graphics file to be used as an icon for the component in the Sidekick</li> 
     <li><span class="code">thumbnail.png</span> - graphics file to be used as a thumbnail for the component while dragging it from the Sidekick</li> 
    </ul> </li> 
  </ul> 
  <h3>Dialogs</h3> 
  <draft-comment color="blue" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:34.218-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>special mention/cross-reference?</p> 
   <p>...for page properties:</p> 
   <p>/content/docs/en/aem/6-2/develop/extending/customizing-page-properties/page-properties-views.html</p> 
   <p>...and cq-msm-lockable</p> 
   <p>https://jira.corp.adobe.com/browse/DOC-5575</p> 
  </draft-comment> 
  <p>Dialogs are a key element of your component as they provide an interface for authors to configure and provide input to that component.</p> 
  <p>Depending on the complexity of the component your dialog may need one or more tabs - to keep the dialog short and to sort the input fields.</p> 
  <p>Dialog definitions are specific to the UI:</p> 
  <note> 
   <ul> 
    <li>For compatibility purposes the touch-enabled UI can use the definition of a classic UI dialog, when no dialog has been defined for the touch-enabled UI.</li> 
    <li>The <a href="../../../sites/developing/using/dialog-conversion.md">Dialog Conversion Tool</a> is also provided to help you extend/convert components that only have dialogs defined for the classic UI.</li> 
   </ul> 
  </note> 
  <draft-comment color="blue" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:34.333-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>need info that: ?</p> 
   <ul> 
    <li>touch 
     <ul> 
      <li>rendered server-side</li> 
     </ul> </li> 
    <li>classic 
     <ul> 
      <li>rendered client-side</li> 
     </ul> </li> 
   </ul> 
  </draft-comment> 
  <ul> 
   <li><p>Touch-Enabled UI<span class="code"></span></p> 
    <ul> 
     <li><span class="code">cq:dialog</span> (<span class="code">nt:unstructured</span>) nodes: 
      <ul> 
       <li>define the dialog for editing content of this component<br /> </li> 
       <li>specific to the touch-enabled UI</li> 
       <li>are defined using Granite UI components</li> 
       <li>have a property <span class="code">sling:resourceType</span>, as standard Sling content structure</li> 
       <li>can have a property <span class="code">helpPath</span> to define the context sensitive help resource (absolute or relative path) that is accessed when the Help icon (the ? icon) is selected. 
        <ul> 
         <li>For out-of-the box components this often references a page in the documentation. </li> 
         <li>If no <span class="code">helpPath</span> is specified, the default URL (documentation overview page) is shown.</li> 
        </ul> </li> 
      </ul> </li> 
    </ul> <img imageRotate="0" src="assets/chlimage_1-264.png" /><p>Within the dialog, individual fields are defined:</p> <img imageRotate="0" src="assets/screen_shot_2012-02-13at60937pm.png" /></li> 
   <li><p>Classic UI<span class="code"></span></p> 
    <ul> 
     <li><span class="code">dialog</span> (<span class="code">cq:Dialog</span>) nodes 
      <ul> 
       <li>define the dialog for editing content of this component<br /> </li> 
       <li>specific to the classic UI</li> 
       <li>are defined using ExtJS widgets</li> 
       <li>have a property <span class="code">xtype</span>, which refers to ExtJS</li> 
       <li>can have a property <span class="code">helpPath</span> to define the context sensitive help resource (absolute or relative path) that is accessed when the <strong>Help</strong> button is selected. 
        <ul> 
         <li>For out-of-the box components this often references a page in the documentation. </li> 
         <li>If no <span class="code">helpPath</span> is specified, the default URL (documentation overview page) is shown.</li> 
        </ul> </li> 
      </ul> </li> 
    </ul> <img imageRotate="0" src="assets/chlimage_1-265.png" /><p>Within the dialog, individual fields are defined:</p> <img imageRotate="0" src="assets/chlimage_1-266.png" /><p>Within a classic dialog:</p> 
    <ul> 
     <li>you can create the dialog as <span class="code">cq:Dialog</span>, which will provide a single tab - as in the text component, or if you need multiple tabs, as with the textimage component, the dialog can be defined as <span class="code">cq:TabPanel</span>.</li> 
     <li>a <span class="code">cq:WidgetCollection</span> (<span class="code">items</span>) is used to provide a base for either input fields (<span class="code">cq:Widget</span>) or further tabs (<span class="code">cq:Widget</span>). This hierarchy can be extended.</li> 
    </ul> </li> 
  </ul> 
  <h3>Design Dialogs</h3> 
  <p>Design dialogs are very similar to the dialogs used to edit and configure content, but they provide the interface for authors to configure and provide design details for that component.</p> 
  <p><a href="../../../sites/authoring/using/default-components-designmode.md">Design dialogs are available in Design Mode</a>, though they are not needed for all components e.g. <strong>Title</strong> and <strong>Image</strong> both have design dialogs, whereas <strong>Text</strong> does not.</p> 
  <p>The design dialog for the paragraph system (e.g. parsys) is a special case as it allows the user to specific other components to be available for selection (from the components browser or sidekick) on the page.<br /> </p> 
  <h3>Adding your Component to the Paragraph System</h3> 
  <p>Once a component has been defined it must be made available for use. To make a component available for use in a paragraph system you can either:</p> 
  <ol> 
   <li><p>Open <a href="../../../sites/authoring/using/default-components-designmode.md">Design Mode</a> for a page and enable the required component.</p> </li> 
   <li><p>Add the required component(s) to the <span class="code">components</span> property of your template definition under:</p>  <p>For example, see:</p>  <img imageRotate="0" src="assets/chlimage_1-267.png" /></li> 
  </ol> 
  <h3>Components and the Content They Create</h3> 
  <p>If we create and configure an instance of the <strong>Title</strong> component on the page: <span class="code">&amp;lt;content-path&amp;gt;/Prototype.html</span> </p> 
  <ul> 
   <li><p>Touch-Enabled UI</p> <img imageRotate="0" src="assets/chlimage_1-268.png" /></li> 
   <li><p>Classic UI</p> <img imageRotate="0" src="assets/screen_shot_2012-02-01at34257pm.png" /></li> 
  </ul> 
  <p>Then we can see the structure of the content created within the repository:</p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-13at61405pm.png" /> 
  <p>In particular, if you look at the actual text for a <strong>Title</strong>:</p> 
  <ul> 
   <li>the definition (for both UIs) have the property <span class="code">name</span>=<span class="code">./jcr:title</span><br /> 
    <ul> 
     <li><span class="code">/libs/foundation/components/title/cq:dialog/content/items/column/items/title</span></li> 
     <li><span class="code">/libs/foundation/components/title/dialog/items/title</span></li> 
    </ul> </li> 
   <li>within the content, this generates the property <span class="code">jcr:title</span> holding the author's content.</li> 
  </ul> 
  <p>The properties defined are dependent on the individual definitions. Although they can be more complex than above they still follow the same basic principles.</p> 
  <h2>Component Hierarchy and Inheritance</h2> 
  <p>Components within AEM are subject to 3 different hierarchies:</p> 
  <ul> 
   <li><strong>Resource Type Hierarchy</strong><br /> This is used to extend components using the property <span class="code">sling:resourceSuperType</span>. This enables the component to inherit. For example a text component will inherit various attributes from the standard component.<br /> 
    <ul> 
     <li>scripts (resolved by Sling)</li> 
     <li>dialogs</li> 
     <li>descriptions (including thumbnail images, icons, etc)</li> 
    </ul> </li> 
   <li><strong>Container Hierarchy</strong><br /> This is used to populate configuration settings to the child component and is most commonly used in a parsys scenario.<br /> For example, configuration settings for the edit bar buttons, control set layout (editbars, rollover), dialog layout (inline, floating) can be defined on the parent component and propagated to the child components.<br /> Configuration settings (related to edit functionality) in <span class="code">cq:editConfig</span> and <span class="code">cq:childEditConfig</span> are propagated.</li> 
   <li><strong>Include Hierarchy</strong><br /> This is imposed at runtime by the sequence of includes.<br /> This hierarchy is used by the Designer, which in turn acts as the base for various design aspects of the rendering; including layout information, css information, the available components in a parsys among others.</li> 
  </ul> 
  <h2>Edit Behavior</h2> 
  <p>This section explains how to configure the edit behavior of a component. This includes attributes such as actions available for the component, characteristics of the inplace editor and the listeners related to events on the component.</p> 
  <p>The configuration is common to both the touch-enabled and classic UI, albeit with certain, specific differences.</p> 
  <p>The edit behavior of a component is configured by adding a <span class="code">cq:editConfig</span> node of type <span class="code">cq:EditConfig</span> below the component node (of type <span class="code">cq:Component</span>) and by adding specific properties and child nodes. The following properties and child nodes are available:</p> 
  <ul> 
   <li><p><a href="#configuringwithcqeditconfigproperties"><span class="code">cq:editConfig</span> node properties</a>:<br /> </p> 
    <ul> 
     <li><span class="code">cq:actions</span> (<span class="code">String array</span>): defines the actions that can be performed on the component.<br /> </li> 
     <li><span class="code">cq:layout</span> (<span class="code">String</span>): : defines how the component is edited in the classic UI.</li> 
     <li><span class="code">cq:dialogMode</span> (<span class="code">String</span>): defines how the component dialog is opened in the classic UI 
      <ul> 
       <li>In the touch-enabled UI, dialogs are always floating in desktop mode, and automatically opened as fullscreen in mobile.<br /> </li> 
      </ul> </li> 
     <li><span class="code">cq:emptyText</span> (<span class="code">String</span>): defines text that is displayed when no visual content is present.<br /> </li> 
     <li><span class="code">cq:inherit</span> (<span class="code">Boolean</span>): defines if missing values are inherited from the component that it inherits from.<br /> </li> 
     <li><span class="code">dialogLayout</span> (String): defines how the dialog should open.</li> 
    </ul> </li> 
   <li><p><a href="#configuringwithcqeditconfigchildnodes"><span class="code">cq:editConfig</span> child nodes</a>:</p> 
    <ul> 
     <li><span class="code">cq:dropTargets</span> (node type <span class="code">nt:unstructured</span>): defines a list of drop targets that can accept a drop from an asset of the content finder 
      <ul> 
       <li>Multiple drop targets are only available in the classic UI.</li> 
       <li>In the touch-enabled UI a single drop target is allowed.<br /> </li> 
      </ul> </li> 
     <li><span class="code">cq:actionConfigs</span> (node type <span class="code">nt:unstructured</span>): defines a list of new actions that are appended to the cq:actions list.<br /> </li> 
     <li><span class="code">cq:formParameters</span> (node type <span class="code">nt:unstructured</span>): defines additional parameters that are added to the dialog form.<br /> </li> 
     <li><span class="code">cq:inplaceEditing</span> (node type <span class="code">cq:InplaceEditingConfig</span>): defines an inplace editing configuration for the component.<br /> </li> 
     <li><span class="code">cq:listeners</span> (node type <span class="code">cq:EditListenersConfig</span>): defines what happens before or after an action occurs on the component.<br /> </li> 
    </ul> </li> 
  </ul> 
  <note> 
   <p>In this page, a node (properties and child nodes) is represented as XML, as shown in the following example.<br /> </p> 
  </note> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[edit]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:dialogMode="floating"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:layout="editbar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:listeners!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditListenersConfig"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afteredit="REFRESH_PAGE"/&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <p>There are many existing configurations in the repository. You can easily search for specific properties or child nodes:</p> 
  <ul> 
   <li>To look for a property of the <span class="code">cq:editConfig</span> node, e.g. <span class="code">cq:actions</span>, you can use the Query tool in <strong>CRXDE Lite</strong> and search with the following XPath query string:<br /> <span class="code">//element(cq:editConfig, cq:EditConfig)[@cq:actions]</span></li> 
   <li>To look for a child node of <span class="code">cq:editConfig</span>, e.g. you can search for <span class="code">cq:dropTargets</span>, which is of type <span class="code">cq:DropTargetConfig</span>; you can use the Query tool in<strong> CRXDE Lite</strong> and search with the following XPath query string:<br /> <span class="code">//element(cq:dropTargets, cq:DropTargetConfig)</span></li> 
  </ul> 
  <h3>Configuring with cq:EditConfig Properties</h3> 
  <h3>cq:actions</h3> 
  <p>The <span class="code">cq:actions</span> property (<span class="code">String array</span>) defines one or several actions that can be performed on the component. The following values are available for configuration:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Value</strong></td> 
     <td style="text-align: center;"><strong>Description</strong></td> 
    </tr> 
    <tr> 
     <td><span class="code">text:&lt;some text&gt;</span></td> 
     <td>Displays the static text value &lt;some text&gt;<br /> Only visible in classic UI. The touch-enabled UI does not display actions in a contextual menu, so this is not applicable.</td> 
    </tr> 
    <tr> 
     <td>-</td> 
     <td>Adds a spacer.<br /> Only visible in classic UI. The touch-enabled UI does not display actions in a contextual menu, so this is not applicable.</td> 
    </tr> 
    <tr> 
     <td><span class="code">edit</span></td> 
     <td>Adds a button to edit the component.</td> 
    </tr> 
    <tr> 
     <td><span class="code">delete</span></td> 
     <td>Adds a button to delete the component</td> 
    </tr> 
    <tr> 
     <td><span class="code">insert</span></td> 
     <td>Adds a button to insert a new component before the current one</td> 
    </tr> 
    <tr> 
     <td><span class="code">copymove</span></td> 
     <td>Adds a button to copy and cut the component.</td> 
    </tr> 
   </tbody> 
  </table> 
  <p>The following configuration adds an edit button, a spacer, a delete and an insert button to the component edit bar:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[edit,-,delete,insert]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:layout="editbar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"/&gt; 
  </codeblock> 
  <p>The following configuration adds the text "Inherited Configurations from Base Framework" to the component edit bar:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[text:Inherited&amp;nbsp;Configurations&amp;nbsp;from&amp;nbsp;Base&amp;nbsp;Framework]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:layout="editbar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"/&gt; 
  </codeblock> 
  <h3>cq:layout (Classic UI Only)</h3> 
  <p>The <span class="code">cq:layout</span> property (<span class="code">String</span>) defines how the component can be edited in the classic UI. The following values are available:<br /> </p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Value</strong></td> 
     <td style="text-align: center;"><strong>Description</strong></td> 
    </tr> 
    <tr> 
     <td><span class="code">rollover</span></td> 
     <td>Default value. The component edition is accessible "on mouse over" through clicks and/or context menu.<br /> For advanced use, note that the corresponding client side object is: <span class="code">CQ.wcm.EditRollover</span>.</td> 
    </tr> 
    <tr> 
     <td><span class="code">editbar</span></td> 
     <td>The component edition is accessible through a toolbar.<br /> For advanced use, note that the corresponding client side object is: <span class="code">CQ.wcm.EditBar</span>.</td> 
    </tr> 
    <tr> 
     <td><span class="code">auto</span></td> 
     <td>The choice is left to the client side code.</td> 
    </tr> 
   </tbody> 
  </table> 
  <note> 
   <p>The concepts of rollover and editbar are not applicable in the touch-enabled UI.</p> 
  </note> 
  <p>The following configuration adds an edit button to the component edit bar:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[edit]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:layout="editbar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <h3>cq:dialogMode (Classic UI Only)</h3> 
  <p>The component can be linked to an edit dialog. The <span class="code">cq:dialogMode</span> property (<span class="code">String</span>) defines how the component dialog will be opened in the classic UI. The following values are available:<br /> </p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Value</strong></td> 
     <td style="text-align: center;"><strong>Description</strong></td> 
    </tr> 
    <tr> 
     <td><span class="code">floating</span></td> 
     <td>The dialog is floating.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">inline</span></td> 
     <td>(default value). The dialog is anchored over the component.<br /> </td> 
    </tr> 
    <tr> 
     <td><span class="code">auto</span></td> 
     <td>If the component width is smaller than the client side <span class="code">CQ.themes.wcm.EditBase.INLINE_MINIMUM_WIDTH</span> value, the dialog is floating, otherwise it is inline.</td> 
    </tr> 
   </tbody> 
  </table> 
  <note> 
   <p>In the touch-enabled UI, dialogs are always floating in desktop mode and automatically opened as fullscreen in mobile.</p> 
  </note> 
  <p>The following configuration defines an edit bar with an edit button, and a floating dialog:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[edit]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:dialogMode="floating"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:layout="editbar"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <h3>cq:emptyText</h3> 
  <p>The <span class="code">cq:emptyText</span> property (<span class="code">String</span>) defines text that is displayed when no visual content is present. It defaults to: <span class="code">Drag components or assets here</span>.<br /> </p> 
  <h3>cq:inherit</h3> 
  <p>The <span class="code">cq:inherit</span> property (<span class="code">boolean</span>) defines whether missing values are inherited from the component that it inherits from. It defaults to <span class="code">false</span>.</p> 
  <h3>dialogLayout</h3> 
  <p>The <span class="code">dialogLayout</span> property defines how a dialog should open by default.</p> 
  <ul> 
   <li>A value of <span class="code">fullscreen</span> opens the dialog in full screen. </li> 
   <li>An empty value or absence of the property defaults to opening the dialog normally. </li> 
   <li>Note that the user can always toggle the fullscreen mode within the dialog. </li> 
   <li>Does not apply to the classic UI.</li> 
  </ul> 
  <h3>Configuring with cq:EditConfig Child Nodes</h3> 
  <h3>cq:dropTargets</h3> 
  <draft-comment color="yellow" lastModifiedBy="ims-author-57F1056A4CD116590A746C15@AdobeID" lastModifiedDate="2018-01-18T11:18:36.726-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>planned for touch in 6.2 - see <a href="https://jira.corp.adobe.com/browse/CQ-41577">https://jira.corp.adobe.com/browse/CQ-41577</a><br /> </p> 
  </draft-comment> 
  <p>The <span class="code">cq:dropTargets</span> node (node type <span class="code">nt:unstructured</span>) defines a list of drop targets that can accept a drop from an asset dragged from the content finder. It serves as a collection of nodes of type <span class="code">cq:DropTargetConfig</span>.<br /> </p> 
  <note> 
   <p>Multiple drop targets are only available in the classic UI.</p> 
   <p>In the touch-enabled UI only the first target will be used.<br /> </p> 
  </note> 
  <p>Each child node of type <span class="code">cq:DropTargetConfig</span> defines a drop target in the component. The node name is important because it must be used in the JSP, as follows, to generate the CSS class name assigned to the DOM element that is the effective drop target:</p> 
  <p><code class="code">&amp;lt;drop target css class&amp;gt; = &amp;lt;drag and drop prefix&amp;gt; + 
    <discoiqbr /> &amp;lt;node name of the drop target in the edit configuration&amp;gt;</code></p> 
  <p>The <span class="code">&amp;lt;<i>drag and drop prefix</i>&amp;gt;</span> is defined by the Java property:</p> 
  <p style="margin-left: 40px;"><span class="code">com.day.cq.wcm.api.components.DropTarget.CSS_CLASS_PREFIX</span>.</p> 
  <p>For example, the class name is defined as follows in the JSP of the Download component<br /> (<span class="code">/libs/foundation/components/download/download.jsp</span>), where <span class="code">file</span> is the node name of the drop target in the edit configuration of the Download component:</p> 
  <p style="margin-left: 40px;"><span class="code">String ddClassName = DropTarget.CSS_CLASS_PREFIX + "file";</span></p> 
  <p>The node of type <span class="code">cq:DropTargetConfig</span> needs to have the following properties:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Name</strong></td> 
     <td style="text-align: center;"><strong>Property Value<br /> </strong></td> 
    </tr> 
    <tr> 
     <td><span class="code">accept</span></td> 
     <td>Regex applied to the asset mime type to validate if dropping is allowed.</td> 
    </tr> 
    <tr> 
     <td><span class="code">groups</span></td> 
     <td>Array of drop target groups. Each group must match the group type that is defined in the content finder extension and that is attached to the assets.</td> 
    </tr> 
    <tr> 
     <td><span class="code">propertyName</span></td> 
     <td>Name of the property that will be updated after a valid drop.</td> 
    </tr> 
   </tbody> 
  </table> 
  <p>The following configuration is taken from the Download component. It enables any asset (the mime-type can be any string) from the <span class="code">media</span> group to be dropped from the content finder into the component. After the drop, the component property <span class="code">fileReference</span> is being updated:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:dropTargets&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;file!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:DropTargetConfig"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;accept="[.*]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;groups="[media]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;propertyName="./fileReference"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/cq:dropTargets&gt; 
  </codeblock> 
  <h3>cq:actionConfigs (Classic UI Only)</h3> 
  <p>The <span class="code">cq:actionConfigs</span> node (node type <span class="code">nt:unstructured</span>) defines a list of new actions that are appended to the list defined by the <span class="code">cq:actions</span> property. Each child node of <span class="code">cq:actionConfigs</span><strong> </strong>defines a new action by defining a widget.<br /> </p> 
  <p>The following sample configuration defines a new button (with a separator for the classic UI):</p> 
  <ul> 
   <li>a separator, defined by the xtype <span class="code">tbseparator</span>; 
    <ul> 
     <li>This is only used by the classic UI.<br /> </li> 
     <li>This definition is ignored by the touch-enabled UI as xtypes are ignored (and separators are unnecessary as the action toolbar is constructed differently in the touch-enabled UI).</li> 
    </ul> </li> 
   <li>a button named <strong>Manage comments</strong> that runs the handler function <span class="code">CQ_collab_forum_openCollabAdmin()</span>.</li> 
  </ul> 
  <codeblock gutter="true" class="syntax js">
    &lt;jcr:root&amp;nbsp;xmlns:cq="http://www.day.com/jcr/cq/1.0"&amp;nbsp;xmlns:jcr="http://www.jcp.org/jcr/1.0"&amp;nbsp;xmlns:nt="http://www.jcp.org/jcr/nt/1.0"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:actions="[EDIT,COPYMOVE,DELETE,INSERT]"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditConfig"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:actionConfigs&amp;nbsp;jcr:primaryType="nt:unstructured"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;separator0!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xtype="tbseparator"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;manage!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;handler="function(){CQ_collab_forum_openCollabAdmin();}"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text="Manage&amp;nbsp;comments"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/cq:actionConfigs&gt;!!discoiqbr!!&lt;/jcr:root&gt; 
  </codeblock> 
  <note> 
   <p>See <a href="../../../sites/developing/using/customizing-page-authoring-touch.md#addnewactiontoacomponenttoolbar">Add New Action to a Component Toolbar</a> as an example for the touch-enabled UI.<br /> </p> 
  </note> 
  <h3>cq:formParameters</h3> 
  <p>The <span class="code">cq:formParameters</span> node (node type <span class="code">nt:unstructured</span>) defines additional parameters that are added to the dialog form. Each property is mapped to a form parameter.<br /> </p> 
  <p>The following configuration adds a parameter called <span class="code">name</span>, set with the value <span class="code">photos/primary</span> to the dialog form:<br /> </p> 
  <codeblock gutter="true" class="syntax js">
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:formParameters!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="nt:unstructured"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="photos/primary"/&gt; 
  </codeblock> 
  <h3>cq:inplaceEditing</h3> 
  <p>The <span class="code">cq:inplaceEditing</span> node (node type <span class="code">cq:InplaceEditingConfig</span>) defines an inplace editing configuration for the component. It can have the following properties:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Name</strong></td> 
     <td style="text-align: center;"><strong>Property Value<br /> </strong></td> 
    </tr> 
    <tr> 
     <td><span class="code">active</span></td> 
     <td>(<span class="code">boolean</span>) True to enable the inplace editing of the component.</td> 
    </tr> 
    <tr> 
     <td><span class="code">configPath</span></td> 
     <td>(<span class="code">String</span>) Path of the editor configuration. The configuration can be specified by a configuration node.</td> 
    </tr> 
    <tr> 
     <td><span class="code">editorType</span></td> 
     <td><p>(<span class="code">String</span>) Editor type. The available types are:</p> 
      <ul> 
       <li>plaintext: to be used for non HTML content.<br /> </li> 
       <li>title: is an enhanced plaintext editor that converts graphical titles into a plaintext before editing begins. Used by the Geometrixx title component.<br /> </li> 
       <li>text: to be used for HTML content (uses the Rich Text Editor).<br /> </li> 
      </ul> </td> 
    </tr> 
   </tbody> 
  </table> 
  <p>The following configuration enables the inplace editing of the component and defines <span class="code">plaintext</span> as the editor type: </p> 
  <codeblock gutter="true" class="syntax js">
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:inplaceEditing!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:InplaceEditingConfig"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;active="{Boolean}true"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;editorType="plaintext"/&gt; 
  </codeblock> 
  <h3>cq:listeners</h3> 
  <p>The <span class="code">cq:listeners</span> node (node type <span class="code">cq:EditListenersConfig</span>) defines what happens before or after an action on the component. The following table defines its possible properties.<br /> </p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td style="text-align: center;"><strong>Property Name</strong></td> 
     <td style="text-align: center;"><strong>Property Value<br /> </strong></td> 
     <td style="text-align: center;"><p><strong>Default Value</strong></p> <p>(Classic UI Only)</p> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforedelete</span></td> 
     <td>The handler is triggered before the component is removed.<br /> </td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforeedit</span></td> 
     <td>The handler is triggered before the component is edited.</td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforecopy</span></td> 
     <td>The handler is triggered before the component is copied.</td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforemove</span></td> 
     <td>The handler is triggered before the component is moved.</td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforeinsert</span></td> 
     <td>The handler is triggered before the component is inserted.<br /> Only operational for the touch-enabled UI.</td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">beforechildinsert</span></td> 
     <td>The handler is triggered before the component is inserted inside another component (containers only).</td> 
     <td> </td> 
    </tr> 
    <tr> 
     <td><span class="code">afterdelete</span></td> 
     <td>The handler is triggered after the component is removed.</td> 
     <td><span class="code">REFRESH_SELF</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">afteredit</span></td> 
     <td>The handler is triggered after the component is edited.</td> 
     <td><span class="code">REFRESH_SELF</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">aftercopy</span></td> 
     <td>The handler is triggered after the component is copied.</td> 
     <td><span class="code">REFRESH_SELF</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">afterinsert</span></td> 
     <td>The handler is triggered after the component is inserted.</td> 
     <td><span class="code">REFRESH_INSERTED</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">aftermove</span></td> 
     <td>The handler is triggered after the component is moved.</td> 
     <td><span class="code">REFRESH_SELFMOVED</span></td> 
    </tr> 
    <tr> 
     <td><span class="code">afterchildinsert</span></td> 
     <td>The handler is triggered after the component is inserted inside another component (containers only).</td> 
     <td> </td> 
    </tr> 
   </tbody> 
  </table> 
  <note> 
   <p>The <span class="code">REFRESH_INSERTED</span> and <span class="code">REFRESH_SELFMOVED</span> handlers are only available in the classic UI.</p> 
  </note> 
  <note> 
   <p>Default values for the listeners are only set in the classic UI.</p> 
  </note> 
  <note> 
   <p>In the case of nested components there are certain restrictions on actions defined as properties on the <span class="code">cq:listeners</span> node:<br /> </p> 
   <ul> 
    <li>For nested components, the values of the following properties <i>must</i> be <span class="code">REFRESH_PAGE</span>: 
     <ul> 
      <li><span class="code">aftermove</span><br /> </li> 
      <li><span class="code">aftercopy</span> <span class="code"></span><br /> </li> 
     </ul> </li> 
   </ul> 
  </note> 
  <p>The event handler can be implemented with a custom implementation. For example (where <span class="code">project.customerAction</span> is a static method):</p> 
  <p style="margin-left: 40px;"><span class="code">afteredit = "project.customerAction"</span></p> 
  <p>The following example is equivalent to the <span class="code">REFRESH_INSERTED</span> configuration:</p> 
  <p style="margin-left: 40px;"><span class="code">afterinsert="function(path, definition) { this.refreshCreated(path, definition); }"</span><br /> </p> 
  <note> 
   <p>For the classic UI, to see which parameters can be used in the handlers, refer to the <span class="code">before&amp;lt;action&amp;gt;</span> and <span class="code">after&amp;lt;action&amp;gt;</span> events section of the <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.wcm.EditBar"><span class="code">CQ.wcm.EditBar</span></a> and <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.wcm.EditRollover"><span class="code">CQ.wcm.EditRollover</span></a> widget documentation.<br /> </p> 
  </note> 
  <p>With the following configuration the page is refreshed after the component has been deleted, edited, inserted or moved:</p> 
  <codeblock gutter="true" class="syntax js">
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:listeners!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:primaryType="cq:EditListenersConfig"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterdelete="REFRESH_PAGE"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afteredit="REFRESH_PAGE"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterinsert="REFRESH_PAGE"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;afterMove="REFRESH_PAGE"/&gt; 
  </codeblock> 
 </body> 
</html>