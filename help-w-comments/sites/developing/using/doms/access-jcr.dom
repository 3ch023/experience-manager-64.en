<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform;/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform" name="moreHelpPaths" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="be16a396-cf99-487b-9fd2-4b8e13c5af55" name="jcr:predecessors" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/access-jcr.html" name="publishExternalURL" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="/content/docs/en/aem/6-3/develop/platform/access-jcr" name="qaNotes" /> 
  <meta content="2018-01-18T11:18:00.420-0500" name="publishExternalDate" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2018-01-18T11:18:00.420-0500" name="lastPublishExternalDate" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="You can programmatically modify nodes and properties located within the AEM repository, which is part of the Adobe Marketing Cloud" name="seoDescription" /> 
  <meta content="2018-05-08T12:40:15.056-0400" name="cq:lastModified" /> 
  <meta content="2017-10-31T16:17:28.314-0400" name="firstPublishExternalDate" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2018-01-19T19:05:58.731-0500" name="jcr:created" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:platform;content_type:reference" name="cq:tags" /> 
  <meta content="How to programmatically access the AEM JCR" name="seoTitle" /> 
  <meta content="2018-05-08T12:40:15.055-0400" name="locHandOffDate" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2018-04-03T09:00:00.607-0400" name="cq:lastReplicated" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="How to programmatically access the AEM JCR" name="navTitle" /> 
  <meta content="2018-01-18T11:18:00.420-0500" name="topicBrowsingSortDate" /> 
  <meta content="How to programmatically access the AEM JCR" name="jcr:title" /> 
  <meta content="5b29b950-68b1-485c-b18e-523f72fab4e5" name="jcr:uuid" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
 </head> 
 <body> 
  <p>You can programmatically modify nodes and properties located within the Adobe CQ repository, which is part of the Adobe Marketing Cloud. To access the CQ repository, you use the Java Content Repository (JCR) API. You can use the Java JCR API to perform create, replace, update, and delete (CRUD) operations on content located within the Adobe CQ repository. For more information about the Java JCR API, see <a href="http://jackrabbit.apache.org/jcr/jcr-api.html">http://jackrabbit.apache.org/jcr/jcr-api.html</a>.</p> 
  <note> 
   <p>This development article modifies the Adobe CQ JCR from an external Java application. In contrast, you can modify the JCR from within an OSGi bundle using the JCR API. For details, see <a href="/content/help/en/experience-manager/using/persisting-cq-data-java-content1">Persisting CQ data in the Java Content Repository</a>.</p> 
  </note> 
  <note> 
   <p>To use the JCR API, add the jackrabbit-standalone-2.4.0.jar file to your Java application’s class path. You can obtain this JAR file from the Java JCR API web page at <a href="http://jackrabbit.apache.org/jcr/jcr-api.html">http://jackrabbit.apache.org/jcr/jcr-api.html</a>.</p> 
  </note> 
  <note> 
   <p>To learn how to query the Adobe CQ JCR using the JCR Query API, see <a href="/content/help/en/experience-manager/using/querying-experience-manager-data-using1">Querying Adobe Experience Manager Data using the JCR API</a>.</p> 
  </note> 
  <h2>Create a Repository instance</h2> 
  <p>Although there are different ways to connect to a repository and establish a connection, this development article uses a static method that belongs to the <span class="code">org.apache.jackrabbit.commons.JcrUtils</span> class. The name of the method is <span class="code">getRepository</span>. This method takes a string parameter that represents the URL of the Adobe CQ server. For example http://localhost:4503/crx/server.</p> 
  <p>The <span class="code">getRepository </span>method returns a <span class="code">Repository </span>instance, as shown in the following code example.</p> 
  <codeblock class="syntax java">
    //Create&amp;nbsp;a&amp;nbsp;connection&amp;nbsp;to&amp;nbsp;the&amp;nbsp;AEM&amp;nbsp;JCR&amp;nbsp;repository&amp;nbsp;running&amp;nbsp;on&amp;nbsp;local&amp;nbsp;host!!discoiqbr!!Repository&amp;nbsp;repository&amp;nbsp;=&amp;nbsp;JcrUtils.getRepository("http://localhost:4503/crx/server"); 
  </codeblock> 
  <h2>Create a Session instance</h2> 
  <p>The <span class="code">Repository </span>instance represents the CRX repository. You use the <span class="code">Repository </span>instance to establish a session with the repository. To create a session, invoke the <span class="code">Repository </span>instance’s <span class="code">login </span>method and pass a <span class="code">javax.jcr.SimpleCredentials</span> object. The <span class="code">login </span>method returns a <span class="code">javax.jcr.Session</span> instance.</p> 
  <p>You create a <span class="code">SimpleCredentials </span>object by using its constructor and passing the following string values:<br /> </p> 
  <ul> 
   <li>The user name;</li> 
   <li>The corresponding password</li> 
  </ul> 
  <p>When passing the second parameter, call the String object’s <span class="code">toCharArray </span>method. The following code shows how to call the <span class="code">login </span>method that returns a <span class="code">javax.jcr.Sessioninstance</span>.</p> 
  <codeblock class="syntax java">
    //Create&amp;nbsp;a&amp;nbsp;Session&amp;nbsp;instance!!discoiqbr!!javax.jcr.Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;repository.login(&amp;nbsp;new&amp;nbsp;SimpleCredentials("admin",&amp;nbsp;"admin".toCharArray())); 
  </codeblock> 
  <h2>Create a Node instance</h2> 
  <p>Use a <span class="code">Session </span>instance to create a <span class="code">javax.jcr.Node</span> instance. A <span class="code">Node </span>instance lets you perform node operations. For example, you can create a new node. To create a node that represents the root node, invoke the <span class="code">Session </span>instance's <span class="code">getRootNode</span> method, as shown in the following line of code.</p> 
  <codeblock class="syntax java">
    //Create&amp;nbsp;a&amp;nbsp;Node!!discoiqbr!!Node&amp;nbsp;root&amp;nbsp;=&amp;nbsp;session.getRootNode(); 
  </codeblock> 
  <p>Once you create a <span class="code">Node </span>instance, you can perform tasks such as creating another node and adding a value to it. For example, the following code creates two nodes and adds a value to the second node.</p> 
  <codeblock class="syntax java">
    //&amp;nbsp;Store&amp;nbsp;content&amp;nbsp;!!discoiqbr!!Node&amp;nbsp;day&amp;nbsp;=&amp;nbsp;adobe.addNode("day");!!discoiqbr!!day.setProperty("message",&amp;nbsp;"Adobe&amp;nbsp;CQ&amp;nbsp;is&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Adobe&amp;nbsp;Digital&amp;nbsp;Marketing&amp;nbsp;Suite!"); 
  </codeblock> 
  <h2>Retrieve Node Values</h2> 
  <p>To retrieve a node and its value, invoke the <span class="code">Node </span>instance’s <span class="code">getNode </span>method and pass a string value that represents the fully-qualified path to the node. Consider the node structure created in the previous code example. To retrieve the day node, specify adobe/day, as shown in the following code:</p> 
  <codeblock class="syntax java">
    //&amp;nbsp;Retrieve&amp;nbsp;content!!discoiqbr!!Node&amp;nbsp;node&amp;nbsp;=&amp;nbsp;root.getNode("adobe/day");!!discoiqbr!!System.out.println(node.getPath());!!discoiqbr!!System.out.println(node.getProperty("message").getString());!!discoiqbr!! 
  </codeblock> 
  <h2>Create nodes in the Adobe CQ Repository</h2> 
  <p>The following Java code example represents a Java class that connects to Adobe CQ, creates a <span class="code">Session </span>instance, and adds new nodes. A node is assigned a data value and then the value of the node and its path is written out to the console. When you are done with the Session, be sure to log out. </p> 
  <codeblock class="syntax java">
    /*!!discoiqbr!!&amp;nbsp;*&amp;nbsp;This&amp;nbsp;Java&amp;nbsp;Quick&amp;nbsp;Start&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;jackrabbit-standalone-2.4.0.jar!!discoiqbr!!&amp;nbsp;*&amp;nbsp;file.&amp;nbsp;See&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;section&amp;nbsp;for&amp;nbsp;the&amp;nbsp;location&amp;nbsp;of&amp;nbsp;this&amp;nbsp;JAR&amp;nbsp;file!!discoiqbr!!&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.Repository;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.Session;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.SimpleCredentials;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.Node;&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!import&amp;nbsp;org.apache.jackrabbit.commons.JcrUtils;!!discoiqbr!!import&amp;nbsp;org.apache.jackrabbit.core.TransientRepository;&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;GetRepository&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!try&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;connection&amp;nbsp;to&amp;nbsp;the&amp;nbsp;CQ&amp;nbsp;repository&amp;nbsp;running&amp;nbsp;on&amp;nbsp;local&amp;nbsp;host&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository&amp;nbsp;repository&amp;nbsp;=&amp;nbsp;JcrUtils.getRepository("http://localhost:4503/crx/server");!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;Session!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;javax.jcr.Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;repository.login(&amp;nbsp;new&amp;nbsp;SimpleCredentials("admin",&amp;nbsp;"admin".toCharArray()));&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;node&amp;nbsp;that&amp;nbsp;represents&amp;nbsp;the&amp;nbsp;root&amp;nbsp;node!!discoiqbr!!&amp;nbsp;&amp;nbsp;Node&amp;nbsp;root&amp;nbsp;=&amp;nbsp;session.getRootNode();&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;Store&amp;nbsp;content&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;Node&amp;nbsp;adobe&amp;nbsp;=&amp;nbsp;root.addNode("adobe");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;Node&amp;nbsp;day&amp;nbsp;=&amp;nbsp;adobe.addNode("day");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;day.setProperty("message",&amp;nbsp;"Adobe&amp;nbsp;CQ&amp;nbsp;is&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Adobe&amp;nbsp;Digital&amp;nbsp;Marketing&amp;nbsp;Suite!");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;Retrieve&amp;nbsp;content&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;Node&amp;nbsp;node&amp;nbsp;=&amp;nbsp;root.getNode("adobe/day");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;System.out.println(node.getPath());&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;System.out.println(node.getProperty("message").getString());&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;Save&amp;nbsp;the&amp;nbsp;session&amp;nbsp;changes&amp;nbsp;and&amp;nbsp;log&amp;nbsp;out!!discoiqbr!!&amp;nbsp;&amp;nbsp;session.save();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;session.logout();!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;catch(Exception&amp;nbsp;e){!!discoiqbr!!&amp;nbsp;&amp;nbsp;e.printStackTrace();!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;}&amp;nbsp;!!discoiqbr!!} 
  </codeblock> 
  <p>After you run the full code example and create the nodes, you can view the new nodes in the CRXDE Lite, as shown in the following illustration.</p> 
  <img imageRotate="0" src="assets/chlimage_1-78.png" /> 
 </body> 
</html>