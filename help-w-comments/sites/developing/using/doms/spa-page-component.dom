<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="SPA Page Component" name="jcr:title" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="gknob" name="cq:lastModifiedBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="2018-12-11T04:52:27.892-0500" name="cq:lastReplicated" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/spa;/content/help/en/experience-manager/6-4/sites/developing/morehelp/spa" name="moreHelpPaths" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:spa;content_type:reference" name="cq:tags" /> 
  <meta content="bohnert" name="contentOwner" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="In an SPA the page component doesn't provide the HTML elements of its child components, but instead delegates this to the SPA framework. This document explains how this makes the page component of an SPA unique." name="seoDescription" /> 
  <meta content="2018-12-11T04:52:27.274-0500" name="cq:lastModified" /> 
  <meta content="2018-09-07T12:31:18.858-0400" name="firstPublishExternalDate" /> 
  <meta content="2018-12-11T04:52:27.258-0500" name="topicBrowsingSortDate" /> 
  <meta content="2018-12-11T04:52:27.258-0500" name="lastPublishExternalDate" /> 
  <meta content="7b405d5d-6146-4351-b69e-991442a616bb" name="jcr:predecessors" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="b48adcf9-0763-47fa-83f4-ff4a632fc894" name="jcr:uuid" /> 
  <meta content="en" name="pageCreatedAt" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/spa-page-component.html" name="publishExternalURL" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="bohnert" name="cq:lastReplicatedBy" /> 
  <meta content="2018-06-27T07:29:18.695-0400" name="jcr:created" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2018-12-11T04:52:27.258-0500" name="publishExternalDate" /> 
 </head> 
 <body> 
  <p>In an SPA the page component doesn't provide the HTML elements of its child components, but instead delegates this to the SPA framework. This document explains how this makes the page component of an SPA unique.<br /> </p> 
  <h2>Introduction</h2> 
  <p>The page component for an SPA doesn't provide the HTML elements of its child components via a JSP or HTL file and resource objects. This operation is delegated to the SPA framework. The representation of child components is fetched as a JSON data structure (i.e. the model). The SPA components are then added to the page according to the provided JSON model. As such the page component initial body composition differs from its pre-rendered HTML counterparts.</p> 
  <h2>Page Model Management</h2> 
  <p>The resolution and the management of the page model is delegated to a provided <a href="../../../sites/developing/using/spa-blueprint.md#main-pars-header-249430796"><span class="code">PageModelManager</span></a> module. The SPA must interact with the <span class="code">PageModelManager</span> module when it initializes to fetch the initial page model and register for model updates - mostly produced when the author is editing the page via the Page Editor. The <span class="code">PageModelManager</span> is accessible by SPA project as a npm package. Being an interpreter between AEM and the SPA, the <span class="code">PageModelManager</span> is meant to accompany the SPA.</p> 
  <p>To allow the page to be authored, a client library named <span class="code">cq.authoring.pagemodel.messaging</span> must be added to provide a communication channel between the SPA and the page editor. If the SPA page component inherits from the page wcm/core component then there are the following options to make the <span class="code">cq.authoring.pagemodel.messaging</span> client library category available:</p> 
  <ul> 
   <li>If the template is editable, add the client library category to the page policy.</li> 
   <li>Add the client library category using the <span class="code">customfooterlibs.html</span> of the page component.</li> 
  </ul> 
  <p>Don't forget to limit the inclusion of the <span class="code">cq.authoring.pagemodel.messaging</span> category to the context of the page editor.</p> 
  <h2>Communication Data Type</h2> 
  <p>The communication data type is set an HTML element inside the AEM Page component using the <span class="code">data-cq-datatype</span> attribute. When the communication data type is set to JSON, the GET requests hit the Sling Model endpoints of a component. After an update occurs in the page editor, the JSON representation of the updated component is sent to the Page Model library. The Page Model library then warns the SPA of updates.</p> 
  <p><strong>SPA Page Component - <span class="code">body.html</span></strong></p> 
  <codeblock class="syntax js">
    &lt;div&amp;nbsp;id="page"&gt;&lt;/div&gt; 
  </codeblock> 
  <p>In addition to being good practice not to delay the DOM generation, the SPA framework requires the scripts to be added at the end of the body.</p> 
  <p><strong>SPA Page Component -<span class="code"> customfooterlibs.html</span></strong></p> 
  <codeblock class="syntax js">
    &lt;sly&amp;nbsp;data-sly-use.clientLib="${'/libs/granite/sightly/templates/clientlib.html'}"&gt;&lt;/sly&gt;!!discoiqbr!!&lt;sly&amp;nbsp;data-sly-test="${wcmmode.edit&amp;nbsp;||&amp;nbsp;wcmmode.preview}"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data-sly-call="${clientLib.js&amp;nbsp;@&amp;nbsp;categories='cq.authoring.pagemodel.messaging'}"&gt;&lt;/sly&gt;!!discoiqbr!!&lt;sly&amp;nbsp;data-sly-call="${clientLib.js&amp;nbsp;@&amp;nbsp;categories='we-retail-journal-react'}"&gt;&lt;/sly&gt; 
  </codeblock> 
  <p>The meta resource properties that describe the SPA content:</p> 
  <p><strong>SPA Page Component - <span class="code">customheaderlibs.html</span></strong></p> 
  <codeblock class="syntax js">
    &lt;meta&amp;nbsp;property="cq:datatype"&amp;nbsp;data-sly-test="${wcmmode.edit&amp;nbsp;||&amp;nbsp;wcmmode.preview}"&amp;nbsp;content="JSON"/&gt;!!discoiqbr!!&lt;meta&amp;nbsp;property="cq:wcmmode"&amp;nbsp;data-sly-test="${wcmmode.edit}"&amp;nbsp;content="edit"/&gt;!!discoiqbr!!&lt;meta&amp;nbsp;property="cq:wcmmode"&amp;nbsp;data-sly-test="${wcmmode.preview}"&amp;nbsp;content="preview"/&gt;!!discoiqbr!!&lt;meta&amp;nbsp;property="cq:pagemodel_root_url"&amp;nbsp;data-sly-use.page="com.adobe.cq.sample.spa.journal.models.AppPage"&amp;nbsp;content="${page.rootUrl}"/&gt;!!discoiqbr!!&lt;sly&amp;nbsp;data-sly-use.clientlib="/libs/granite/sightly/templates/clientlib.html"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;sly&amp;nbsp;data-sly-call="${clientlib.css&amp;nbsp;@&amp;nbsp;categories='we-retail-journal-react'}"/&gt;!!discoiqbr!!&lt;/sly&gt; 
  </codeblock> 
  <note> 
   <p>The default model selector is statically set when requesting the Sling Model representation of a component.<br /> </p> 
  </note> 
  <h2>Meta Properties</h2> 
  <ul> 
   <li><span class="code">cq:wcmmode</span>: WCM mode of the editors (e.g. page, template)</li> 
   <li><span class="code">cq:pagemodel_root_url</span>: URL of the root model of the App. Crucial when directly accessing a child page since the child page model is a fragment of the app root model. The <span class="code"><a href="../../../sites/developing/using/spa-page-component.md">PageModelManager</a></span> then systematically recomposes the application initial model as entering the application from its root entry point.</li> 
   <li><span class="code">cq:pagemodel_router</span>: Enable or disable the <span class="code"><a href="../../../sites/developing/using/spa-routing.md">ModelRouter</a></span> of the <span class="code">PageModelManager</span> library</li> 
   <li><span class="code">cq:pagemodel_route_filters</span>: Comma separated list or regular expressions to provide routes the <span class="code"><a href="../../../sites/developing/using/spa-routing.md">ModelRouter</a></span> must ignore.</li> 
  </ul> 
  <h2>Page Editor Overlay Synchronization</h2> 
  <p>The synchronization of the overlays is guaranteed by the very same Mutation Observer provided by the <span class="code">cq.authoring.page</span> category.</p> 
  <h2>Sling Model JSON Exported Structure Configuration</h2> 
  <p>When the routing capabilities are enabled, the assumption is that the JSON export of the SPA contains the different routes of the application thanks to the JSON export of the AEM navigation component. The JSON output of the AEM navigation component can be configured in the SPA's root page content policy through the following two properties:</p> 
  <ul> 
   <li><span class="code">structureDepth</span>: Number corresponding to the depth of the tree exported</li> 
   <li><span class="code">structurePatterns</span>: Regex of array of regexes corresponding to the page to be exported</li> 
  </ul> 
  <p>This can be shown in the SPA sample content in <span class="code">/conf/we-retail-journal/react/settings/wcm/policies/we-retail-journal/react/components/structure/page/root</span>.</p> 
 </body> 
</html>