<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-10-31T16:16:31.061-0400" name="firstPublishExternalDate" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="Implementing a Custom Predicate Evaluator for the Query Builder" name="seoTitle" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/implementing-custom-predicate-evaluator.html" name="publishExternalURL" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2019-02-06T10:12:57.638-0500" name="cq:lastModified" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="Implementing a Custom Predicate Evaluator for the Query Builder" name="navTitle" /> 
  <meta content="2017-11-01T05:14:04.906-0400" name="publishExternalDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="7078924a-659b-4eda-9024-8ea9840b9f7f" name="jcr:uuid" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2017-11-01T05:14:04.906-0400" name="lastPublishExternalDate" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2018-04-03T09:00:57.759-0400" name="cq:lastReplicated" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:platform;content_type:reference" name="cq:tags" /> 
  <meta content="Implementing a Custom Predicate Evaluator for the Query Builder" name="jcr:title" /> 
  <meta content="/content/docs/en/aem/6-3/develop/search/implementing-custom-predicate-evaluator" name="qaNotes" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="bohnert" name="cq:lastModifiedBy" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform;/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform" name="moreHelpPaths" /> 
  <meta content="2017-12-01T19:04:39.019-0500" name="jcr:created" /> 
  <meta content="The Query Builder offers an easy way of querying the content repository" name="seoDescription" /> 
  <meta content="2018-05-08T12:44:08.588-0400" name="locHandOffDate" /> 
  <meta content="2017-11-01T05:14:04.906-0400" name="topicBrowsingSortDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="19c970ed-875c-4861-8e06-08a48ad42620" name="jcr:predecessors" /> 
 </head> 
 <body> 
  <p>This section describes how to extend the <a href="../../../sites/developing/using/querybuilder-api.md">Query Builder</a> by implementing a custom predicate evaluator.</p> 
  <draft-comment color="blue" lastModifiedBy="colligno@adobe.com" lastModifiedDate="2017-11-30T05:25:04.926-0500" type="remark"> 
   <p>Documentation tracked under : <a href="https://issues.adobe.com/browse/DOC-2391">https://issues.adobe.com/browse/DOC-2391</a></p> 
  </draft-comment> 
  <h3>Overview</h3> 
  <p>The <a href="../../../sites/developing/using/querybuilder-api.md">Query Builder</a> offers an easy way of querying the content repository. CQ ships with a set of predicate evaluators that helps you deal with your data.</p> 
  <p>However you might want to simplify your queries by implementing a custom predicate evaluator that hides some complexity and ensures a better semantic.</p> 
  <p>A custom predicate could also perform other things not directly possible with XPath, for example:</p> 
  <ul> 
   <li>looking up some data from some service</li> 
   <li>custom filtering based on calculation<br /> </li> 
  </ul> 
  <note> 
   <p>Performance issues must be considered when implementing a custom predicate.<br /> </p> 
  </note> 
  <note> 
   <p>You can find examples of queries in the <a href="../../../sites/developing/using/querybuilder-api.md">Query Builder</a> section.</p> 
  </note> 
  <p>CODE ON GITHUB</p> 
  <p>You can find the code of this page on GitHub</p> 
  <ul> 
   <li><a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator">Open aem-search-custom-predicate-evaluator project on GitHub</a></li> 
   <li>Download the project as <a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator/archive/master.zip">a ZIP file</a></li> 
  </ul> 
  <h3>Predicate Evaluator in Detail</h3> 
  <p>A predicate evaluator handles the evaluation of certain predicates, which are the defining constraints of a query.</p> 
  <p>It maps a higher-level search constraint (such as "width &amp;gt; 200") to a specific JCR query that fits the actual content model (e.g. metadata/@width &amp;gt; 200). Or it can manually filter nodes and check their constraints.</p> 
  <note> 
   <p>For more information about the <span class="code">PredicateEvaluator</span> and the <span class="code">com.day.cq.search</span> package see the <a href="/sites/developing/using/reference-materials/javadoc/index.html?com/day/cq/search/package-summary">Java documentation</a>.</p> 
  </note> 
  <h3>Implementing a Custom Predicate Evaluator for Replication Metadata</h3> 
  <p>As an example this section describes how to create a custom predicate evaluator that helps data based on the replication metadata:</p> 
  <ul> 
   <li><span class="code">cq:lastReplicated</span> that stores the date of the last replication action<br /> </li> 
   <li><span class="code">cq:lastReplicatedBy</span> that stores the id of the user who triggered the last replication action<br /> </li> 
   <li><span class="code">cq:lastReplicationAction</span> that stores the last replication action (e.g. Activation, Deactivation)</li> 
  </ul> 
  <h4>Querying Replication Metadata with Default Predicate Evaluators</h4> 
  <p>The following query fetches the list of nodes in <span class="code">/content</span> branch that have been activated by <span class="code">admin</span> since the beginning of the year.</p> 
  <codeblock gutter="true" class="syntax xml">
    path=/content!!discoiqbr!!!!discoiqbr!!1_property=cq:lastReplicatedBy!!discoiqbr!!1_property.value=admin!!discoiqbr!!!!discoiqbr!!2_property=cq:lastReplicationAction!!discoiqbr!!2_property.value=Activate!!discoiqbr!!!!discoiqbr!!daterange.property=cq:lastReplicated!!discoiqbr!!daterange.lowerBound=2013-01-01T00:00:00.000+01:00!!discoiqbr!!daterange.lowerOperation=&gt;=!!discoiqbr!! 
  </codeblock> 
  <p>This query is valid but hard to read and does not highlight the relationship between the three replication properties. Implementing a custom predicate evaluator will reduce the complexity and improve the semantic of this query.<br /> </p> 
  <h4>Objectives</h4> 
  <p>The goal of the <span class="code">ReplicationPredicateEvaluator</span> is to support the above query using the following syntax.<br /> </p> 
  <codeblock gutter="true" class="syntax xml">
    path=/content!!discoiqbr!!!!discoiqbr!!replic.by=admin!!discoiqbr!!replic.since=2013-01-01T00:00:00.000+01:00!!discoiqbr!!replic.action=Activate 
  </codeblock> 
  <p>Grouping replication metadata predicates with a custom predicate evaluator helps to create a meaningful query.<br /> </p> 
  <h4>Updating Maven Dependencies</h4> 
  <note> 
   <p>The set up of new AEM projects using maven is documented by <a href="../../../sites/developing/using/ht-projects-maven.md">How to Build AEM Projects using Apache Maven</a>.</p> 
  </note> 
  <p>First you need to update the Maven dependencies of your project. The <span class="code">PredicateEvaluator</span> is part of the <span class="code">cq-search</span> artifact so it needs to be added to your Maven pom file.</p> 
  <note> 
   <p>The scope of the <span class="code">cq-search</span> dependency is set to <span class="code">provided</span> because <span class="code">cq-search</span> will be provided by the <span class="code">OSGi</span> container.<br /> </p> 
  </note> 
  <p>pom.xml</p> 
  <p>The following snippet shows the differences, in <a href="https://en.wikipedia.org/wiki/Diff#Unified_format">unified diff format</a></p> 
  <p> </p> 
  <table border="0" cellpadding="0" cellspacing="0"> 
   <tbody> 
    <tr> 
     <td><p> </p> <p><span class="code">@@ -120,6 +120,12 @@</span></p> <p><span class="code"> &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;</span></p> <p><span class="code"> </span></p> <p><span class="code"> &amp;lt;dependency&amp;gt;</span></p> <p><span class="code">+ &amp;lt;groupid&amp;gt;com.day.cq&amp;lt;/groupid&amp;gt;</span></p> <p><span class="code">+ &amp;lt;artifactid&amp;gt;cq-search&amp;lt;/artifactid&amp;gt;</span></p> <p><span class="code">+ &amp;lt;version&amp;gt;5.6.4&amp;lt;/version&amp;gt;</span></p> <p><span class="code">+ &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;</span></p> <p><span class="code">+ &amp;lt;/dependency&amp;gt;</span></p> <p><span class="code">+ &amp;lt;dependency&amp;gt;</span></p> <p><span class="code"> &amp;lt;groupid&amp;gt;junit&amp;lt;/groupid&amp;gt;</span></p> <p><span class="code"> &amp;lt;artifactid&amp;gt;junit&amp;lt;/artifactid&amp;gt;</span></p> <p><span class="code"> &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;</span></p> <p> </p> </td> 
    </tr> 
   </tbody> 
  </table> 
  <p> </p> 
  <p><a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator">aem-search-custom-predicate-evaluator </a>- <a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator/raw/7aed6b35b4c8dd3655296e1b10cf40c0dd1eaa61/pom.xml">pom.xml</a></p> 
  <h4>Writing The ReplicationPredicateEvaluator</h4> 
  <p>The <span class="code">cq-search</span> project contains the <span class="code">AbstractPredicateEvaluator</span> abstract class. This can be extended with a few steps to implement your own custom predicate evaluator<span class="code">(PredicateEvaluator</span>).</p> 
  <note> 
   <p>The following procedure explains how to build an <span class="code">Xpath</span> expression to filter data. Another option would be to implement the <span class="code">includes</span> method that selects data on a row basis. See the <a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/search/eval/PredicateEvaluator#includes28comdaycqsearchPredicatejavaxjcrqueryRowcomdaycqsearchevalEvaluationContext29">Java documentation</a> for more information.<br /> </p> 
  </note> 
  <ol> 
   <li><p>Create a new Java class which extends <span class="code">com.day.cq.search.eval.AbstractPredicateEvaluator</span></p> </li> 
   <li><p>Annotate your class with a <span class="code">@Component</span> like the following</p> <p>src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java</p> <p>The following snippet shows the differences, in <a href="https://en.wikipedia.org/wiki/Diff#Unified_format">unified diff format</a></p>  
    <table border="0" cellpadding="0" cellspacing="0"> 
     <tbody> 
      <tr> 
       <td><p> </p> <p><span class="code">@@ -19,8 +19,11 @@</span></p> <p><span class="code"> */</span></p> <p><span class="code"> package com.adobe.aem.docs.search;</span></p> <p><span class="code"> </span></p> <p><span class="code">+import org.apache.felix.scr.annotations.Component;</span></p> <p><span class="code">+</span></p> <p><span class="code"> import com.day.cq.search.eval.AbstractPredicateEvaluator;</span></p> <p><span class="code"> </span></p> <p><span class="code">+@Component(metatype = false, factory = "com.day.cq.search.eval.PredicateEvaluator/repli")</span></p> <p><span class="code"> public class ReplicationPredicateEvaluator extends AbstractPredicateEvaluator {</span></p> <p><span class="code"> </span></p> <p><span class="code"> }</span></p> <p> </p> </td> 
      </tr> 
     </tbody> 
    </table>  <p><a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator">aem-search-custom-predicate-evaluator </a>- <a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator/raw/ec70fac35fbd0d132e00c6066a204804e9cbe70f/src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java">src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java</a></p> 
    <note> 
     <p>The <span class="code">factory </span>must be a unique string starting with <span class="code">com.day.cq.search.eval.PredicateEvaluator/ </span>and ending with the name of your custom <span class="code">PredicateEvaluator</span>.</p> 
    </note> 
    <note> 
     <p>The name of the <span class="code">PredicateEvaluator</span> is the predicate name, which is used when building queries.</p> 
    </note></li> 
   <li><p>Override:</p> 
    <codeblock class="syntax java">
      public&amp;nbsp;String&amp;nbsp;getXPathExpression(Predicate&amp;nbsp;predicate,&amp;nbsp;EvaluationContext&amp;nbsp;context) 
    </codeblock><p>In the override method you build a <span class="code">Xpath</span> expression based on the <span class="code">Predicate</span> given in argument.</p> </li> 
  </ol> 
  <h3>Example of a Custom Predicate Evalutor for Replication Metadata</h3> 
  <p>The complete implementation of this <span class="code">PredicateEvaluator</span> might be similar to the following class.<br /> </p> 
  <p>src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java</p> 
  <p> </p> 
  <table border="0" cellpadding="0" cellspacing="0"> 
   <tbody> 
    <tr> 
     <td><p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> <p>6</p> <p>7</p> <p>8</p> <p>9</p> <p>10</p> <p>11</p> <p>12</p> <p>13</p> <p>14</p> <p>15</p> <p>16</p> <p>17</p> <p>18</p> <p>19</p> <p>20</p> <p>21</p> <p>22</p> <p>23</p> <p>24</p> <p>25</p> <p>26</p> <p>27</p> <p>28</p> <p>29</p> <p>30</p> <p>31</p> <p>32</p> <p>33</p> <p>34</p> <p>35</p> <p>36</p> <p>37</p> <p>38</p> <p>39</p> <p>40</p> <p>41</p> <p>42</p> <p>43</p> <p>44</p> <p>45</p> <p>46</p> <p>47</p> <p>48</p> <p>49</p> <p>50</p> <p>51</p> <p>52</p> <p>53</p> <p>54</p> <p>55</p> <p>56</p> <p>57</p> <p>58</p> <p>59</p> <p>60</p> <p>61</p> <p>62</p> <p>63</p> <p>64</p> <p>65</p> <p>66</p> <p>67</p> <p>68</p> <p>69</p> <p>70</p> <p>71</p> <p>72</p> <p>73</p> <p>74</p> <p>75</p> <p>76</p> <p>77</p> <p>78</p> <p>79</p> <p>80</p> <p>81</p> <p>82</p> <p>83</p> <p>84</p> <p>85</p> <p>86</p> <p>87</p> <p>88</p> <p>89</p> <p>90</p> <p>91</p> <p>92</p> <p>93</p> <p>94</p> </td> 
     <td><p> </p> <p><span class="code">/*</span></p> <p><span class="code"> * #%L</span></p> <p><span class="code"> * aem-docs-custom-predicate-evaluator</span></p> <p><span class="code"> * %%</span></p> <p><span class="code"> * Copyright (C) 2013 Adobe Research</span></p> <p><span class="code"> * %%</span></p> <p><span class="code"> * Licensed under the Apache License, Version 2.0 (the "License");</span></p> <p><span class="code"> * you may not use this file except in compliance with the License.</span></p> <p><span class="code"> * You may obtain a copy of the License at</span></p> <p><span class="code"> *</span></p> <p><span class="code"> * <a href="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</a></span></p> <p><span class="code"> *</span></p> <p><span class="code"> * Unless required by applicable law or agreed to in writing, software</span></p> <p><span class="code"> * distributed under the License is distributed on an "AS IS" BASIS,</span></p> <p><span class="code"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></p> <p><span class="code"> * See the License for the specific language governing permissions and</span></p> <p><span class="code"> * limitations under the License.</span></p> <p><span class="code"> * #L%</span></p> <p><span class="code"> */</span></p> <p><span class="code">package com.adobe.aem.docs.search;</span></p> <p><span class="code"> </span></p> <p><span class="code">import org.apache.felix.scr.annotations.Component;</span></p> <p><span class="code">import org.slf4j.Logger;</span></p> <p><span class="code">import org.slf4j.LoggerFactory;</span></p> <p><span class="code"> </span></p> <p><span class="code">import com.day.cq.search.Predicate;</span></p> <p><span class="code">import com.day.cq.search.eval.AbstractPredicateEvaluator;</span></p> <p><span class="code">import com.day.cq.search.eval.EvaluationContext;</span></p> <p><span class="code"> </span></p> <p><span class="code">@Component(metatype = false, factory = "com.day.cq.search.eval.PredicateEvaluator/repli")</span></p> <p><span class="code">public class ReplicationPredicateEvaluator extends AbstractPredicateEvaluator {</span></p> <p><span class="code"> static final String PE_NAME = "replic";</span></p> <p><span class="code"> </span></p> <p><span class="code"> static final String PN_LAST_REPLICATED_BY = "cq:lastReplicatedBy";</span></p> <p><span class="code"> static final String PN_LAST_REPLICATED = "cq:lastReplicated";</span></p> <p><span class="code"> static final String PN_LAST_REPLICATED_ACTION = "cq:lastReplicationAction";</span></p> <p><span class="code"> </span></p> <p><span class="code"> static final String PREDICATE_BY = "by";</span></p> <p><span class="code"> static final String PREDICATE_SINCE = "since";</span></p> <p><span class="code"> static final String PREDICATE_SINCE_OP = " &amp;gt;= ";</span></p> <p><span class="code"> static final String PREDICATE_ACTION = "action";</span></p> <p><span class="code"> </span></p> <p><span class="code"> Logger log = LoggerFactory.getLogger(getClass());</span></p> <p><span class="code"> </span></p> <p><span class="code"> /**</span></p> <p><span class="code"> * Returns a XPath expression filtering by replication metadata.</span></p> <p><span class="code"> *</span></p> <p><span class="code"> * @see com.day.cq.search.eval.AbstractPredicateEvaluator#getXPathExpression(com.day.cq.search.Predicate,</span></p> <p><span class="code"> * com.day.cq.search.eval.EvaluationContext)</span></p> <p><span class="code"> */</span></p> <p><span class="code"> @Override</span></p> <p><span class="code"> public String getXPathExpression(Predicate predicate,</span></p> <p><span class="code"> EvaluationContext context) {</span></p> <p><span class="code"> </span></p> <p><span class="code"> log.debug("predicate {}", predicate);</span></p> <p><span class="code"> </span></p> <p><span class="code"> String date = predicate.get(PREDICATE_SINCE);</span></p> <p><span class="code"> String user = predicate.get(PREDICATE_BY);</span></p> <p><span class="code"> String action = predicate.get(PREDICATE_ACTION);</span></p> <p><span class="code"> </span></p> <p><span class="code"> StringBuilder sb = new StringBuilder();</span></p> <p><span class="code"> </span></p> <p><span class="code"> if (date != null) {</span></p> <p><span class="code"> sb.append(PN_LAST_REPLICATED).append(PREDICATE_SINCE_OP);</span></p> <p><span class="code"> sb.append("xs:dateTime('").append(date).append("')");</span></p> <p><span class="code"> }</span></p> <p><span class="code"> if (user != null) {</span></p> <p><span class="code"> addAndOperator(sb);</span></p> <p><span class="code"> sb.append(PN_LAST_REPLICATED_BY);</span></p> <p><span class="code"> sb.append("='").append(user).append("'");</span></p> <p><span class="code"> }</span></p> <p><span class="code"> if (action != null) {</span></p> <p><span class="code"> addAndOperator(sb);</span></p> <p><span class="code"> sb.append(PN_LAST_REPLICATED_ACTION);</span></p> <p><span class="code"> sb.append("='").append(action).append("'");</span></p> <p><span class="code"> }</span></p> <p><span class="code"> String xpath = sb.toString();</span></p> <p><span class="code"> </span></p> <p><span class="code"> log.debug("xpath **{}**", xpath);</span></p> <p><span class="code"> </span></p> <p><span class="code"> return xpath;</span></p> <p><span class="code"> }</span></p> <p><span class="code"> </span></p> <p><span class="code"> /**</span></p> <p><span class="code"> * Add an and operator if the builder is not empty.</span></p> <p><span class="code"> *</span></p> <p><span class="code"> * @param sb a {@link StringBuilder} containing the query under construction</span></p> <p><span class="code"> */</span></p> <p><span class="code"> private void addAndOperator(StringBuilder sb) {</span></p> <p><span class="code"> if (sb.length() != 0) {</span></p> <p><span class="code"> sb.append(" and ");</span></p> <p><span class="code"> }</span></p> <p><span class="code"> }</span></p> <p><span class="code">}</span></p> <p> </p> </td> 
    </tr> 
   </tbody> 
  </table> 
  <p> </p> 
  <p><a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator">aem-search-custom-predicate-evaluator </a>- <a href="https://github.com/Adobe-Marketing-Cloud/aem-search-custom-predicate-evaluator/blob/master/src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java">src/main/java/com/adobe/aem/docs/search/ReplicationPredicateEvaluator.java</a></p> 
 </body> 
</html>