<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="20442c0b-f026-40fe-b774-8aa89982227a" name="jcr:uuid" /> 
  <meta content="Processing Assets Using Media Handlers and Workflows" name="jcr:title" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/assets/using/media-handlers.html" name="publishExternalURL" /> 
  <meta content="2019-01-12T17:33:06.434-0500" name="acrolinxDate" /> 
  <meta content="2508" name="acrolinxWords" /> 
  <meta content="asgupta" name="cq:lastReplicatedBy" /> 
  <meta content="213" name="acrolinxSentences" /> 
  <meta content="/content/docs/en/aem/6-3/develop/extending/assets/media-handlers" name="qaNotes" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="2017-12-01T19:07:13.484-0500" name="jcr:created" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2018-04-24T11:56:57.900-0400" name="locHandOffDate" /> 
  <meta content="8d135561-a3e1-46ce-b19a-fa9d301e64d7" name="jcr:predecessors" /> 
  <meta content="2018-09-18T07:15:23.704-0400" name="topicBrowsingSortDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="2017-10-31T16:34:24.786-0400" name="firstPublishExternalDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Processing Assets Using Media Handlers and Workflows" name="navTitle" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="2018-09-18T07:15:23.704-0400" name="publishExternalDate" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="Processing Assets Using Media Handlers and Workflows" name="seoTitle" /> 
  <meta content="http://acrolinx.corp.adobe.com:8031/output/en/media_handlers_krs_workflow_f3c2f2ccebf6138e_160_report.xml" name="acrolinxReportURL" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/ASSETS" name="primaryProductTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="2018-09-18T07:15:23.784-0400" name="cq:lastReplicated" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/ASSETS;topic_tags:extending-assets;content_type:reference" name="cq:tags" /> 
  <meta content="asgupta" name="acrolinxLastCheckedBy" /> 
  <meta content="red" name="acrolinxPageStatus" /> 
  <meta content="asgupta@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="Learn about various media handlers and how to use them in workflows to perform tasks on assets." name="seoDescription" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="/content/help/en/experience-manager/6-4/assets/morehelp/extending-assets;/content/help/en/experience-manager/6-4/assets/morehelp/extending-assets" name="moreHelpPaths" /> 
  <meta content="checked_not_improved" name="acrolinxStatus" /> 
  <meta content="2018-09-18T07:15:23.713-0400" name="cq:lastModified" /> 
  <meta content="mix:lockable;mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="asgupta" name="cq:lastModifiedBy" /> 
  <meta content="2018-09-18T07:15:23.704-0400" name="lastPublishExternalDate" /> 
 </head> 
 <body> 
  <p>Adobe Experience Manager (AEM) Assets comes with a set of default workflows and media handlers to process assets. The workflow defines the general tasks to be executed on the assets, then delegates the specific tasks to the media handlers, for example thumbnail generation or metadata extraction.</p> 
  <p>A workflow can be defined that will automatically execute when an asset of a particular type is uploaded to the server. The processing steps are defined in terms of a series of AEM Assets Media Handlers. AEM provides some <a href="#main-pars-par2">built in handlers,</a> and additional ones can be either <a href="#main-pars-par30">custom developed</a> or defined by delegating the process to a <a href="#main-pars-title-1">command line tool</a>.</p> 
  <p>Media handlers are services inside AEM Assets that perform specific actions on assets. For example, when an MP3 audio file is uploaded into AEM, a workflow triggers an MP3 handler that extracts the metadata and generates a thumbnail. Media handlers are usually used in combination with workflows. Most common MIME types are supported within AEM. Specific tasks can be performed on assets by either extending/creating workflows, extending/creating media handlers or disabling/enabling media handlers.</p> 
  <note> 
   <p>Please refer to the <a href="../../assets/using/assets-formats.md">Assets Supported Formats</a> page for a description of all the formats supported by AEM Assets as well as features supported for each format.<br /> </p> 
  </note> 
  <h2>Default Media Handlers</h2> 
  <p>The following media handlers are available within AEM Assets and handle the most common MIME types:</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <td>Handler name</td> 
     <td>Service Name (in the System Console)</td> 
     <td>Supported MIME types</td> 
    </tr> 
    <tr> 
     <td>TextHandler</td> 
     <td><p>com.day.cq.dam.core.impl.handler.TextHandler</p> </td> 
     <td>text/plain</td> 
    </tr> 
    <tr> 
     <td><a>PdfHandler</a></td> 
     <td><p>com.day.cq.dam.handler.standard.pdf.PdfHandler</p> </td> 
     <td><p>application/pdf<br /> application/illustrator</p> </td> 
    </tr> 
    <tr> 
     <td>JpegHandler</td> 
     <td><p>com.day.cq.dam.core.impl.handler.JpegHandler</p> </td> 
     <td>image/jpeg</td> 
    </tr> 
    <tr> 
     <td><a>Mp3Handler</a></td> 
     <td><p>com.day.cq.dam.handler.standard.mp3.Mp3Handler</p> </td> 
     <td><p>audio/mpeg</p> </td> 
    </tr> 
    <tr> 
     <td><a>ZipHandler</a></td> 
     <td><p>com.day.cq.dam.handler.standard.zip.ZipHandler</p> </td> 
     <td><p>application/java-archive</p> <p>application/zip</p> </td> 
    </tr> 
    <tr> 
     <td><a>PictHandler</a></td> 
     <td><p>com.day.cq.dam.handler.standard.pict.PictHandler</p> </td> 
     <td><p>image/pict</p> </td> 
    </tr> 
    <tr> 
     <td>StandardImageHandler</td> 
     <td><p>com.day.cq.dam.core.impl.handler.StandardImageHandler</p> </td> 
     <td><p>image/gif</p> <p>image/png</p> <p>application/photoshop</p> <p>image/jpeg</p> <p>image/tiff</p> <p>image/x-ms-bmp</p> <p>image/bmp</p> </td> 
    </tr> 
    <tr> 
     <td>MSOfficeHandler</td> 
     <td>com.day.cq.dam.handler.standard.msoffice.MSOfficeHandler</td> 
     <td>application/msword<br /> </td> 
    </tr> 
    <tr> 
     <td>MSPowerPointHandler</td> 
     <td>com.day.cq.dam.handler.standard.msoffice.MSPowerPointHandler</td> 
     <td>application/vnd.ms-powerpoint<br /> </td> 
    </tr> 
    <tr> 
     <td>OpenOfficeHandler</td> 
     <td>com.day.cq.dam.handler.standard.ooxml.OpenOfficeHandler</td> 
     <td>application/vnd.openxmlformats-officedocument.wordprocessingml.document<br /> application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<br /> application/vnd.openxmlformats-officedocument.presentationml.presentation<br /> <br /> </td> 
    </tr> 
    <tr> 
     <td>EPubHandler</td> 
     <td>com.day.cq.dam.handler.standard.epub.EPubHandler</td> 
     <td>application/epub+zip</td> 
    </tr> 
    <tr> 
     <td>GenericAssetHandler</td> 
     <td><p>com.day.cq.dam.core.impl.handler.GenericAssetHandler</p> </td> 
     <td>fallback in case no other handler was found to extract data from an asset</td> 
    </tr> 
   </tbody> 
  </table> 
  <p>All the handlers perform the following tasks:</p> 
  <ul> 
   <li><p>extracting all available metadata from the asset.</p> </li> 
   <li><p>creating a thumbnail image out of the asset.</p> </li> 
  </ul> 
  <p>It is possible to view the active media handlers:</p> 
  <ol> 
   <li><p>In your browser, navigate to http://localhost:4502/system/console/components.</p> </li> 
   <li><p>Click the link com.day.cq.dam.core.impl.store.AssetStoreImpl.</p> </li> 
   <li><p>A list with all the active media handlers is displayed. For example:</p> </li> 
  </ol> 
  <img imageRotate="0" src="assets/chlimage_1-451.png" /> 
  <h2>Using Media Handlers in Workflows to perform tasks on Assets</h2> 
  <p>Media handlers are services that are usually used in combination with workflows.</p> 
  <p>AEM has some default workflows to process assets. To view them, open the Workflow console and click the <strong>Models</strong> tab: the workflow titles that start with <strong>AEM Assets</strong> are the assets specific ones.</p> 
  <p>Existing workflows can be extended and new ones can be created to process assets according to specific requirements.</p> 
  <draft-comment color="yellow" lastModifiedBy="alvawb" lastModifiedDate="2017-11-30T05:30:07.573-0500" prevFirstName="Alva" prevLastName="Ware-Bevacqui" type="remark"> 
   <p>The following example uses a workflow that no longer exists. For now, made example Draft. Need to create new example. </p> 
   <p></p> 
  </draft-comment> 
  <p>The following example shows how to enhance the AEM Assets Synchronization workflow so that sub-assets are generated for all assets except PDF documents.</p> 
  <p>The workflow will look as follows:</p> 
  <draft-comment type="draft"> 
   <img imageRotate="0" src="assets/chlimage_1-452.png" /> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>Proceed as follows:</p> 
   <ol> 
    <li>Go to the <strong>Workflow</strong> console.</li> 
    <li>Edit the the <strong>DAM Asset Synchronization</strong> workflow model.</li> 
    <li>Add an <strong>OR Split</strong> after the <strong>Sync asset</strong> step.</li> 
    <li>Add a <strong>Create Sub Asset</strong> step to the left branch.</li> 
    <li>Add a <strong>No Operation</strong> step to the right branch.</li> 
    <li>Edit the OR Split: 
     <ul> 
      <li>Add the script 1 below - that returns false for PDF files - to the Branch 1.<br /> </li> 
      <li>Set Branch 1 as the default route.</li> 
      <li>Add the script 2 below- that returns true for PDF files - to the Branch 2.</li> 
     </ul> </li> 
    <li>Save the workflow.<br /> </li> 
   </ol> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <codeblock gutter="true" class="syntax xml">
     //&amp;nbsp;script&amp;nbsp;1:&amp;nbsp;returns&amp;nbsp;false&amp;nbsp;for&amp;nbsp;PDF&amp;nbsp;files!!discoiqbr!!!!discoiqbr!!function&amp;nbsp;check()&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;if&amp;nbsp;(workflowData.getPayloadType()&amp;nbsp;==&amp;nbsp;"JCR_PATH")&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;var&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;var&amp;nbsp;node&amp;nbsp;=&amp;nbsp;jcrSession.getItem(path);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(node.getPath().indexOf(".pdf")&amp;nbsp;&gt;=&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;!!discoiqbr!!} 
   </codeblock> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <codeblock gutter="true" class="syntax xml">
     //&amp;nbsp;script&amp;nbsp;2:&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;for&amp;nbsp;PDF&amp;nbsp;files!!discoiqbr!!!!discoiqbr!!function&amp;nbsp;check()&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;if&amp;nbsp;(workflowData.getPayloadType()&amp;nbsp;==&amp;nbsp;"JCR_PATH")&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;var&amp;nbsp;path&amp;nbsp;=&amp;nbsp;workflowData.getPayload().toString();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;var&amp;nbsp;node&amp;nbsp;=&amp;nbsp;jcrSession.getItem(path);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(node.getPath().indexOf(".pdf")&amp;nbsp;&gt;=&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;!!discoiqbr!!} 
   </codeblock> 
  </draft-comment> 
  <h3>Disabling/Enabling a Media Handler</h3> 
  <p>The media handlers can be disabled or enabled through the Apache Felix Web Management Console. When the media handler is disabled, its tasks are not performed on the assets.</p> 
  <p>To enable/disable a media handler:</p> 
  <ol> 
   <li><p>In your browser, navigate to http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/system/console/components.</p> </li> 
   <li><p>Click the<strong> Disable</strong> button right beside the name of the media handler. For example: <strong>com.day.cq.dam.handler.standard.mp3.Mp3Handler.</strong></p> </li> 
   <li><p>Refresh the page: a<strong> Disabled </strong>icon is displayed beside the media handler.</p> </li> 
   <li><p>To enable the media handler, click the <strong>Enable </strong>button beside the name of the media handler.</p> </li> 
  </ol> 
  <h3>Creating a new Media Handler</h3> 
  <p>To support a new media type or to execute specific tasks on an asset, it is necessary to create a new media handler. This section describes how to proceed.</p> 
  <h4>Important Classes and Interfaces</h4> 
  <p>The best way to start an implementation is to inherit from a provided abstract implementation that takes care of most things and provides reasonable default behaviour: the com.day.cq.dam.core.AbstractAssetHandler Class.</p> 
  <p>This class already provides an abstract service descriptor. So if you inherit from this class and use the maven-sling-plugin, make sure that you set the inherit flag to true.</p> 
  <p>The following methods need to be implemented:</p> 
  <ul> 
   <li><p>extractMetadata(): this method extracts all available metadata.</p> </li> 
   <li><p>getThumbnailImage(): this method creates a thumbnail image out of the passed asset.</p> </li> 
   <li><p>getMimeTypes(): this method returns the asset mime type(s).</p> </li> 
  </ul> 
  <p>Here is an example template:</p> 
  <p>package my.own.stuff; /** * @scr.component inherit="true" * @scr.service */ public class MyMediaHandler extends com.day.cq.dam.core.AbstractAssetHandler { // implement the relevant parts }</p> 
  <p>The interface and classes include:</p> 
  <p><strong>com.day.cq.dam.api.handler.AssetHandler Interface</strong></p> 
  <ul> 
   <li>This interface describes the service which adds support for specific mime types. Adding a new mime type requires to implement this interface. The interface contains methods for importing and exporting the specific documents, for creating thumbnails and extracting metadata.</li> 
  </ul> 
  <p><strong>com.day.cq.dam.core.AbstractAssetHandler Class</strong></p> 
  <ul> 
   <li>This class serves as basis for all other asset handler implementations and provides common used functionality.</li> 
  </ul> 
  <p><strong>com.day.cq.dam.core.AbstractSubAssetHandler Class:</strong></p> 
  <ul> 
   <li>This class serves as basis for all other asset handler implementations and provides common used functionality plus common used functionality for subasset extraction</li> 
   <li>The best way to start an implementation is to inherit from a provided abstract implementation that takes care of most things and provides reasonable default behaviour: the com.day.cq.dam.core.AbstractAssetHandler Class.</li> 
   <li>This class already provides an abstract service descriptor. So if you inherit from this class and use the maven-sling-plugin, make sure that you set the inherit flag to true.</li> 
  </ul> 
  <p>The following methods need to be implemented:</p> 
  <ul> 
   <li><p>extractMetadata(): this method extracts all available metadata.</p> </li> 
   <li><p>getThumbnailImage(): this method creates a thumbnail image out of the passed asset.</p> </li> 
   <li><p>getMimeTypes(): this method returns the asset mime type(s).</p> </li> 
  </ul> 
  <p>Here is an example template:</p> 
  <p>package my.own.stuff; /** * @scr.component inherit="true" * @scr.service */ public class MyMediaHandler extends com.day.cq.dam.core.AbstractAssetHandler { // implement the relevant parts }</p> 
  <p>The interface and classes include:</p> 
  <p><strong>com.day.cq.dam.api.handler.AssetHandler Interface</strong></p> 
  <p></p> 
  <ul> 
   <li>This interface describes the service which adds support for specific mime types. Adding a new mime type requires to implement this interface. The interface contains methods for importing and exporting the specific documents, for creating thumbnails and extracting metadata.</li> 
  </ul> 
  <p><strong>com.day.cq.dam.core.AbstractAssetHandler Class</strong></p> 
  <p></p> 
  <ul> 
   <li>This class serves as basis for all other asset handler implementations and provides common used functionality.</li> 
  </ul> 
  <p><strong>com.day.cq.dam.core.AbstractSubAssetHandler Class:</strong></p> 
  <p></p> 
  <ul> 
   <li><p>This class serves as basis for all other asset handler implementations and provides common used functionality plus common used functionality for subasset extraction</p> </li> 
  </ul> 
  <p></p> 
  <p></p> 
  <p></p> 
  <h4>Example: create a specific Text Handler</h4> 
  <p>In this section, you will create a specific Text Handler that generates thumbnails with a watermark.</p> 
  <p>Proceed as follows:</p> 
  <p>Refer to <a href="../../sites/developing/using/dev-tools.md#howto0setupthedevelopmentenvironmentwitheclipse">How to Set Up the Development Environment with Eclipse</a> for installing and setting up Eclipse with a Maven plugin and for setting up the dependencies that are needed for the Maven project.</p> 
  <p>After you perform the following procedure, when you upload a txt file into AEM, the file's metadata are extracted and two thumbnails with a watermark are generated.</p> 
  <ol> 
   <li> <p>In Eclipse, create the myBundle Maven project:</p>  
    <ol> 
     <li><p>In the Menu bar, click File, select New, then Other... .</p> </li> 
     <li><p>In the dialog, expand the Maven folder, select Maven Project and click Next.</p> </li> 
     <li><p>Check the Create a simple project box and the Use default Workspace locations box, then click Next.</p> </li> 
     <li><p>Define the Maven project:</p> 
      <ul> 
       <li><p>Group Id: com.day.cq5.myhandler</p> </li> 
       <li><p>Artifact Id: myBundle</p> </li> 
       <li><p>Name: My AEM bundle</p> </li> 
       <li><p>Description: This is my AEM bundle</p> </li> 
      </ul> </li> 
     <li><p>Click Finish.</p> </li> 
    </ol> </li> 
   <li><p>Set the Java Compiler to version 1.5:</p>  
    <ol> 
     <li><p>Right-click the myBundle project, select Properties.</p> </li> 
     <li><p>Select Java Compiler and set following properties to 1.5:</p> 
      <ul> 
       <li><p>Compiler compliance level</p> </li> 
       <li><p>Generated .class files compatibility</p> </li> 
       <li><p>Source compatibility</p> </li> 
      </ul> </li> 
     <li><p>Click OK.</p> </li> 
     <li><p>In the dialog window, click Yes.</p> </li> 
    </ol> </li> 
   <li><p>Replace the code in the pom.xml file with the following code:</p> 
    <codeblock gutter="true" class="syntax xml">
      &lt;project&amp;nbsp;xmlns="http://maven.apache.org/POM/4.0.0"&amp;nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"!!discoiqbr!!&amp;nbsp;xsi:schemaLocation="http://maven.apache.org/POM/4.0.0&amp;nbsp;http://maven.apache.org/maven-v4_0_0.xsd"&gt;!!discoiqbr!!&amp;nbsp;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;P&amp;nbsp;A&amp;nbsp;R&amp;nbsp;E&amp;nbsp;N&amp;nbsp;T&amp;nbsp;P&amp;nbsp;R&amp;nbsp;O&amp;nbsp;J&amp;nbsp;E&amp;nbsp;C&amp;nbsp;T&amp;nbsp;D&amp;nbsp;E&amp;nbsp;S&amp;nbsp;C&amp;nbsp;R&amp;nbsp;I&amp;nbsp;P&amp;nbsp;T&amp;nbsp;I&amp;nbsp;O&amp;nbsp;N&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&lt;parent&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.dam&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;dam&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;version&gt;5.2.14&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;relativePath&gt;../parent&lt;/relativePath&gt;!!discoiqbr!!&amp;nbsp;&lt;/parent&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;P&amp;nbsp;R&amp;nbsp;O&amp;nbsp;J&amp;nbsp;E&amp;nbsp;C&amp;nbsp;T&amp;nbsp;D&amp;nbsp;E&amp;nbsp;S&amp;nbsp;C&amp;nbsp;R&amp;nbsp;I&amp;nbsp;P&amp;nbsp;T&amp;nbsp;I&amp;nbsp;O&amp;nbsp;N&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&lt;groupId&gt;com.day.cq5.myhandler&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&lt;artifactId&gt;myBundle&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&lt;name&gt;My&amp;nbsp;CQ5&amp;nbsp;bundle&lt;/name&gt;!!discoiqbr!!&amp;nbsp;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&lt;description&gt;This&amp;nbsp;is&amp;nbsp;my&amp;nbsp;CQ5&amp;nbsp;bundle&lt;/description&gt;!!discoiqbr!!&amp;nbsp;&lt;packaging&gt;bundle&lt;/packaging&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;B&amp;nbsp;U&amp;nbsp;I&amp;nbsp;L&amp;nbsp;D&amp;nbsp;D&amp;nbsp;E&amp;nbsp;F&amp;nbsp;I&amp;nbsp;N&amp;nbsp;I&amp;nbsp;T&amp;nbsp;I&amp;nbsp;O&amp;nbsp;N&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&lt;build&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;plugins&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.felix&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-scr-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-sling-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;slingUrlSuffix&gt;/libs/dam/install/&lt;/slingUrlSuffix&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.felix&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;extensions&gt;true&lt;/extensions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;instructions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Bundle-Category&gt;cq5&lt;/Bundle-Category&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Export-Package&gt;&amp;nbsp;com.day.cq5.myhandler&amp;nbsp;&lt;/Export-Package&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/instructions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/plugins&gt;!!discoiqbr!!&amp;nbsp;&lt;/build&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;D&amp;nbsp;E&amp;nbsp;P&amp;nbsp;E&amp;nbsp;N&amp;nbsp;D&amp;nbsp;E&amp;nbsp;N&amp;nbsp;C&amp;nbsp;I&amp;nbsp;E&amp;nbsp;S&amp;nbsp;--&gt;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&lt;!--&amp;nbsp;======================================================================&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&lt;dependencies&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.dam&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-dam-api&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;version&gt;5.2.10&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;scope&gt;provided&lt;/scope&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.dam&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-dam-core&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;version&gt;5.2.10&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;scope&gt;provided&lt;/scope&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-commons&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;javax.jcr&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;jcr&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.felix&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;org.osgi.compendium&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;commons-lang&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;commons-lang&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;commons-collections&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;commons-io&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;commons-io&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.commons&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;day-commons-gfx&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.commons&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;day-commons-text&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.workflow&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-workflow-api&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.wcm&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-wcm-foundation&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;version&gt;5.2.22&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/dependency&gt;!!discoiqbr!!&amp;nbsp;&lt;/dependencies&gt; 
    </codeblock></li> 
   <li><p>Create the package com.day.cq5.myhandler that will contain the Java classes under myBundle/src/main/java:</p>  
    <ol> 
     <li><p>Under myBundle, right-click src/main/java, select New, then Package.</p> </li> 
     <li><p>Name it com.day.cq5.myhandler and click Finish.</p> </li> 
    </ol> </li> 
   <li><p>Create the Java class MyHandler:</p> 
    <ol> 
     <li><p>In Eclipse, under myBundle/src/main/java, right-click the com.day.cq5.myhandler package, select New, then Class.</p> </li> 
     <li><p>In the dialog window, name the Java Class MyHandler and click Finish. Eclipse creates and opens the file MyHandler.java.</p> </li> 
     <li><p>In MyHandler.java replace the existing code with the following and then save the changes:</p> </li> 
    </ol> 
    <codeblock gutter="true" class="syntax java">
      package&amp;nbsp;com.day.cq5.myhandler;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.awt.Color;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.awt.Rectangle;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.awt.image.BufferedImage;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.io.IOException;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.io.InputStream;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;java.io.InputStreamReader;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.Node;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.RepositoryException;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;javax.jcr.Session;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;org.apache.commons.io.IOUtils;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;org.slf4j.Logger;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;org.slf4j.LoggerFactory;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;com.day.cq.dam.api.metadata.ExtractedMetadata;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;com.day.cq.dam.core.AbstractAssetHandler;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;com.day.image.Font;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;com.day.image.Layer;&amp;nbsp;!!discoiqbr!!import&amp;nbsp;com.day.cq.wcm.foundation.ImageHelper;&amp;nbsp;!!discoiqbr!!!!discoiqbr!!/**&amp;nbsp;!!discoiqbr!!&amp;nbsp;*&amp;nbsp;&amp;nbsp;The&amp;nbsp;&lt;code&gt;MyHandler&lt;/code&gt;&amp;nbsp;can&amp;nbsp;extract&amp;nbsp;text&amp;nbsp;files&amp;nbsp;!!discoiqbr!!&amp;nbsp;*&amp;nbsp;&amp;nbsp;@scr.component&amp;nbsp;inherit="true"&amp;nbsp;immediate="true"&amp;nbsp;metatype="false"&amp;nbsp;!!discoiqbr!!&amp;nbsp;*&amp;nbsp;&amp;nbsp;@scr.service&amp;nbsp;!!discoiqbr!!&amp;nbsp;*&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;**/&amp;nbsp;!!discoiqbr!!!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;MyHandler&amp;nbsp;extends&amp;nbsp;AbstractAssetHandler&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;/**&amp;nbsp;*&amp;nbsp;Logger&amp;nbsp;instance&amp;nbsp;for&amp;nbsp;this&amp;nbsp;class.&amp;nbsp;*/&amp;nbsp;!!discoiqbr!!&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;log&amp;nbsp;=&amp;nbsp;LoggerFactory.getLogger(MyHandler.class);&amp;nbsp;!!discoiqbr!!&amp;nbsp;/**&amp;nbsp;*&amp;nbsp;Music&amp;nbsp;icon&amp;nbsp;margin&amp;nbsp;*/&amp;nbsp;!!discoiqbr!!&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;int&amp;nbsp;MARGIN&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;!!discoiqbr!!&amp;nbsp;/**&amp;nbsp;*&amp;nbsp;@see&amp;nbsp;com.day.cq.dam.api.handler.AssetHandler#getMimeTypes()&amp;nbsp;*/&amp;nbsp;!!discoiqbr!!&amp;nbsp;public&amp;nbsp;String[]&amp;nbsp;getMimeTypes()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;String[]&amp;nbsp;{"text/plain"};&amp;nbsp;!!discoiqbr!!&amp;nbsp;}!!discoiqbr!!!!discoiqbr!!&amp;nbsp;public&amp;nbsp;ExtractedMetadata&amp;nbsp;extractMetadata(Node&amp;nbsp;asset)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;ExtractedMetadata&amp;nbsp;extractedMetadata&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ExtractedMetadata();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;InputStream&amp;nbsp;data&amp;nbsp;=&amp;nbsp;getInputStream(asset);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;read&amp;nbsp;text&amp;nbsp;data&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader&amp;nbsp;reader&amp;nbsp;=&amp;nbsp;new&amp;nbsp;InputStreamReader(data);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;char[]&amp;nbsp;buffer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;char[4096];&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;text&amp;nbsp;=&amp;nbsp;"";&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(reader.read(buffer)&amp;nbsp;!=&amp;nbsp;-1)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text&amp;nbsp;+=&amp;nbsp;new&amp;nbsp;String(buffer);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;reader.close();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;wordCount&amp;nbsp;=&amp;nbsp;this.wordCount(text);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;extractedMetadata.setProperty("text",&amp;nbsp;text);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;extractedMetadata.setMetaDataProperty("Word&amp;nbsp;Count",wordCount);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;setMimetype(extractedMetadata,&amp;nbsp;asset);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Throwable&amp;nbsp;t)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;log.error("handling&amp;nbsp;error:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;t.toString(),&amp;nbsp;t);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;IOUtils.closeQuietly(data);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;extractedMetadata;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;//&amp;nbsp;----------------------&lt;&amp;nbsp;helpers&amp;nbsp;&gt;----------------------------------------&amp;nbsp;!!discoiqbr!!&amp;nbsp;protected&amp;nbsp;BufferedImage&amp;nbsp;getThumbnailImage(Node&amp;nbsp;node)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;ExtractedMetadata&amp;nbsp;metadata&amp;nbsp;=&amp;nbsp;extractMetadata(node);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;final&amp;nbsp;String&amp;nbsp;text&amp;nbsp;=&amp;nbsp;(String)&amp;nbsp;metadata.getProperty("text");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;text&amp;nbsp;layer&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;final&amp;nbsp;Layer&amp;nbsp;layer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Layer(500,&amp;nbsp;600,&amp;nbsp;Color.WHITE);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;layer.setPaint(Color.black);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;Font&amp;nbsp;font&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Font("Arial",&amp;nbsp;12);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;String&amp;nbsp;displayText&amp;nbsp;=&amp;nbsp;this.getDisplayText(text,&amp;nbsp;600,&amp;nbsp;12);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if(displayText!=null&amp;nbsp;&amp;&amp;&amp;nbsp;displayText.length()&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;commons-gfx&amp;nbsp;Font&amp;nbsp;class&amp;nbsp;would&amp;nbsp;throw&amp;nbsp;IllegalArgumentException&amp;nbsp;on&amp;nbsp;empty&amp;nbsp;or&amp;nbsp;null&amp;nbsp;text&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;layer.drawText(10,&amp;nbsp;10,&amp;nbsp;500,&amp;nbsp;600,&amp;nbsp;displayText,&amp;nbsp;font,&amp;nbsp;Font.ALIGN_LEFT,&amp;nbsp;0,&amp;nbsp;0);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;watermark&amp;nbsp;and&amp;nbsp;merge&amp;nbsp;with&amp;nbsp;text&amp;nbsp;layer&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;Layer&amp;nbsp;watermarkLayer;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;node.getSession();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;watermarkLayer&amp;nbsp;=&amp;nbsp;ImageHelper.createLayer(session,&amp;nbsp;"/content/dam/geometrixx/icons/certificate.png");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;watermarkLayer.setX(MARGIN);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;watermarkLayer.setY(MARGIN);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;layer.merge(watermarkLayer);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(RepositoryException&amp;nbsp;e)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;catch&amp;nbsp;block&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;catch&amp;nbsp;block&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;layer.crop(new&amp;nbsp;Rectangle(510,&amp;nbsp;600));&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;layer.getImage();&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;//&amp;nbsp;---------------&lt;&amp;nbsp;private&amp;nbsp;&gt;-----------------------------------------------&amp;nbsp;!!discoiqbr!!&amp;nbsp;/**&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;This&amp;nbsp;method&amp;nbsp;cuts&amp;nbsp;lines&amp;nbsp;if&amp;nbsp;the&amp;nbsp;text&amp;nbsp;file&amp;nbsp;is&amp;nbsp;too&amp;nbsp;long..!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;text!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;text&amp;nbsp;to&amp;nbsp;check!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;height!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;text&amp;nbsp;box&amp;nbsp;height&amp;nbsp;(px)!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;fontheight!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;font&amp;nbsp;height&amp;nbsp;(px)&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;the&amp;nbsp;text&amp;nbsp;which&amp;nbsp;will&amp;nbsp;fit&amp;nbsp;into&amp;nbsp;the&amp;nbsp;box&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;*/&amp;nbsp;!!discoiqbr!!&amp;nbsp;private&amp;nbsp;String&amp;nbsp;getDisplayText(String&amp;nbsp;text,&amp;nbsp;int&amp;nbsp;height,&amp;nbsp;int&amp;nbsp;fontheight)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;String&amp;nbsp;trimmedText&amp;nbsp;=&amp;nbsp;text.trim();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;int&amp;nbsp;numOfLines&amp;nbsp;=&amp;nbsp;height&amp;nbsp;/&amp;nbsp;fontheight;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;String&amp;nbsp;lines[]&amp;nbsp;=&amp;nbsp;trimmedText.split("\n");&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(lines.length&amp;nbsp;&lt;=&amp;nbsp;numOfLines)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;trimmedText;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;cuttetText&amp;nbsp;=&amp;nbsp;"";&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;numOfLines;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cuttetText&amp;nbsp;+=&amp;nbsp;lines[i]&amp;nbsp;+&amp;nbsp;"\n";&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;cuttetText;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;/**!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;This&amp;nbsp;method&amp;nbsp;counts&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;words&amp;nbsp;in&amp;nbsp;a&amp;nbsp;string&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;text&amp;nbsp;the&amp;nbsp;String&amp;nbsp;whose&amp;nbsp;words&amp;nbsp;would&amp;nbsp;like&amp;nbsp;to&amp;nbsp;be&amp;nbsp;counted!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;words&amp;nbsp;in&amp;nbsp;the&amp;nbsp;string!!discoiqbr!!&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;*/&amp;nbsp;!!discoiqbr!!&amp;nbsp;private&amp;nbsp;long&amp;nbsp;wordCount(String&amp;nbsp;text)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;We&amp;nbsp;need&amp;nbsp;to&amp;nbsp;keep&amp;nbsp;track&amp;nbsp;of&amp;nbsp;the&amp;nbsp;last&amp;nbsp;character,&amp;nbsp;if&amp;nbsp;we&amp;nbsp;have&amp;nbsp;two&amp;nbsp;white&amp;nbsp;spaces&amp;nbsp;in&amp;nbsp;a&amp;nbsp;row&amp;nbsp;we&amp;nbsp;dont&amp;nbsp;want&amp;nbsp;to&amp;nbsp;double&amp;nbsp;count&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;The&amp;nbsp;starting&amp;nbsp;of&amp;nbsp;the&amp;nbsp;document&amp;nbsp;is&amp;nbsp;always&amp;nbsp;a&amp;nbsp;whitespace&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;prevWhiteSpace&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;currentWhiteSpace&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;char&amp;nbsp;c;&amp;nbsp;long&amp;nbsp;numwords&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;int&amp;nbsp;j&amp;nbsp;=&amp;nbsp;text.length();&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;while&amp;nbsp;(i&amp;nbsp;&lt;&amp;nbsp;j)&amp;nbsp;{&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;c&amp;nbsp;=&amp;nbsp;text.charAt(i++);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(c&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;break;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWhiteSpace&amp;nbsp;=&amp;nbsp;Character.isWhitespace(c);&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(currentWhiteSpace&amp;nbsp;&amp;&amp;&amp;nbsp;!prevWhiteSpace)&amp;nbsp;{&amp;nbsp;numwords++;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;prevWhiteSpace&amp;nbsp;=&amp;nbsp;currentWhiteSpace;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;//&amp;nbsp;If&amp;nbsp;we&amp;nbsp;do&amp;nbsp;not&amp;nbsp;end&amp;nbsp;with&amp;nbsp;a&amp;nbsp;white&amp;nbsp;space&amp;nbsp;then&amp;nbsp;we&amp;nbsp;need&amp;nbsp;to&amp;nbsp;add&amp;nbsp;one&amp;nbsp;extra&amp;nbsp;word&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!currentWhiteSpace)&amp;nbsp;{&amp;nbsp;numwords++;&amp;nbsp;}&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;return&amp;nbsp;numwords;&amp;nbsp;!!discoiqbr!!&amp;nbsp;}&amp;nbsp;!!discoiqbr!!} 
    </codeblock></li> 
   <li><p>Compile the Java class and create the bundle:</p>  
    <ol> 
     <li><p>Right-click the myBundle project, select Run As, then Maven Install.</p> </li> 
     <li><p>The bundle myBundle-0.0.1-SNAPSHOT.jar (containing the compiled class) is created under myBundle/target.</p> </li> 
    </ol> </li> 
   <li><p>In CRX Explorer, create a new node under /apps/myApp. Name = install, Type = nt:folder.</p>  </li> 
   <li> <p>Copy the bundle myBundle-0.0.1-SNAPSHOT.jar and store it under /apps/myApp/install (for example with WebDAV). The new text handler is now active in AEM.</p>  </li> 
   <li><p>In your browser, open the Apache Felix Web Management Console. Select the Components tab and disable the default text handler com.day.cq.dam.core.impl.handler.TextHandler.</p>  </li> 
  </ol> 
  <draft-comment lastModifiedBy="ltrielof" lastModifiedDate="2017-11-30T05:30:08.047-0500" prevFirstName="unknown" prevLastName="unknown" type="remark"> 
   <p>A screenshot would be nice.</p> 
  </draft-comment> 
  <h2>Command Line Based Media Handler</h2> 
  <p>AEM enables you to run any command-line tool within a workflow to convert assets (like for example ImageMagick) and to add the new rendition to the asset. You only need to install the command-line tool on the disk hosting the AEM server and to add and configure a process step to the workflow. The invoked process, called <span class="code">CommandLineProcess</span>, also enables to filter according to specific mime-types and to create multiple thumbnails based on the new rendition.</p> 
  <p>The following conversions can be automatically run and stored within AEM Assets:</p> 
  <ul> 
   <li>EPS and AI transformation using <a href="http://www.imagemagick.org/script/index.php">ImageMagick</a> and <a href="http://www.ghostscript.com/">Ghostscript</a></li> 
   <li>FLV video transcoding using <a href="http://ffmpeg.org/">FFmpeg</a></li> 
   <li>MP3 encoding using <a href="http://lame.sourceforge.net/">LAME</a></li> 
   <li>Audio processing using <a href="http://sox.sourceforge.net/">SOX</a></li> 
  </ul> 
  <note> 
   <p>On non-Windows systems, the FFMpeg tool returns an error while generating renditions for a video asset that has a single quote (') in its filename. If the name of your video file includes a single quote, remove it before uploading to AEM.</p> 
  </note> 
  <p>The <span class="code">CommandLineProcess</span> process performs the following operations in the order they are listed:</p> 
  <ul> 
   <li>Filters the file according to specific mime-types, if specified.</li> 
   <li>Creates a temporary directory on the disk hosting the AEM server.<br /> </li> 
   <li>Streams the original file to the temporary directory.<br /> </li> 
   <li>Executes the command defined by the arguments of the step. The command is being executed within the temporary directory with the permissions of the user running AEM.<br /> </li> 
   <li>Streams the result back into the rendition folder of the AEM server.</li> 
   <li>Deletes the temporary directory.<br /> </li> 
   <li>Creates thumbnails based on those renditions, if specified. The number and the dimensions of the thumbnails are defined by the arguments of the step.</li> 
  </ul> 
  <h4>An Example Using ImageMagick</h4> 
  <p>The following example shows you how to set up the command line process step so that every time an asset with the mime-type gif or tiff is added to /content/dam on the AEM server, a flipped image of the original is created together with three additional thumbnails (140x100, 48x48 and 10x250).</p> 
  <p>To do this, you will use ImageMagick. ImageMagick is a free software suite to create, edit, and compose bitmap images and is typically used from the command line.</p> 
  <p>First install ImageMagick on the disk hosting the AEM server:</p> 
  <ol> 
   <li><p>Install ImageMagick: please refer to the <a href="http://www.imagemagick.org/script/download.php">ImageMagick documentation</a>.</p> </li> 
   <li><p>Set up the tool so you can run convert on the command line.</p> </li> 
   <li><p>To see if the tool is installed properly, run the following command <span class="code">convert -h</span> on the command line.</p> <p>It displays a help screen with all the possible options of the convert tool.</p> 
    <note> 
     <p> In some versions of Windows (for example Windows SE), the convert command may fail to run because it conflicts with the native convert utility that is part of Windows installation. In this case, mention the complete path for the ImageMagick utility used to convert image files to thumbnails. For example, <span class="code">"C:\Program Files\ImageMagick-6.8.9-Q16\convert.exe" -define jpeg:size=319x319 ${filename} -thumbnail 319x319 cq5dam.thumbnail.319.319.png</span>.</p> 
    </note></li> 
   <li><p>To see if the tool runs properly, add a .jpg image to the working directory and run the command convert <span class="code">&amp;lt;image-name&amp;gt;.jpg -flip &amp;lt;image-name&amp;gt;-flipped.jpg</span> on the command line.<br /> A flipped image is added to the directory.</p> </li> 
  </ol> 
  <p>Then, add the command line process step to the <strong>DAM Update Asset workflow</strong>:</p> 
  <ol> 
   <li><p>Go to the<strong> Workflow</strong> console.</p> </li> 
   <li><p>In the <strong>Models</strong> tab, edit the <strong>DAM Update Asset</strong> model.</p> </li> 
   <li><p>Change the settings of the <strong>Web enabled rendition</strong> step as follows:<br /> <strong>Arguments</strong>:</p>  </li> 
   <li><p>Save the workflow.</p> </li> 
  </ol> 
  <p>Finally, test the modified workflow by adding a new asset to <strong>/content/dam</strong>:</p> 
  <ol> 
   <li><p>In the file system, get a .tiff image of your choice. Rename it to myImage.tiff and copy it to <strong>/content/dam</strong>, for example by using WebDAV.</p> </li> 
   <li><p>Go to the <strong>CQ5 DAM</strong> console, for example <span class="code">http://localhost:4502/libs/wcm/core/content/damadmin.html</span>.</p> </li> 
   <li><p>Open the asset <strong>myImage.tiff</strong> and verify that the flipped image and the three thumbnails have been created.</p> </li> 
  </ol> 
  <h4>Configuring the CommandLineProcess Process Step</h4> 
  <p>This section describes how to set the <strong>Process Arguments</strong> of the <strong>CommandLineProcess</strong>.</p> 
  <p>The values of the <strong>Process Arguments</strong> must be separated by a comma and must not start with a whitespace.</p> 
  <table border="1" cellpadding="1" cellspacing="0" columns="3" header="none" width="400"> 
   <tbody> 
    <tr> 
     <td> Argument-Format</td> 
     <td>Description <br /> </td> 
    </tr> 
    <tr> 
     <td> mime:&lt;mime-type&gt;</td> 
     <td><p>Optional argument. The process is applied if the asset has the same mime-type as the one of the argument.<br /> </p> <p>Several mime-types can be defined.<br /> </p> </td> 
    </tr> 
    <tr> 
     <td> tn:&lt;width&gt;:&lt;heigth&gt;</td> 
     <td><p>Optional argument. The process creates a thumbnail with the dimensions defined in the argument.</p> <p>Several thumbnails can be defined.<br /> </p> </td> 
    </tr> 
    <tr> 
     <td> cmd: &lt;command&gt;<br /> </td> 
     <td><p>Defines the command that will be executed. The syntax depends on the command line tool.</p> <p>Only one command can be defined.</p> <p>The following variables can be used to create the command:<br /> </p> <p><span class="code">${filename}</span>: name of the input file, e.g. original.jpg<br /> <span class="code">${file}</span>: full path name of the input file, e.g. /tmp/cqdam0816.tmp/original.jpg<br /> <span class="code">${directory}</span>: directory of the input file, e.g. /tmp/cqdam0816.tmp.<br /> <span class="code">${basename}</span>: name of the input file without its extension, e.g. original<br /> <span class="code">${extension}</span>: extension of the input file, e.g. jpg<br /> </p> </td> 
    </tr> 
   </tbody> 
  </table> 
  <p>For example, if ImageMagick is installed on the disk hosting the AEM server and if you create a process step using <strong>CommandLineProcess</strong> as Implementation and the following values as <strong>Process Arguments</strong>:</p> 
  <p><span class="code">mime:image/gif,mime:image/tiff,tn:140:100,tn:48:48,tn:10:250,cmd:convert ${directory}/${filename} -flip ${directory}/${basename}.flipped.jpg</span></p> 
  <p>then, when the workflow runs, the step only applies to assets that have image/gif or mime:image/tiff as mime-types, it creates a flipped image of the original, converts it into .jpg and creates three thumbnails that have the dimensions: 140x100, 48x48 and 10x250.</p> 
  <p>Use the following <strong>Process Arguments</strong> to create the three standard thumbnails using ImageMagick:</p> 
  <p><span class="code">mime:image/tiff,mime:image/png,mime:image/bmp,mime:image/gif,mime:image/jpeg,cmd:convert ${filename} -define jpeg:size=319x319 -thumbnail "319x319&amp;gt;" -background transparent -gravity center -extent 319x319 -write png:cq5dam.thumbnail.319.319.png -thumbnail "140x100&amp;gt;" -background transparent -gravity center -extent 140x100 -write cq5dam.thumbnail.140.100.png -thumbnail "48x48&amp;gt;" -background transparent -gravity center -extent 48x48 cq5dam.thumbnail.48.48.png</span></p> 
  <p>Use the following <strong>Process Arguments</strong> to create the web-enabled rendition using ImageMagick:</p> 
  <p><span class="code">mime:image/tiff,mime:image/png,mime:image/bmp,mime:image/gif,mime:image/jpeg,cmd:convert ${filename} -define jpeg:size=1280x1280 -thumbnail "1280x1280&amp;gt;" cq5dam.web.1280.1280.jpeg</span></p> 
  <note> 
   <p>The <strong>CommandLineProcess</strong> step only applies to Assets (nodes of type dam:Asset) or descendants of an Asset.<br /> </p> 
  </note> 
 </body> 
</html>