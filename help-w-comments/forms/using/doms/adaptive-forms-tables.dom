<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-04-03T08:00:45.692-0400" name="lastPublishExternalDate" /> 
  <meta content="2017-12-01T19:07:13.681-0500" name="jcr:created" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2015-08-03T10:00:52.999-0400" name="lastPublishQADate" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="Tables in adaptive forms" name="jcr:title" /> 
  <meta content="The Table component in AEM Forms lets you create tables in adaptive forms that are responsive to mobile layouts, and also allows using XDP table components. " name="seoDescription" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="/content/help/en/experience-manager/6-4/forms/morehelp/author;/content/help/en/experience-manager/6-4/forms/morehelp/author" name="moreHelpPaths" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/forms/using/adaptive-forms-tables.html" name="publishExternalURL" /> 
  <meta content="vishgupt" name="cq:lastModifiedBy" /> 
  <meta content="red" name="acrolinxPageStatus" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="vishgupt" name="acrolinxLastCheckedBy" /> 
  <meta content="2018-04-26T04:25:54.158-0400" name="cq:lastModified" /> 
  <meta content="2283" name="acrolinxWords" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="2016-05-31T06:31:31.726-0400" name="acrolinxDate" /> 
  <meta content="2018-04-26T04:25:54.157-0400" name="locHandOffDate" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2018-04-03T08:00:48.161-0400" name="cq:lastReplicated" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:author" name="cq:tags" /> 
  <meta content="ed7340a8-7b87-4198-a32a-aad67cf81d5a" name="jcr:uuid" /> 
  <meta content="Adaptive form tables" name="navTitle" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="2018-04-03T08:00:45.692-0400" name="publishExternalDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2016-04-20T09:28:54.551-0400" name="firstPublishExternalDate" /> 
  <meta content="112" name="acrolinxSentences" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2018-04-03T08:00:45.692-0400" name="topicBrowsingSortDate" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
  <meta content="http://checkstyle.corp.adobe.com:8031/output/en/adaptive_forms_tables_admin_5e12de0b318c6865_1949_report.xml" name="acrolinxReportURL" /> 
  <meta content="61c76a98-2720-4a26-be07-0b3cf91f3fc0" name="jcr:predecessors" /> 
 </head> 
 <body> 
  <p>Using tables is an effective, simplified, and organized way of presenting complex data. It helps users in identifying information easily and providing inputs in an ordered arrangement of rows and columns. Most forms from financial services and government organizations require large data tables to put numbers and perform calculations.</p> 
  <p>AEM Forms provides a Table component in the components browser in sidebar that lets you create tables in adaptive forms. Some of the key capabilities it provides are:</p> 
  <ul> 
   <li>Responsive layout on mobile devices</li> 
   <li>Configurable rows and columns</li> 
   <li>Dynamic addition and deletion of rows at runtime<br /> </li> 
   <li>Combine or merge and split cells</li> 
   <li>Accessible by screen readers</li> 
   <li>Custom layout using CSS</li> 
   <li>Compatible and mapped with XDP table component</li> 
   <li>Support for adding rows or cells using XSD complex type elements<br /> </li> 
   <li>Merge data from an XML file</li> 
  </ul> 
  <h2>Create a table</h2> 
  <p>To create a table, drag-and-drop the Table component from the components browser in the sidekick on the adaptive form. By default, the table contains two columns and three rows, including the header row.</p> 
  <img alt="Table component in AEM sidebar" imageRotate="0" src="assets/sidebar-tables.png" title="Table component in AEM sidebar" /> 
  <h3>About header and body cells</h3> 
  <p>The header cells are text fields. To change the label for a header, right-click the header cell and click <strong>Edit</strong>. In the Edit dialog, update the label in the <strong>Value</strong> field and click <strong>OK</strong>.</p> 
  <p>The body cells are text boxes, by default. You can replace a body cell with any other adaptive forms component available in the sidekick, such as a numeric box, date picker, or drop-down list.</p> 
  <p>For example, the first body row in the following table includes text box, date picker, and drop-down list components as cells.</p> 
  <img imageRotate="0" src="assets/row-cell-types.png" /> 
  <p>You can merge two or more body cells by selecting the cells you want to merge, right-click, and select <strong>Merge</strong>. Also, you can split a merged cell by right-clicking it and selecting <strong>Split Cells</strong>.</p> 
  <h3>Add, delete, move rows and columns</h3> 
  <p>You can add and delete a row or column, and move a row up and down in a table.</p> 
  <p>To add or delete a row or column or move a row, click any cell in the row or column. A drop-down menu appears at the top of the column and on the left of the row. The menu at the top provides options to add or delete the column, whereas the menu on the left allows you to add, delete, or move the row.</p> 
  <ul> 
   <li>The Add operation adds a row below or a column to the right of the selected row or column.</li> 
   <li>The Delete operation deletes the selected row or column.</li> 
   <li>The Move Up and Move Down operation moves the selected row up and down.</li> 
  </ul> 
  <p>The drop-down menu for the row also provides the Edit operation to edit row properties, settings, and styling options.</p> 
  <img imageRotate="0" src="assets/add-delete-move-row-column.png" /> 
  <note> 
   <p>While you can add any number of rows in a table, the maximum number of columns you can add is six. Also, you cannot delete the header row from the table.</p> 
  </note> 
  <h3>Add table description</h3> 
  <p>You can add a description of the table to explain how the information is organized that screen readers can interpret and read out. To add the description:</p> 
  <ol> 
   <li>Select the table and tap <img src="assets/cmppr.png" /> to see its properties in the sidebar.</li> 
   <li>Specify summary in the Accessibility tab.</li> 
   <li>Click <strong>Done</strong>.</li> 
  </ol> 
  <h2 id="configure">Configure table style</h2> 
  <p>You can define the style for a table by using the Style mode in the page toolbar. Perform the following steps to switch to style mode and edit the table styling</p> 
  <ol> 
   <li>In the page toolbar, before Preview, tap <img src="assets/canvas-drop-down.png" /> &amp;gt; <strong>Style</strong>.</li> 
   <li>In the sidebar select table and tap the edit button <img src="assets/edit-button.png" />. <br /> You can see the styling properties in the sidebar.</li> 
  </ol> 
  <img alt="Styling properties of a table" imageRotate="0" src="assets/style-table.png" title="Styling properties of a table" /> 
  <draft-comment type="draft"> 
   <p>In the Styling tab, you can specify the following properties for a table:</p> 
   <p><strong>Width</strong>: Specifies the width of the table, in percentage, with respect to the total width available for the table in the parent container.</p> 
   <p><strong>Height</strong>: Specifies the maximum height, in pixels, for the table.</p> 
   <p><strong>CSS class</strong>: Specifies a CSS class to apply any custom style to a table.</p> 
   <p><strong>Mobile layout</strong>: Specifies how a table should appear on a mobile device. The available options are Headers on Left and Collapsible Columns. For more information, see <a href="#-mobile-layouts-for">Mobile layouts for tables</a>.</p> 
   <p><strong>Column width</strong>: Specifies proportionate width for each column in a table as a comma-separated list. For example, if you specify <strong>1,2,3,4</strong> as the column width for a four-column table, the total table width will be distributed as 1/10, 2/10, 3/10, and 4/10 among the first, second, third, and fourth columns, respectively.</p> 
  </draft-comment> 
  <note> 
   <p>You can change the color theme for header and body rows by changing the values of LESS variables. For more information, see <a href="../../forms/using/themes.md" target="_blank">Themes in AEM Forms</a><a href="../../forms/using/creating-custom-adaptive-form-themes.md" target="_blank"></a>.</p> 
  </note> 
  <draft-comment type="draft"> 
   <h2>Change background color for table rows</h2> 
  </draft-comment> 
  <draft-comment type="draft"> 
   <p>The color theme for the header and body rows are defined in the <span class="code">globalvariables.less</span> file. To change the color theme for the rows:</p> 
   <ol> 
    <li>In CRXDE Lite, navigate to the <span class="code">/etc/clientlibs/fd/af/guidetheme/common/less/</span> folder.</li> 
    <li>Double-click to open the <span class="code">globalvariables.less</span> file.</li> 
    <li>Look for the following less variables and updated their values as required:<br /> 
     <ul> 
      <li><span class="code">@table-header-bg-color</span> - defines the color for the header row. The default value is #333.</li> 
      <li><span class="code">@table-odd-row-bg-color</span> - defines the color for the odd body row. The default value is <span class="code">rgb(255, 255, 255)</span>.</li> 
      <li><span class="code">@table-even-row-bg-color</span> - defines the color for the even body row, The default value is <span class="code">#eee</span>.</li> 
     </ul> </li> 
    <li>Save the file.</li> 
   </ol> 
   <p>The updated color theme will be applied to the tables in all adaptive forms.</p> 
  </draft-comment> 
  <h2>Add or delete a row dynamically</h2> 
  <p>Tables provide out-of-the box support for dynamically adding or deleting rows at runtime.</p> 
  <ol> 
   <li><p>Select a table row and tap <img src="assets/cmppr.png" />.</p> </li> 
   <li><p>In the Repeat settings tab, specify the minimum and maximum counts to limit the number of rows in the table.</p> </li> 
   <li><p>Click <strong>Done</strong>.</p> </li> 
  </ol> 
  <p>At runtime, you will see <strong>+</strong> and <em>-</em> buttons to add or delete a row.<br /> </p> 
  <img imageRotate="0" src="assets/add-delete-rows-dynamically.png" /> 
  <note> 
   <p>Adding or deleting a row dynamically is not supported in Headers on left mobile layout of tables.</p> 
  </note> 
  <h2>Expressions in a table</h2> 
  <p>Tables in adaptive forms allow you to write expressions in JavaScript to induce behaviors, such as show or hide a table or a row, add up all the numbers and show the total in a cell, enable or disable a cell, validate user input, and so on. These expressions use adaptive forms scripting model APIs. </p> 
  <p>While tables and rows support only visibility expressions to control their visibility based on the value returned by an expression, cells support the following expressions:</p> 
  <ul> 
   <li><strong>Initialization Script:</strong> to perform an action on initialization of a field.</li> 
   <li><strong>Value Commit Script:</strong> to change the components of a form after the value of a field is changed. </li> 
  </ul> 
  <note> 
   <p>If the XFA change/exit script is also applied to the same field, the XFA change/exit script executes before the Value Commit script.</p> 
  </note> 
  <ul> 
   <li><strong>Calculate expressions</strong>: to auto-compute value of a field.</li> 
   <li><strong>Validation expressions</strong>: to validate a field.</li> 
   <li><strong>Access expressions</strong>: to enable/disable a field.</li> 
   <li><strong>Visibility expression</strong>: to control visibility of a field and panel.</li> 
  </ul> 
  <p>The visibility expression for a table or a row can be defined in the Panel properties tab of their corresponding Edit component dialog. The expressions for a cell can be defined in the Script tab of its Edit component dialog.</p> 
  <p>For the complete list of adaptive forms classes, events, objects, and public APIs, see <a href="http://helpx.adobe.com/aem-forms/6/javascript-api/index.html">JavaScript Library API reference for adaptive forms</a>.</p> 
  <h2>Mobile layouts</h2> 
  <p>Tables in adaptive forms provide unmatched experience mobile devices because of its fluid and responsive layouts. AEM Forms offers two types of mobile layouts for tables - Headers on left and Collapsible columns.</p> 
  <p>You can configure a mobile layout for a table from the Styling tab of the Edit component dialog for a table.</p> 
  <h3>Headers on left</h3> 
  <p>In the Headers on left layout, the header in the table are transposed on the left with only one cell appearing against a header. Each row in this layout appears as a distinct section. The following images compare a table on a desktop with that on a mobile device.</p> 
  <img captionBottom="Desktop view of a table with Header on left layout" imageRotate="0" src="assets/desktopview.png" title="Desktop view of a table with Header on left layout" /> 
  <img captionBottom="Mobile view of a table with Header on left layout" imageRotate="0" src="assets/headersontheleft.png" title="Mobile view of a table with Header on left layout" /> 
  <h3>Collapsible columns layout</h3> 
  <p>In the Collapsible column layout, the columns in the table collapse to show one or two columns, depending on the device size, while other columns are collapsed. You can click the collapse/expand icon to view other columns in the table.</p> 
  <p><em><strong>Note</strong>: While Collapsible column layout is optimized for mobile devices, it will work on desktop as well, if the width available is not enough to show all the columns in a table. </em> </p> 
  <p>The following images compare how a table looks on a device with collapsed and expanded columns.</p> 
  <img captionBottom="Collapsed columns of a table with only two columns showing up on a mobile device" imageRotate="0" src="assets/collapsed-column.png" /> 
  <img captionBottom="Expanded column of a table on a mobile device" imageRotate="0" src="assets/collapsible_column.png" /> 
  <h2>Merge data in a table</h2> 
  <p>Tables in adaptive forms allow you to populate the table at runtime using data from an XML file. The data XML file can reside in the local file system of the machine where AEM Forms server is running or in the CRX repository.</p> 
  <p>Let’s take example of the following bank transaction summary table that we want to populate with data from an XML file.</p> 
  <img imageRotate="0" src="assets/data-merge-table.png" /> 
  <p>In this example, the Element name property for:</p> 
  <ul> 
   <li>the row is <strong>Row1</strong></li> 
   <li>the body cell under Transaction date is <strong>tableItem1</strong></li> 
   <li>the body cell under Description is <strong>tableItem2</strong></li> 
   <li>the body cell under Transaction type is <strong>type</strong></li> 
   <li>the body cell under Amount in USD is <strong>tableItem3</strong></li> 
  </ul> 
  <p>The XML file that contains data in the following format:</p> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&lt;afData&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;afUnboundData&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;data&gt;!!discoiqbr!!&amp;nbsp;&lt;typeSelect&gt;0&lt;/typeSelect&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2015-01-08&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Purchase&amp;nbsp;laptop&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;0&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;12000&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2015-01-05&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Transport&amp;nbsp;expense&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;0&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;120&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2014-01-08&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Laser&amp;nbsp;printer&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;0&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;500&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2014-12-08&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Credit&amp;nbsp;card&amp;nbsp;payment&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;0&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;300&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2015-01-06&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Interest&amp;nbsp;earnings&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;1&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;12000&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2015-01-05&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Payment&amp;nbsp;from&amp;nbsp;a&amp;nbsp;client&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;1&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;500&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;Row1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem1&gt;2015-01-08&lt;/tableItem1&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem2&gt;Food&amp;nbsp;expense&lt;/tableItem2&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;type&gt;0&lt;/type&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;tableItem3&gt;120&lt;/tableItem3&gt;!!discoiqbr!!&amp;nbsp;&lt;/Row1&gt;!!discoiqbr!!&amp;nbsp;&lt;/data&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/afUnboundData&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;afBoundData&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;data/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/afBoundData&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;afBoundData/&gt;!!discoiqbr!!&lt;/afData&gt;!!discoiqbr!! 
  </codeblock> 
  <p>In the sample XML, the data for a row is defined by the &amp;lt;Row1&amp;gt; tags, which is the element name for the row in the table. Within the <span class="code">&amp;lt;Row1&amp;gt;</span> tag, the data for each cell is defined within the tag for its element name, such as <span class="code">&amp;lt;tableItem1&amp;gt;</span>, <span class="code">&amp;lt;tableItem2&amp;gt;</span>, <span class="code">&amp;lt;tableItem3&amp;gt;</span>, and <span class="code">&amp;lt;type&amp;gt;</span>.</p> 
  <p>To merge this data with the table at runtime, we need to point the adaptive form containing the table to the absolute XML location with wcmmode disabled. For example, if the adaptive form is at <em>http://localhost:4502/myForms/bankTransaction.html</em> and the data XML file is saved at <em>C:/myTransactions/bankSummary.xml</em>, you can view the table with data at the following URL:</p> 
  <p><em>http://localhost:4502/myForms/bankTransaction.html?dataRef=file:/// C:/myTransactions/bankSummary.xml&amp;wcmmode=disabled</em> </p> 
  <img imageRotate="0" src="assets/data-merged-table.png" /> 
  <h2>Use XDP components and XSD complex types</h2> 
  <p>If you created an adaptive form based on an XFA form template, the XFA elements are available in the Data Model tab of AEM Content Finder. You can drag and drop these XFA elements, including tables, in the adaptive form.</p> 
  <p>The XFA table element is mapped to the Table component and works out-of-the-box in adaptive forms. All properties and functionalities of XDP table are preserved when moved into adaptive form, and you can perform any operation on it just as you do with native adaptive form table. For example, if a row in an XDP table is marked repeatable, it will be repeated when dropped in adaptive forms as well.</p> 
  <p>In addition, you can drag-drop XDP subform to add a new row in the table. However, note that dropping a nested subform does not work.</p> 
  <note> 
   <p>An XDP table without a header row will not be mapped to the adaptive form Table component. Instead, it will be mapped to the adaptive form Panel component with fluid layout. Also, when you add a nested table from an XDP to an adaptive form, the outer table gets converted to a panel while retaining the inner table.</p> 
  </note> 
  <p>In addition, you can drag-drop a group of XSD complex type elements to create a table row. A new row gets created just below the row on which you dropped the elements. The cells created using the XSD complex type elements maintain a binding reference to the XSD. You can also replace a body cell with an XSD complex type element by dropping the element onto the cell.</p> 
  <note> 
   <p>The number of elements in a XDP table component, a subform, or an XSD complex type cannot exceed the number of cells in a row. For example, you cannot drop four elements on a row that has only three cells. It will result in an error.</p> 
   <p>If the number of elements is less than the number of cells in a row, the new row first adds cells based on the elements, and then the default cells are added to fill in the remaining cells in the row. For example, if you drop a group of three elements in a row that has four cells, the first three cells are based on the elements you dropped and the remaining one cell will be the default table cell.</p> 
  </note> 
  <h2>Key considerations</h2> 
  <ul> 
   <li>If you move rows up and down while authoring an XSD-based table, some data loss from table rows is seen in the data XML generated on submitting the form.</li> 
   <li>Each body cell in a default table has a predefined element name associated with it. If you add another table in the adaptive form, the default body cells in the new table will have the same element name as in the first table. In such scenario, the data generated on submitting the form will include data in the default body cells of only one of the tables. Therefore, ensure that you rename the element names for default body cells to keep them unique across tables and avoid data loss.<br /> <br /> Note that this is applicable only to the default body cells. If you add more rows or columns to a table will autogenerate unique element names for non-default body cells.</li> 
  </ul> 
 </body> 
</html>