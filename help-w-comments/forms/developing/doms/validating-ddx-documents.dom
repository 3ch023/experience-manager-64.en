<?xml version="1.1" encoding="UTF-8" standalone="yes"?>
<html>
 <head>
  <meta content="Validating DDX Documents" name="jcr:title" />
  <meta content="2017-08-09T03:29:46.122-0400" name="lr_lastModified" />
  <meta content="Activate" name="cq:lastReplicationAction" />
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" />
  <meta content="head1_20111213" name="gep_conversion_script_version" />
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/validating-ddx-documents.html" name="publishExternalURL" />
  <meta content="carlino" name="cq:lastReplicatedBy" />
  <meta content="a576b9a6-6bbd-4735-89bf-e5771f1c7050" name="jcr:predecessors" />
  <meta content="audience:developing" name="primaryAudienceTag" />
  <meta content="content_type:reference;geptopics:SG_AEMFORMS/categories/assembling_pdf_documents;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" />
  <meta content="admin" name="jcr:createdBy" />
  <meta content="en_us" name="jcr:language" />
  <meta content="2018-04-03T08:33:06.379-0400" name="cq:lastReplicated" />
  <meta content="admin" name="lr_creator" />
  <meta content="2017-11-21T06:59:54.227-0500" name="cq:lastModified" />
  <meta content="2017-08-09T03:29:00.000-0400" name="sortDate" />
  <meta content="2017-11-22T19:07:05.141-0500" name="jcr:created" />
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" />
  <meta content="true" name="jcr:isCheckedOut" />
  <meta content="2017-10-03T06:52:32.382-0400" name="firstPublishExternalDate" />
  <meta content="2017-08-09T03:29:00.000-0400" name="topicBrowsingSortDate" />
  <meta content="2017-10-03T06:52:32.382-0400" name="lastPublishExternalDate" />
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7f93.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12558da22f1336a357248-7fff.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7378.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7377.2" name="cq:gepId" />
  <meta content="" name="jcr:baseVersion" />
  <meta content="admin" name="contentOwner" />
  <meta content="admin" name="lr_lastModifiedBy" />
  <meta content="mix:versionable" name="jcr:mixinTypes" />
  <meta content="2017-10-03T06:52:32.382-0400" name="publishExternalDate" />
  <meta content="help/components/pages/article-3" name="sling:resourceType" />
  <meta content="carlino" name="cq:lastModifiedBy" />
  <meta content="/etc/designs/help" name="cq:designPath" />
  <meta content="" name="jcr:versionHistory" />
  <meta content="" name="jcr:primaryType" />
  <meta content="5858e13a-ce03-4dd6-bb98-24eccb35579d" name="jcr:uuid" />
  <meta content="/apps/help/templates/article-3" name="cq:template" />
  <meta content="Validating DDX Documents Validating DDX Documents" name="navTitle" />
 </head>
 <body>
  <p>You can programmatically validate a DDX document that is used by the Assembler service. That is, using the Assembler service API, you can determine whether or not a DDX document is valid. For example, if you upgraded from a previous AEM Forms version and you want to ensure that your DDX document is valid, you can validate it using the Assembler service API. </p>
  <note>
   <p>For more information about the Assembler service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p>
  </note>
  <note>
   <p>For more information about a DDX document, see <a href="http://www.adobe.com/go/learn_aemforms_ddx_63">Assembler Service and DDX Reference</a>. </p>
  </note>
  <h2 id="summary_of_steps">Summary of steps</h2>
  <p></p>
  <p>To validate a DDX document, perform the following tasks:</p>
  <ol>
   <li><p>Include project files.</p></li>
   <li><p>Create an Assembler client.</p></li>
   <li><p>Reference an existing DDX document.</p></li>
   <li><p>Set run-time options to validate the DDX document. </p></li>
   <li><p>Perform the validation. </p></li>
   <li><p>Save the validation results in a log file.</p></li>
  </ol>
  <p><strong>Include project files</strong></p>
  <p>Include the necessary files in your development project. If you are creating a client application by using Java, include the necessary JAR files. If you are using web services, ensure that you include the proxy files.</p>
  <p>The following JAR files must be added to your project’s class path:</p>
  <ul>
   <li><p>adobe-livecycle-client.jar</p></li>
   <li><p>adobe-usermanager-client.jar</p></li>
   <li><p>adobe-assembler-client.jar</p></li>
   <li><p>adobe-utilities.jar (required if AEM Forms is deployed on JBoss) </p></li>
   <li><p>jbossall-client.jar (required if AEM Forms is deployed on JBoss)</p></li>
  </ul>
  <p>if AEM Forms is deployed on a supported J2EE application server other than JBoss, you must replace the adobe-utilities.jar and jbossall-client.jar files with JAR files that are specific to the J2EE application server that AEM Forms is deployed on.</p>
  <p><strong>Create a PDF Assembler client</strong></p>
  <p>Before you can programmatically perform an Assembler operation, you must create an Assembler service client.</p>
  <p><strong>Reference an existing DDX document</strong></p>
  <p>To validate a DDX document, you must reference an existing DDX document. </p>
  <p><strong>Set run-time options to validate the DDX document</strong></p>
  <p>When validating a DDX document, you must set specific run-time options that instruct the Assembler service to validate the DDX document as opposed to executing it. Also, you can increase the amount of information that the Assembler service writes to the log file.</p>
  <p><strong>Perform the validation</strong></p>
  <p>After you create the Assembler service client, reference the DDX document, and set run-time options, you can invoke the <span class="code">invokeDDX</span> operation to validate the DDX document. When validating the DDX document, you can pass <span class="code">null</span> as the map parameter (this parameter usually stores PDF documents that the Assembler requires to perform the operation(s) specified in the DDX document). </p>
  <p>If validation fails, an exception is thrown and the log file contains details that explains why the DDX document is invalid can be obtained from the <span class="code">OperationException</span> instance. Once past the basic XML parsing and schema checking, then the validation against the DDX specification is performed. All errors that are located in the DDX document are specified in the log.</p>
  <p><strong>Save the validation results in a log file</strong></p>
  <p>The Assembler service returns the validation results that you can write to a XML log file. The amount of detail that the Assembler service writes to the log file depends on the run-time option that you set. </p>
  <p><strong>See also</strong></p>
  <p><a href="/programming-with-aem-forms/validating-ddx-documents-validating-ddx validate-ddx-document-using-java#validate_a_ddx_document_using_the_java_api">Validate a DDX document using the Java API</a></p>
  <p><a href="/programming-with-aem-forms/validating-ddx-documents-validating-ddx validate-ddx-document-using-web#validate_a_ddx_document_using_the_web_service_api">Validate a DDX document using the web service API</a></p>
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p>
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p>
  <p><a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a></p>
  <h2 id="validate_a_ddx_document_using_the_java_api">Validate a DDX document using the Java API</h2>
  <p></p>
  <p>Validate a DDX document by using the Assembler Service API (Java):</p>
  <ol>
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-assembler-client.jar, in your Java project’s class path. </p></li>
   <li><p>Create a PDF Assembler client. </p>
    <ul>
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties.</p></li>
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object. </p></li>
    </ul></li>
   <li><p>Reference an existing DDX document. </p>
    <ul>
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object that represents the DDX document by using its constructor and passing a string value that specifies the location of the DDX file.</p></li>
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object by using its constructor and passing the <span class="code">java.io.FileInputStream</span> object.</p></li>
    </ul></li>
   <li><p>Set run-time options to validate the DDX document. </p>
    <ul>
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li>
     <li><p>Set the run-time option that instructs the Assembler service to validate the DDX document by invoking the <span class="code">AssemblerOptionSpec</span> object’s setValidateOnly method and passing <span class="code">true</span>. </p></li>
     <li><p>Set the amount of information that the Assembler service writes to the log file by invoking the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">getLogLevel</span> method and passing a string value meets your requirements. When validating a DDX document, you want more information written to the log file that will assist in the validation process. As a result, you can pass the value <span class="code">FINE</span> or <span class="code">FINER</span>. </p></li>
    </ul></li>
   <li><p>Perform the validation. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following values:</p>
    <ul>
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that represents the DDX document.</p></li>
     <li><p>The value <span class="code">null</span> for the java.io.Map object that usually stores PDF documents. </p></li>
     <li><p>A <span class="code">com.adobe.livecycle.assembler.client.AssemblerOptionSpec</span> object that specifies the run-time options.</p></li>
    </ul><p>The <span class="code">invokeDDX</span> method returns an <span class="code">AssemblerResult</span> object that contains information that specifies whether the DDX document is valid. </p></li>
   <li><p>Save the validation results in a log file. </p>
    <ul>
     <li><p>Create a <span class="code">java.io.File</span> object and ensure that the file name extension is .xml.</p></li>
     <li><p>Invoke the <span class="code">AssemblerResult</span> object’s <span class="code">getJobLog</span> method. This method returns a <span class="code">com.adobe.idp.Document</span> instance that contains validation information. </p></li>
     <li><p>Invoke the <span class="code">com.adobe.idp.Document</span> object’s <span class="code">copyToFile</span> method to copy the contents of the <span class="code">com.adobe.idp.Document</span> object to the file.</p></li>
    </ul>
    <note>
     <p>If the DDX document is invalid, an <span class="code">OperationException</span> is thrown. Within the catch statement, you can invoke the <span class="code">OperationException</span> object's <span class="code">getJobLog</span> method.</p>
    </note></li>
  </ol>
  <p><strong>See also</strong></p>
  <p><a href="validating-ddx-documents-validating-ddx#validating_ddx_documents">Validating DDX Documents</a></p>
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f7a.2">Quick Start (SOAP mode): Validating DDX documents using the Java API</a> (SOAP mode)</p>
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p>
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p>
  <h2 id="validate_a_ddx_document_using_the_web_service_api">Validate a DDX document using the web service API</h2>
  <p></p>
  <p>Validate a DDX document by using the Assembler Service API (web service):</p>
  <ol>
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition: <span class="code">http://localhost:8080/soap/services/AssemblerService?WSDL&amp;lc_version=9.0.1</span>. </p>
    <note>
     <p>Replace localhost with the IP address of the forms server.</p>
    </note></li>
   <li><p>Create a PDF Assembler client. </p>
    <ul>
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its default constructor. </p></li>
     <li><p>Create an <span class="code">AssemblerServiceClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/AssemblerService?blob=mtom</span>). You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference.</p></li>
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">AssemblerServiceClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li>
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li>
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p>
      <ul>
       <li><p>Assign the AEM forms user name to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.UserName</span>.</p></li>
       <li><p>Assign the corresponding password value to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.Password</span>.</p></li>
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li>
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li>
      </ul></li>
    </ul></li>
   <li><p>Reference an existing DDX document. </p>
    <ul>
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the DDX document.</p></li>
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the DDX document and the mode to open the file in.</p></li>
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li>
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method and passing the byte array, the starting position, and the stream length to read.</p></li>
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> property with the contents of the byte array.</p></li>
    </ul></li>
   <li><p>Set run-time options to validate the DDX document. </p>
    <ul>
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li>
     <li><p>Set the run-time option that instructs the Assembler service to validate the DDX document by assigning the value true to the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">validateOnly</span> data member. </p></li>
     <li><p>Set the amount of information that the Assembler service writes to the log file by assigning a string value to the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">logLevel</span> data member. method When validating a DDX document, you want more information written to the log file that will assist in the validation process. As a result, you can specify the value <span class="code">FINE</span> or <span class="code">FINER</span>. For information about the run-time options that you can set, see the <span class="code">AssemblerOptionSpec</span> class reference in <a href="http://www.adobe.com/go/learn_aemforms_javadocs_63_en">AEM Forms API Reference</a>. </p></li>
    </ul></li>
   <li><p>Perform the validation. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following values:</p>
    <ul>
     <li><p>A <span class="code">BLOB</span> object that represents the DDX document.</p></li>
     <li><p>The value <span class="code">null</span> for the <span class="code">Map</span> object that usually stores PDF documents. </p></li>
     <li><p>An <span class="code">AssemblerOptionSpec</span> object that specifies run-time options.</p></li>
    </ul><p>The <span class="code">invokeDDX</span> method returns an <span class="code">AssemblerResult</span> object that contains information that specifies whether the DDX document is valid.</p></li>
   <li><p>Save the validation results in a log file. </p>
    <ul>
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the log file and the mode to open the file in. Ensure that the file name extension is .xml.</p></li>
     <li><p>Create a <span class="code">BLOB</span> object that stores log information by getting the value of the <span class="code">AssemblerResult</span> object’s <span class="code">jobLog</span> data member. </p></li>
     <li><p>Create a byte array that stores the content of the <span class="code">BLOB</span> object. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> field.</p></li>
     <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li>
     <li><p>Write the contents of the byte array to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li>
    </ul>
    <note>
     <p>If the DDX document is invalid, an <span class="code">OperationException</span> is thrown. Within the catch statement, you can get the value of the <span class="code">OperationException</span> object's <span class="code">jobLog</span> member.</p>
    </note></li>
  </ol>
  <p><strong>See also</strong></p>
  <p><a href="validating-ddx-documents-validating-ddx#validating_ddx_documents">Validating DDX Documents</a></p>
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f79.2">Quick Start (MTOM): Validating DDX documents using the web service API</a></p>
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe7.2">Invoking AEM Forms using MTOM</a></p>
 </body>
</html>