<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="content_type:reference;geptopics:SG_AEMFORMS/categories/assembling_pdf_documents;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
  <meta content="Dynamically Creating DDX Documents" name="jcr:title" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/dynamically-creating-ddx-documents.html" name="publishExternalURL" /> 
  <meta content="Dynamically Creating DDX Documents Dynamically Creating DDX Documents" name="navTitle" /> 
  <meta content="2017-10-03T06:52:16.073-0400" name="lastPublishExternalDate" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="sortDate" /> 
  <meta content="2017-10-03T06:52:16.073-0400" name="publishExternalDate" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="181a0e86-2a49-48e4-b3cc-77e87149b551" name="jcr:uuid" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7fed.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e1221212ae1336a357342-7ffe.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7361.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7360.2" name="cq:gepId" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2017-10-03T06:52:16.073-0400" name="firstPublishExternalDate" /> 
  <meta content="2017-11-21T06:59:33.931-0500" name="cq:lastModified" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="2017-11-22T19:07:11.074-0500" name="jcr:created" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2018-04-03T08:32:20.478-0400" name="cq:lastReplicated" /> 
  <meta content="2017-08-09T03:29:42.601-0400" name="lr_lastModified" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="topicBrowsingSortDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="04f489cd-4c72-460b-8e80-6a98a7a66b67" name="jcr:predecessors" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="admin" name="lr_creator" /> 
 </head> 
 <body> 
  <p>You can dynamically create a DDX document that can be used to perform an Assembler operation. Dynamically creating a DDX document enables you to use values in the DDX document that are obtained during run-time. To dynamically create a DDX document, use classes that belong to the programming language that you are using. For example, if you are developing your client application using Java, use classes that belong to the <span class="code">org.w3c.dom.* </span>package. Likewise, if you are using Microsoft .NET, use classes that belong to the <span class="code">System.Xml</span> namespace.</p> 
  <p>Before you can pass the DDX document to the Assembler service, convert the XML from an <span class="code">org.w3c.dom.Document</span> instance to a <span class="code">com.adobe.idp.Document</span> instance. If you are using web services, convert the XML from the data type used to create the XML(for example, <span class="code">XmlDocument</span>) to a <span class="code">BLOB</span> instance. </p> 
  <p>For this discussion, assume that the following DDX document is dynamically created.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&amp;nbsp;!!discoiqbr!! &lt;DDX&amp;nbsp;xmlns="http://ns.adobe.com/DDX/1.0/"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDFsFromBookmarks&amp;nbsp;prefix="stmt"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;source="AssemblerResultPDF.pdf"/&gt;&amp;nbsp;!!discoiqbr!! &lt;/PDFsFromBookmarks&gt;&amp;nbsp;!!discoiqbr!! &lt;/DDX&gt; 
  </codeblock> 
  <p>This DDX document disassembles a PDF document. It is recommended that you be familiar with disassembling PDF documents.</p> 
  <note> 
   <p>For more information about the Assembler service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <note> 
   <p>For more information about a DDX document, see <a href="http://www.adobe.com/go/learn_aemforms_ddx_63">Assembler Service and DDX Reference</a>. </p> 
  </note> 
  <h2 id="summary_of_steps">Summary of steps</h2> 
  <p></p> 
  <p>To disassemble a PDF document by using a dynamically created DDX document, perform the following tasks:</p> 
  <ol> 
   <li><p>Include project files.</p></li> 
   <li><p>Create a PDF Assembler client.</p></li> 
   <li><p>Create the DDX document.</p></li> 
   <li><p>Convert the DDX document. </p></li> 
   <li><p>Set run-time options.</p></li> 
   <li><p>Disassemble the PDF document. </p></li> 
   <li><p>Save the disassembled PDF documents.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include the necessary files in your development project. If you are creating a client application by using Java, include the necessary JAR files. If you are using web services, ensure that you include the proxy files. </p> 
  <p>The following JAR files must be added to your project’s class path:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-assembler-client.jar</p></li> 
   <li><p>adobe-utilities.jar (required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p><strong>Create a PDF Assembler client</strong></p> 
  <p>Before you can programmatically perform an Assembler operation, create an Assembler service client.</p> 
  <p><strong>Create the DDX document</strong></p> 
  <p>Create a DDX document using the programming language that you are using. To create a DDX document that disassembles a PDF document, ensure that it contains the <span class="code">PDFsFromBookmarks</span> element. Convert the data type used to create the DDX document to a <span class="code">com.adobe.idp.Document</span> instance if you are using the Java API. If you are using web services, convert the data type to a <span class="code">BLOB</span> instance.</p> 
  <p><strong>Convert the DDX document</strong></p> 
  <p>A DDX document that is created by using <span class="code">org.w3c.dom</span> classes must be converted to a <span class="code">com.adobe.idp.Document</span> object. To perform this task when using the Java API, use Java XML transform classes. If you are using web services, convert the DDX document to a <span class="code">BLOB</span> object. </p> 
  <p><strong>Reference a PDF document to disassemble</strong></p> 
  <p>To disassemble a PDF document, reference a PDF file that represents the PDF document to disassemble. When passed to the Assembler service, a separate PDF document is returned for each level 1 bookmark in the document.</p> 
  <p><strong>Set run-time options</strong></p> 
  <p>You can set run-time options that control the behavior of the Assembler service while it performs a job. For example, you can set an option that instructs the Assembler service to continue processing a job if an error is encountered. To set run-time options, you use an <span class="code">AssemblerOptionSpec</span> object.</p> 
  <p><strong>Disassemble the PDF document</strong></p> 
  <p>Disassemble the PDF document by invoking the <span class="code">invokeDDX</span> operation. Pass the DDX document that was dynamically created. The Assembler service returns disassembled PDF documents within a collection object.</p> 
  <p><strong>Save the disassembled PDF documents</strong></p> 
  <p>All disassembled PDF documents are returned within a collection object. Iterate through the collection object and save each PDF document as a PDF file. </p> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/dynamically-creating-ddx-documents-dynamically dynamically-creating-ddx-documents-dynamically#dynamically_create_a_ddx_document_using_the_java_api">Dynamically create a DDX document using the Java API</a></p> 
  <p><a href="/programming-with-aem-forms/dynamically-creating-ddx-documents-dynamically dynamically-creating-ddx-documents-dynamically#dynamically_create_a_ddx_document_using_the_web_service_api">Dynamically create a DDX document using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a></p> 
  <p><a href="/programming-with-aem-forms/programmatically-disassembling-pdf-documents-programmatically#programmatically_disassembling_pdf_documents">Programmatically Disassembling PDF Documents</a></p> 
  <h2 id="dynamically_create_a_ddx_document_using_the_java_api">Dynamically create a DDX document using the Java API</h2> 
  <p></p> 
  <p>Dynamically create a DDX document and disassemble a PDF document by using the Assembler Service API (Java):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-assembler-client.jar, in your Java project’s class path.</p></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties.</p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object. </p></li> 
    </ul></li> 
   <li><p>Create the DDX document. </p> 
    <ul> 
     <li><p>Create a Java <span class="code">DocumentBuilderFactory</span> object by calling the <span class="code">DocumentBuilderFactory</span> class’ <span class="code">newInstance</span> method.</p></li> 
     <li><p>Create a Java <span class="code">DocumentBuilder</span> object by calling the <span class="code">DocumentBuilderFactory</span> object’s <span class="code">newDocumentBuilder</span> method.</p></li> 
     <li><p>Call the <span class="code">DocumentBuilder</span> object’s <span class="code">newDocument</span> method to instantiate a <span class="code">org.w3c.dom.Document</span> object.</p></li> 
     <li><p>Create the DDX document’s root element by invoking the <span class="code">org.w3c.dom.Document</span> object’s <span class="code">createElement</span> method. This method creates an <span class="code">Element</span> object that represents the root element. Pass a string value representing the name of the element to the <span class="code">createElement</span> method. Cast the return value to <span class="code">Element</span>. Next, set a value for the child element by calling its <span class="code">setAttribute</span> method. Finally, append the element to the header element by calling the header element’s <span class="code">appendChild</span> method, and pass the child element object as an argument. The following lines of code show this application logic:</p><span class="code"> Element root = (Element)document.createElement("DDX");  root.setAttribute("xmlns","http://ns.adobe.com/DDX/1.0/");  document.appendChild(root);</span></li> 
     <li><p>Create the <span class="code">PDFsFromBookmarks</span> element by calling the <span class="code">Document</span> object’s <span class="code">createElement</span> method. Pass a string value representing the name of the element to the <span class="code">createElement</span> method. Cast the return value to <span class="code">Element</span>. Set a value for the <span class="code">PDFsFromBookmarks</span> element by calling its <span class="code">setAttribute</span> method. Append the <span class="code">PDFsFromBookmarks</span> element to the <span class="code">DDX</span> element by calling the DDX element’s <span class="code">appendChild</span> method. Pass the <span class="code">PDFsFromBookmarks</span> element object as an argument. The following lines of code show this application logic:</p><span class="code"> Element PDFsFromBookmarks = (Element)document.createElement("PDFsFromBookmarks");  PDFsFromBookmarks.setAttribute("prefix","stmt");  root.appendChild(PDFsFromBookmarks);</span></li> 
     <li><p>Create a <span class="code">PDF</span> element by calling the <span class="code">Document</span> object’s <span class="code">createElement</span> method. Pass a string value that represents the element’s name. Cast the return value to <span class="code">Element</span>. Set a value for the <span class="code">PDF</span> element by calling its <span class="code">setAttribute</span> method. Append the <span class="code">PDF</span> element to the <span class="code">PDFsFromBookmarks</span> element by calling the <span class="code">PDFsFromBookmarks</span> element’s <span class="code">appendChild</span> method. Pass the <span class="code">PDF</span> element object as an argument. The following lines of code shows this application logic:</p><span class="code"> Element PDF = (Element)document.createElement("PDF");  PDF.setAttribute("source","AssemblerResultPDF.pdf");  PDFsFromBookmarks.appendChild(PDF);</span></li> 
    </ul></li> 
   <li><p>Convert the DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">javax.xml.transform.Transformer</span> object by invoking the <span class="code">javax.xml.transform.Transformer</span> object’s static <span class="code">newInstance</span> method. </p></li> 
     <li><p>Create a <span class="code">Transformer</span> object by invoking the <span class="code">TransformerFactory</span> object’s <span class="code">newTransformer</span> method. </p></li> 
     <li><p>Create a <span class="code">ByteArrayOutputStream</span> object by using its constructor. </p></li> 
     <li><p>Create a<span class="code"> javax.xml.transform.dom.DOMSource</span> object by using its constructor. Pass the <span class="code">org.w3c.dom.Document</span> object that represents the DDX document.</p></li> 
     <li><p>Create a <span class="code">javax.xml.transform.dom.DOMSource</span> object by using its constructor and passing the <span class="code">ByteArrayOutputStream</span> object.</p></li> 
     <li><p>Populate the Java <span class="code">ByteArrayOutputStream</span> object by invoking the <span class="code">javax.xml.transform.Transformer</span> object’s <span class="code">transform</span> method. Pass the <span class="code">javax.xml.transform.dom.DOMSource</span> and the <span class="code">javax.xml.transform.stream.StreamResult</span> objects. </p></li> 
     <li><p>Create a byte array and allocate the size of the <span class="code">ByteArrayOutputStream</span> object to the byte array. </p></li> 
     <li><p>Populate the byte array by invoking the <span class="code">ByteArrayOutputStream</span> object’s <span class="code">toByteArray</span> method. </p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object by using its constructor and passing the byte array. </p></li> 
    </ul></li> 
   <li><p>Reference a PDF document to disassemble. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.util.Map</span> object that is used to store input PDF documents by using a <span class="code">HashMap</span> constructor.</p></li> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object by using its constructor and passing the location of the PDF document to disassemble. </p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object. Pass the <span class="code">java.io.FileInputStream</span> object that contains the PDF document to disassemble. </p></li> 
     <li><p>Add an entry to the <span class="code">java.util.Map</span> object by invoking its <span class="code">put</span> method and passing the following arguments:</p> 
      <ul> 
       <li><p>A string value that represents the key name. This value must match the value of the PDF source element specified in the DDX document. (In the DDX document that is dynamically created, the value is <span class="code">AssemblerResultPDF.pdf</span>.)</p></li> 
       <li><p>A <span class="code">com.adobe.idp.Document</span> object that contains the PDF document to disassemble.</p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Set run-time options. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by invoking a method that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, invoke the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">setFailOnError</span> method and pass <span class="code">false</span>.</p></li> 
    </ul></li> 
   <li><p>Disassemble the PDF document. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that represents the dynamically created DDX document</p></li> 
     <li><p>A <span class="code">java.util.Map</span> object that contains the PDF document to disassemble</p></li> 
     <li><p>A <span class="code">com.adobe.livecycle.assembler.client.AssemblerOptionSpec</span> object that specifies the run-time options, including the default font and the job log level</p></li> 
    </ul><p>The <span class="code">invokeDDX</span> method returns a <span class="code">com.adobe.livecycle.assembler.client.AssemblerResult</span> object that contains the disassembled PDF documents and any exceptions that occurred.</p></li> 
   <li><p>Save the disassembled PDF documents. </p><p>To obtain the disassembled PDF documents, perform the following actions:</p> 
    <ul> 
     <li><p>Invoke the <span class="code">AssemblerResult</span> object’s <span class="code">getDocuments</span> method. This method returns a <span class="code">java.util.Map</span> object.</p></li> 
     <li><p>Iterate through the <span class="code">java.util.Map</span> object until you find the resultant <span class="code">com.adobe.idp.Document</span> object.</p></li> 
     <li><p>Invoke the <span class="code">com.adobe.idp.Document</span> object’s <span class="code">copyToFile</span> method to extract the PDF document.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/dynamically-creating-ddx-documents-dynamically dynamically-creating-ddx-documents-dynamically#dynamically_creating_ddx_documents">Dynamically Creating DDX Documents</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f6c.2">Quick Start (SOAP mode): Dynamically creating a DDX document using the Java API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <h2 id="dynamically_create_a_ddx_document_using_the_web_service_api">Dynamically create a DDX document using the web service API</h2> 
  <p></p> 
  <p>Dynamically create a DDX document and disassemble a PDF document by using the Assembler Service API (web service):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition when setting a service reference: <span class="code">http://localhost:8080/soap/services/AssemblerService?WSDL&amp;lc_version=9.0.1</span>. </p> 
    <note> 
     <p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms. </p> 
    </note></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its default constructor. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/AssemblerService?blob=mtom</span>). You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. </p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">AssemblerServiceClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.UserName</span>.</p></li> 
       <li><p>Assign the corresponding password value to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.Password</span>.</p></li> 
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Create the DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">System.Xml.XmlElement</span> object by using its constructor.</p></li> 
     <li><p>Create the DDX document’s root element by invoking the <span class="code">XmlElement</span> object’s <span class="code">CreateElement</span> method. This method creates an <span class="code">Element</span> object that represents the root element. Pass a string value representing the name of the element to the <span class="code">CreateElement</span> method. Set a value for the DDX element by calling its <span class="code">SetAttribute</span> method. Finally, append the element to the DDX document by calling the <span class="code">XmlElement</span> object’s <span class="code">AppendChild</span> method. Pass the DDX object as an argument. The following lines of code show this application logic:</p><span class="code"> System.Xml.XmlElement root = ddx.CreateElement("DDX");  root.SetAttribute("xmlns", "http://ns.adobe.com/DDX/1.0/");  ddx.AppendChild(root);</span></li> 
     <li><p>Create the DDX document’s <span class="code">PDFsFromBookmarks</span> element by calling the <span class="code">XmlElement</span> object’s <span class="code">CreateElement</span> method. Pass a string value representing the name of the element to the <span class="code">CreateElement</span> method. Next, set a value for the element by calling its <span class="code">SetAttribute</span> method. Append the <span class="code">PDFsFromBookmarks</span> element to the root element by calling the <span class="code">DDX</span> element’s <span class="code">AppendChild</span> method. Pass the <span class="code">PDFsFromBookmarks</span> element object as an argument. The following lines of code show this application logic:</p><span class="code"> XmlElement PDFsFromBookmarks = ddx.CreateElement("PDFsFromBookmarks");  PDFsFromBookmarks.SetAttribute("prefix", "stmt");  root.AppendChild(PDFsFromBookmarks);</span></li> 
     <li><p>Create the DDX document’s <span class="code">PDF</span> element by calling the <span class="code">XmlElement</span> object’s <span class="code">CreateElement</span> method. Pass a string value representing the name of the element to the <span class="code">CreateElement</span> method. Next, set a value for the child element by calling its <span class="code">SetAttribute</span> method. Append the <span class="code">PDF</span> element to the <span class="code">PDFsFromBookmarks</span> element by calling the <span class="code">PDFsFromBookmarks</span> element’s <span class="code">AppendChild</span> method. Pass the <span class="code">PDF</span> element object as an argument. The following lines of code shows this application logic:</p><span class="code"> XmlElement PDF = ddx.CreateElement("PDF");  PDF.SetAttribute("source", "AssemblerResultPDF.pdf");  PDFsFromBookmarks.AppendChild(PDF);</span></li> 
    </ul></li> 
   <li><p>Convert the DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">System.IO.MemoryStream</span> object by using its constructor.</p></li> 
     <li><p>Populate the <span class="code">MemoryStream</span> object with the DDX document by using the <span class="code">XmlElement</span> object that represents the DDX document. Invoke the <span class="code">XmlElement</span> object’s <span class="code">Save</span> method and pass the <span class="code">MemoryStream</span> object.</p></li> 
     <li><p>Create a byte array and populate it with data located in the <span class="code">MemoryStream</span> object. The following code shows this application logic:</p><span class="code"> int bufLen = Convert.ToInt32(stream.Length);  byte[] byteArray = new byte[bufLen];  stream.Position = 0;  int count = stream.Read(byteArray, 0, bufLen);</span></li> 
     <li><p>Create a <span class="code">BLOB</span> object. Assign the byte array to the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> field. </p></li> 
    </ul></li> 
   <li><p>Reference a PDF document to disassemble. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the input PDF document. This <span class="code">BLOB</span> object is passed to the <span class="code">invokeOneDocument</span> as an argument. </p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that represents the file location of the input PDF document and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method and passing the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> property the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Set run-time options. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by assigning a value to a data member that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, assign <span class="code">false</span> to the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">failOnError</span> data member. </p></li> 
    </ul></li> 
   <li><p>Disassemble the PDF document. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">BLOB</span> object that represents the dynamically created DDX document</p></li> 
     <li><p>The <span class="code">mapItem</span> array that contains the input PDF document</p></li> 
     <li><p>An <span class="code">AssemblerOptionSpec</span> object that specifies run-time options</p></li> 
    </ul><p>The <span class="code">invokeDDX</span> method returns an <span class="code">AssemblerResult</span> object that contains the results of the job and any exceptions that occurred. </p></li> 
   <li><p>Save the disassembled PDF documents. </p><p>To obtain the newly created PDF documents, perform the following actions:</p> 
    <ul> 
     <li><p>Access the <span class="code">AssemblerResult</span> object’s <span class="code">documents</span> field, which is a <span class="code">Map</span> object that contains the disassembled PDF documents.</p></li> 
     <li><p>Iterate through the <span class="code">Map</span> object to obtain each resultant document. Then, cast that array member’s <span class="code">value</span> to a <span class="code">BLOB</span>.</p></li> 
     <li><p>Extract the binary data that represents the PDF document by accessing its <span class="code">BLOB</span> object’s <span class="code">MTOM</span> property. This returns an array of bytes that you can write out to a PDF file.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/dynamically-creating-ddx-documents-dynamically dynamically-creating-ddx-documents-dynamically#dynamically_creating_ddx_documents">Dynamically Creating DDX Documents</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f6b.2">Quick Start (MTOM mode): Dynamically creating a DDX document using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f6a.2">Quick Start (SwaRef mode): Dynamically creating a DDX document using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe7.2">Invoking AEM Forms using MTOM</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe6.2">Invoking AEM Forms using SwaRef</a></p> 
 </body> 
</html>