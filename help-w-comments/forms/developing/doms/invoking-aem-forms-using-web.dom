<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="2170aa84-19c7-4c23-b770-08f647614539" name="jcr:uuid" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="Invoking AEM Forms using Web Services" name="jcr:title" /> 
  <meta content="content_type:reference;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:coding" name="cq:tags" /> 
  <meta content="admin" name="lr_creator" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="Invoking AEM Forms using Web Services" name="navTitle" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="/content/help/en/experience-manager/6-4/forms/developing/morehelp/coding;/content/help/en/experience-manager/6-4/forms/developing/morehelp/coding" name="moreHelpPaths" /> 
  <meta content="2017-10-03T06:48:41.321-0400" name="lastPublishExternalDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7fd4.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7ff5.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7b1c.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7b03.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7fca.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7afd.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7af3.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7fe7.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7ff0.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7feb.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7fe6.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7fe3.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7dbe.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7aeb.2,AEMForms/6.1/ProgramLC/WSd4ecd2f680edf5553618c284134386e2c7a-8000.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7db4.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7aff.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7ae8.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7fd1.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7fd0.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7fcc.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e8929091336a351d33-7fc8.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7ae6.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7ae5.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7b06.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7ae3.2" name="cq:gepId" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/invoking-aem-forms-using-web.html" name="publishExternalURL" /> 
  <meta content="2017-07-12T07:03:38.830-0400" name="lr_lastModified" /> 
  <meta content="40bc2543-3a86-46c0-aa72-180bcf9973e3" name="jcr:predecessors" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2017-07-12T07:03:00.000-0400" name="sortDate" /> 
  <meta content="2017-11-22T19:05:53.510-0500" name="jcr:created" /> 
  <meta content="2017-10-03T06:48:41.321-0400" name="publishExternalDate" /> 
  <meta content="2017-10-03T06:48:41.321-0400" name="firstPublishExternalDate" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2017-11-21T06:58:29.423-0500" name="cq:lastModified" /> 
  <meta content="2017-07-12T07:03:00.000-0400" name="topicBrowsingSortDate" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="2018-04-03T08:22:23.020-0400" name="cq:lastReplicated" /> 
 </head> 
 <body> 
  <p>Most AEM Forms services in the service container are configured to expose a web service, with full support for web service definition language (WSDL) generation. That is, you can create proxy objects that consume the native SOAP stack of an AEM Forms service. As a result, AEM Forms services can exchange and process the following SOAP messages: </p> 
  <ul> 
   <li><p><strong>SOAP request</strong>: Sent to a Forms service by a client application requesting an action. </p></li> 
   <li><p><strong>SOAP response</strong>: Sent to a client application by a Forms service after a SOAP request is processed.</p></li> 
  </ul> 
  <p>Using web services, you can perform the same AEM Forms services operations that you can by using the Java API. A benefit of using web services to invoke AEM Forms services is that you can create a client application in a development environment that supports SOAP. A client application is not bound to a specific development environment or programming language. For example, you can create a client application using Microsoft Visual Studio .NET and C# as the programming language.</p> 
  <p>AEM Forms services are exposed over the SOAP protocol and are WSI Basic Profile 1.1 compliant. Web Services Interoperability (WSI) is an open standards organization that promotes web service interoperability across platforms. For information, see <a href="http://www.ws-i.org">http://www.ws-i.org/</a>. </p> 
  <p>AEM Forms supports the following web service standards:</p> 
  <ul> 
   <li><p><strong>Encoding</strong>: Supports only document and literal encoding (which is the preferred encoding according to the WSI Basic Profile). (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a>.)</p></li> 
   <li><p><strong>MTOM</strong>: Represents a way to encode attachments with SOAP requests. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a>.)</p></li> 
   <li><p><strong>SwaRef</strong>: Represents another way to encode attachments with SOAP requests. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</a>.)</p></li> 
   <li><p><strong>SOAP with attachments</strong>: Supports both MIME and DIME (Direct Internet Message Encapsulation). These protocols are standard ways of sending attachments over SOAP. Microsoft Visual Studio .NET applications use DIME. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a>.)</p></li> 
   <li><p><strong>WS-Security</strong>: Supports a user name password token profile, which is a standard way of sending user names and passwords as part of the WS Security SOAP header. AEM Forms also supports HTTP basic authentication. (See <a href="http://www.adobe.com/devnet/livecycle/articles/passing_credentials.html">Passing credentials using WS-Security headers</a>.)</p></li> 
  </ul> 
  <p>To invoke AEM Forms services using a web service, typically you create a proxy library that consumes the service WSDL. The <i>Invoking AEM Forms using Web Services</i> section uses JAX-WS to create Java proxy classes to invoke services. (See <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</a>.)</p> 
  <p>You can retrieve a service WDSL by specifying the following URL definition (items in brackets are optional):</p> 
  <codeblock gutter="true" class="syntax as3">
     http://&lt;your_serverhost&gt;:&lt;your_port&gt;/soap/services/&lt;service_name&gt;?wsdl[&amp;version=&lt;version&gt;][&amp;async=true|false][lc_version=&lt;lc_version&gt;] 
  </codeblock> 
  <p>where:</p> 
  <ul> 
   <li><p><i>your_serverhost</i> represents the IP address of the J2EE application server hosting AEM Forms.</p></li> 
   <li><p><i>your_port</i> represents the HTTP port that the J2EE application server uses.</p></li> 
   <li><p><i>service_name</i> represents the service name. </p></li> 
   <li><p><i>version</i> represents the target version of a service (the latest service version is used by default).</p></li> 
   <li><p><span class="code">async</span> specifies the value <span class="code">true</span> to enable additional operations for asynchronous invocation (<span class="code">false</span> by default).</p></li> 
   <li><p><i>lc_version</i> represents the version of AEM Forms that you want to invoke. </p></li> 
  </ul> 
  <p>The following table lists service WSDL definitions (assuming that AEM Forms is deployed on the local host and the post is 8080).</p> 
  <table cellpadding="4" cellspacing="0"> 
   <thead align="left"> 
    <tr> 
     <th class="cellrowborder" id="d19e9268" valign="top" width="NaN%"><p>Service</p></th> 
     <th class="cellrowborder" id="d19e9271" valign="top" width="NaN%"><p>WSDL definition</p></th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Assembler</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ AssemblerService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Back and Restore</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/BackupService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>barcoded forms</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ BarcodedFormsService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Convert PDF</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ ConvertPDFService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Distiller</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ DistillerService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>DocConverter </p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/DocConverterService?WSDL</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>DocumentManagement</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/DocumentManagementService?WSDL</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Encryption </p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/EncryptionService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Forms</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/FormsService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Form Data Integration</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/FormDataIntegration?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Generate PDF</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ GeneratePDFService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Generate 3D PDF</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/Generate3dPDFService?WSDL</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Output</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ OutputService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>PDF Utilities </p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ PDFUtilityService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Acrobat Reader DC extensions</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ ReaderExtensionsService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Repository</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ RepositoryService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Rights Management </p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ RightsManagementService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>Signature </p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ SignatureService?wsdl</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9268 " valign="top" width="NaN%"><p>XMP Utilities</p></td> 
     <td class="cellrowborder" headers="d19e9271 " valign="top" width="NaN%"><p><span class="code">http://localhost:8080/soap/services/ XMPUtilityService?wsdl</span></p></td> 
    </tr> 
   </tbody> 
  </table> 
  <p><strong>AEM Forms Process WSDL definitions</strong></p> 
  <p>You must specify the Application name and the Process name within the WSDL definition to access a WSDL that belongs to a process created in Workbench. Assume that the name of the application is <span class="code">MyApplication</span> and the name of the process is <span class="code">EncryptDocument</span>. In this situation, specify the following WSDL definition:</p> 
  <codeblock gutter="true" class="syntax as3">
     http://localhost:8080/soap/services/MyApplication/EncryptDocument?wsdl 
  </codeblock> 
  <note> 
   <p>For information about the example <span class="code">MyApplication/EncryptDocument</span> short-lived process, see <a href="#unresolvedlink-lc-in-invoke-using-apis-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b77.2">Short lived process example</a>.</p> 
  </note> 
  <note> 
   <p>An Application can contain folder(s). In this case, specify the folder name(s) in the WSDL definition:</p> 
  </note> 
  <codeblock gutter="true" class="syntax as3">
     http://localhost:8080/soap/services/MyApplication/[&lt;folderA&gt;/.../&lt;folderZ&gt;/]EncryptDocument?wsdl 
  </codeblock> 
  <p><strong>Accessing new functionality using web services</strong></p> 
  <p>New AEM Forms service functionality can be accessed using web services. For example, in AEM Forms, the ability to encode attachments using MTOM is introduced. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a>.)</p> 
  <p>To access new functionality introduced in AEM Forms, specify the <span class="code">lc_version</span> attribute in the WSDL definition. For example, to access new service functionality (including MTOM support), specify the following WSDL definition:</p> 
  <codeblock gutter="true" class="syntax as3">
     http://localhost:8080/soap/services/MyApplication/EncryptDocument?wsdl&amp;lc_version=9.0.1 
  </codeblock> 
  <note> 
   <p>When setting the <span class="code">lc_version</span> attribute, ensure that you use three digits. For example, 9.0.1 is equal to version 9.0. </p> 
  </note> 
  <p><strong>Web service BLOB data type</strong></p> 
  <p>AEM Forms service WSDLs define many data types. One of the most important data types exposed in a web service is a <span class="code">BLOB</span> type. This data type maps to the <span class="code">com.adobe.idp.Document</span> class when working with AEM Forms Java APIs. (See <a href="/programming-with-aem-forms/invoking-aem-forms-using-java#passing_data_to_aem_forms_services_using_the_java_api">Passing data to AEM Forms services using the Java API</a>.)</p> 
  <p>A <span class="code">BLOB</span> object sends and retrieves binary data (for example, PDF files, XML data, and so on) to and from AEM Forms services. The <span class="code">BLOB</span> type is defined in a service WSDL as follows:</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;complexType&amp;nbsp;name="BLOB"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;sequence&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="contentType"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="xsd:string"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="binaryData"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="xsd:base64Binary"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="attachmentID"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="xsd:string"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="remoteURL"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="xsd:string"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="MTOM"&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="xsd:base64Binary"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmime:expectedContentTypes="*/*"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:xmime="http://www.w3.org/2005/05/xmlmime"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="swaRef"&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="tns1:swaRef"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;element&amp;nbsp;maxOccurs="1"&amp;nbsp;minOccurs="0"&amp;nbsp;name="attributes"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type="impl:MyMapOf_xsd_string_To_xsd_anyType"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/sequence&gt;&amp;nbsp;!!discoiqbr!! &lt;/complexType&gt; 
  </codeblock> 
  <p>The <span class="code">MTOM</span> and <span class="code">swaRef</span> fields are supported only in AEM Forms. You can use those new fields only if you specify a URL that includes the <span class="code">lc_version</span> property.</p> 
  <p><strong>Supplying BLOB objects in service requests</strong></p> 
  <p>If an AEM Forms service operation requires a <span class="code">BLOB</span> type as an input value, create an instance of the <span class="code">BLOB</span> type in your application logic. (Many of the web service quick starts located in <i>Programming with AEM forms</i> show how to work with a BLOB data type.)</p> 
  <p>Assign values to fields that belong to the <span class="code">BLOB</span> instance as follows:</p> 
  <ul> 
   <li><p><strong>Base64</strong>: To pass data as text encoded in a Base64 format, set the data in the <span class="code">BLOB.binaryData</span> field and set the data type in the MIME format (for example <span class="code">application/pdf</span>) in the <span class="code">BLOB.contentType</span> field. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a>.)</p></li> 
   <li><p><strong>MTOM</strong>: To pass binary data in an MTOM attachment, set the data in the <span class="code">BLOB.MTOM</span> field. This setting attaches the data to the SOAP request using the Java JAX-WS framework or the SOAP framework's native API. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a>.)</p></li> 
   <li><p><strong>SwaRef</strong>: To pass binary data in an WS-I SwaRef attachment, set the data in the <span class="code">BLOB.swaRef</span> field. This setting attaches the data to the SOAP request using the Java JAX-WS framework. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</a>.)</p></li> 
   <li><p><strong>MIME or DIME attachment</strong>: To pass data in a MIME or DIME attachment, attach the data to the SOAP request using the SOAP framework's native API. Set the attachment identifier in the <span class="code">BLOB.attachmentID</span> field. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a>.)</p></li> 
   <li><p><strong>Remote URL</strong>: If data is hosted on a web server and accessible over an HTTP URL, set the HTTP URL in the <span class="code">BLOB.remoteURL</span> field. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_blob_data_over_http">Invoking AEM Forms using BLOB data over HTTP</a>.)</p></li> 
  </ul> 
  <p><strong>Accessing data in BLOB objects returned from services</strong></p> 
  <p>The transmission protocol for returned <span class="code">BLOB</span> objects depends on several factors, which are considered in the following order, stopping when the main condition is satisfied:</p> 
  <ol> 
   <li><p><strong>Target URL specifies transmission protocol</strong>. If the target URL specified at the SOAP invocation contains the parameter <span class="code">blob="</span><i>BLOB_TYPE</i>", then <i>BLOB_TYPE</i> determines the transmission protocol. <i>BLOB_TYPE</i> is a placeholder for base64, dime, mime, http, mtom, or swaref. </p></li> 
   <li><p><strong>Service SOAP endpoint is Smart</strong>. If the following conditions are true, then the output documents are returned using the same transmission protocol as the input documents:</p> 
    <ul> 
     <li><p>Service's SOAP endpoint parameter Default Protocol For Output Blob Objects is set to Smart. </p><p>For each service with a SOAP endpoint, the administration console allows you to specify the transmission protocol for any returned blobs. (See <a href="http://www.adobe.com/go/learn_aemforms_admin_63">administration help</a>.) </p></li> 
     <li><p>AEM Forms service takes one or more documents as input. </p></li> 
    </ul></li> 
   <li><p><strong>Service SOAP endpoint is not Smart</strong>. The configured protocol determines the document transmission protocol, and the data is returned in the corresponding <span class="code">BLOB</span> field. For example, if the SOAP endpoint is set to DIME, then the returned blob is in the <span class="code">blob.attachmentID</span> field regardless of the transmission protocol of any input document.</p></li> 
   <li><p><strong>Otherwise</strong>. If a service does not take the document type as input, then the output documents are returned in the <span class="code">BLOB.remoteURL</span> field over the HTTP protocol.</p></li> 
  </ol> 
  <p>As described in the first condition, you can ensure the transmission type for any returned documents by extending the SOAP endpoint URL with a suffix as follows:</p> 
  <codeblock gutter="true" class="syntax as3">
     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http://&lt;your_serverhost&gt;:&lt;your_port&gt;/soap/services/&lt;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&gt;?blob=base64|dime|mime|http|mtom|swaref 
  </codeblock> 
  <p>Here is the correlation between transmission types and the field from which you obtain the data:</p> 
  <ul> 
   <li><p><strong>Base64 format</strong>: Set the <span class="code">blob</span> suffix to <span class="code">base64</span> to return the data in the <span class="code">BLOB.binaryData</span> field. </p></li> 
   <li><p><strong>MIME or DIME attachment</strong>: Set the <span class="code">blob</span> suffix to <span class="code">DIME</span> or <span class="code">MIME</span> to return the data as a corresponding attachment type with the attachment identifier returned in the <span class="code">BLOB.attachmentID</span> field. Use the SOAP framework's proprietary API to read the data from the attachment. </p></li> 
   <li><p><strong>Remote URL</strong>: Set the <span class="code">blob</span> suffix to <span class="code">http</span> to keep the data on the application server and return the URL pointing to the data in the <span class="code">BLOB.remoteURL</span> field. </p></li> 
   <li><p><strong>MTOM or SwaRef</strong>: Set the <span class="code">blob</span> suffix to <span class="code">mtom</span> or <span class="code">swaref</span> to return the data as a corresponding attachment type with the attachment identifier returned in the <span class="code">BLOB.MTOM</span> or <span class="code">BLOB.swaRef</span> fields. Use the SOAP framework's native API to read the data from the attachment. </p></li> 
  </ul> 
  <note> 
   <p>It is recommended that you do not exceed 30 MB when populating a <span class="code">BLOB</span> object by invoking its <span class="code">setBinaryData</span> method. Otherwise, there is a possibility that an <span class="code">OutOfMemory</span><i> exception occurs.</i></p> 
  </note> 
  <note> 
   <p>JAX WS-based applications that use the MTOM transmission protocol are limited to 25MB of sent and received data. This limitation is due to a bug in JAX-WS. If the combined size of your sent and received files exceeds 25MB, use the the SwaRef transmission protocol instead of the MTOM one. Otherwise, there is a possibility of an <span class="code">OutOfMemory</span><i> exception.</i></p> 
  </note> 
  <p><strong>MTOM transmission of base64-encoded byte arrays</strong></p> 
  <p>In addition to the <span class="code">BLOB</span> object, the MTOM protocol supports any byte-array parameter or byte-array field of a complex type. This means that client SOAP frameworks supporting MTOM can send any <span class="code">xsd:base64Binary</span> element as an MTOM attachment (instead of a base64-encoded text). AEM Forms SOAP endpoints can read this type of byte-array encoding. However, the AEM Forms service always returns a byte-array type as a base64-encoded text. The output byte-array parameters do not support MTOM. </p> 
  <p>AEM Forms services that return a large amount of binary data use the Document/BLOB type rather than the byte-array type. The Document type is much more efficient for transmitting large amounts of data.</p> 
  <h2 id="web_service_data_types">Web service data types</h2> 
  <p></p> 
  <p>The following table lists Java data types and shows the corresponding web service data type.</p> 
  <table cellpadding="4" cellspacing="0"> 
   <thead align="left"> 
    <tr> 
     <th class="cellrowborder" id="d19e9837" valign="top" width="NaN%"><p>Java data type</p></th> 
     <th class="cellrowborder" id="d19e9840" valign="top" width="NaN%"><p>Web service data type</p></th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.byte[]</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:base64Binary</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Boolean</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:boolean</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.util.Date</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p>The <span class="code">DATE</span> type, which is defined in a service WSDL as follows:</p><p><span class="code">&lt;complexType name="DATE"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="date" </span><span class="code">type="xsd:dateTime" /&gt; </span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="calendar" </span><span class="code">type="xsd:dateTime" /&gt; </span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p>If a AEM Forms service operation takes a <span class="code">java.util.Date</span> value as input, the SOAP client application must pass the date in the <span class="code">DATE.date</span> field. Setting the <span class="code">DATE.calendar</span> field in this case causes a runtime exception. If the service returns a <span class="code">java.util.Date</span>, the date is retuned in the <span class="code">DATE.date</span> field.</p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.util.Calendar</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p>The <span class="code">DATE</span> type, which is defined in a service WSDL as follows:</p><p><span class="code">&lt;complexType name="DATE"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="date" </span><span class="code">type="xsd:dateTime" /&gt; </span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="calendar" </span><span class="code">type="xsd:dateTime" /&gt; </span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p>If a AEM Forms service operation takes a <span class="code">java.util.Calendar</span> value as input, the SOAP client application must pass the date in the <span class="code">DATE.caledendar</span> field. Setting the <span class="code">DATE.date</span> field in this case causes a run-time exception. If the service returns a <span class="code">java.util.Calendar</span>, then the date is returned in the <span class="code">DATE.calendar</span> field. </p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.math.BigDecimal</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:decimal</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">com.adobe.idp.Document</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">BLOB</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Double</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:double</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Float</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:float</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Integer</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:int</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.util.List</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">MyArrayOf_xsd_anyType</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Long</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:long</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.util.Map</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p>The <span class="code">apachesoap:Map</span>, which is defined in a service WSDL as follows:</p><p><span class="code">&lt;schema elementFormDefault="qualified" targetNamespace="http://xml.apache.org/xml-soap" xmlns="http://www.w3.org/2001/XMLSchema"&gt;</span></p><p><span class="code">&lt;complexType name="mapItem"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element name="key" nillable="true" type="xsd:anyType"/&gt;</span></p><p><span class="code">&lt;element name="value" nillable="true" type="xsd:anyType"/&gt;</span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p><span class="code">&lt;complexType name="Map"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element maxOccurs="unbounded" minOccurs="0" name="item" </span><span class="code">type="apachesoap:mapItem"/&gt;</span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p><span class="code">&lt;/schema&gt;</span></p><p>The Map is represented as a sequence of key/value pairs.</p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Object</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:anyType</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.Short</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:short</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">java.lang.String</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p><span class="code">xsd:string</span></p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">org.w3c.dom.Document</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p>The XML type, which is defined in a service WSDL as follows:</p><p><span class="code">&lt;complexType name="XML"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="document" </span><span class="code">type="xsd:string" /&gt; </span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="element" </span><span class="code">type="xsd:string" /&gt; </span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p>If an AEM Forms service operation accepts an <span class="code">org.w3c.dom.Document</span> value, pass the XML data in the <span class="code">XML.document</span> field.</p><p>Setting the <span class="code">XML.element</span> field causes a runtime exception. If the service returns an <span class="code">org.w3c.dom.Document</span>, then the XML data is returned in the <span class="code">XML.document</span> field.</p></td> 
    </tr> 
    <tr> 
     <td class="cellrowborder" headers="d19e9837 " valign="top" width="NaN%"><p><span class="code">org.w3c.dom.Element</span></p></td> 
     <td class="cellrowborder" headers="d19e9840 " valign="top" width="NaN%"><p>The XML type, which is defined in a service WSDL as follows:</p><p><span class="code">&lt;complexType name="XML"&gt;</span></p><p><span class="code">&lt;sequence&gt;</span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="document" </span><span class="code">type="xsd:string" /&gt; </span></p><p><span class="code">&lt;element maxOccurs="1" minOccurs="0" name="element" </span><span class="code">type="xsd:string" /&gt; </span></p><p><span class="code">&lt;/sequence&gt;</span></p><p><span class="code">&lt;/complexType&gt;</span></p><p>If an AEM Forms service operation takes an <span class="code">org.w3c.dom.Element</span> as input, pass the XML data in the <span class="code">XML.element</span> field.</p><p>Setting the <span class="code">XML.document</span> field causes a runtime exception. If the service returns an <span class="code">org.w3c.dom.Element</span>, then the XML data is retuned in the <span class="code">XML.element</span> field.</p></td> 
    </tr> 
   </tbody> 
  </table> 
  <p><strong>Adobe Developer website</strong></p> 
  <p>The Adobe Developer website contains the following article that discusses invoking AEM Forms services using the web service API:</p> 
  <p><a href="http://www.adobe.com/devnet/livecycle/articles/asp_net.html">Creating form rendering ASP.NET applications</a></p> 
  <p><a href="http://www.adobe.com/devnet/livecycle/articles/extend_webservices.html">Invoking web services using custom components </a></p> 
  <note> 
   <p>Invoking web services using custom components describes how to create a AEM Forms component that invokes third party web services. </p> 
  </note> 
  <h2 id="creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</h2> 
  <p></p> 
  <p>You can use JAX-WS to convert a Forms service WSDL to Java proxy classes. These classes enable you to invoke AEM Forms services operations. Apache Ant lets you create a build script that generates Java proxy classes by referencing a AEM Forms service WSDL. You can generate JAX-WS proxy files by performing the following steps:</p> 
  <ol> 
   <li><p>Install Apache Ant on the client computer. (See <a href="http://ant.apache.org/bindownload.cgi">http://ant.apache.org/bindownload.cgi</a>.)</p> 
    <ul> 
     <li><p>Add the bin directory to your class path.</p></li> 
     <li><p>Set the <span class="code">ANT_HOME</span> environment variable to the directory where you installed Ant. </p></li> 
    </ul></li> 
   <li><p>Install JDK 1.6 or later. </p> 
    <ul> 
     <li><p>Add the JDK bin directory to your class path.</p></li> 
     <li><p>Add the JRE bin directory to your class path. This bin is located in the [<i>JDK_INSTALL_LOCATION</i>]/jre directory.</p></li> 
     <li><p>Set the <span class="code">JAVA_HOME</span> environment variable to the directory where you installed the JDK. </p></li> 
    </ul><p>JDK 1.6 includes the wsimport program used in the build.xml file. JDK 1.5 does not include that program.</p></li> 
   <li><p>Install JAX-WS on the client computer. (See <a href="https://jax-ws.dev.java.net/jax-ws-ea3/docs/mtom-swaref.html">Java API for XML Web Services</a>.) </p></li> 
   <li><p>Use JAX-WS and Apache Ant to generate Java proxy classes. Create an Ant build script to accomplish this task. The following script is a sample Ant build script named build.xml:</p> 
    <codeblock gutter="true" class="syntax as3">
       &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;project&amp;nbsp;basedir="."&amp;nbsp;default="compile"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;property&amp;nbsp;name="port"&amp;nbsp;value="8080"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;property&amp;nbsp;name="host"&amp;nbsp;value="localhost"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;property&amp;nbsp;name="username"&amp;nbsp;value="administrator"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;property&amp;nbsp;name="password"&amp;nbsp;value="password"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;property&amp;nbsp;name="tests"&amp;nbsp;value="all"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;target&amp;nbsp;name="clean"&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;delete&amp;nbsp;dir="classes"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;/target&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;target&amp;nbsp;name="wsdl"&amp;nbsp;depends="clean"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;mkdir&amp;nbsp;dir="classes"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;exec&amp;nbsp;executable="wsimport"&amp;nbsp;failifexecutionfails="false"&amp;nbsp;failonerror="true"&amp;nbsp;resultproperty="foundWSIMPORT"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;line="-keep&amp;nbsp;-d&amp;nbsp;classes&amp;nbsp;http://${host}:${port}/soap/services/EncryptionService?wsdl&amp;amp;lc_version=9.0.1"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/exec&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;fail&amp;nbsp;unless="foundWSIMPORT"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!!&amp;nbsp;Failed&amp;nbsp;to&amp;nbsp;execute&amp;nbsp;JDK's&amp;nbsp;wsimport&amp;nbsp;tool.&amp;nbsp;Make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;JDK&amp;nbsp;1.6&amp;nbsp;(or&amp;nbsp;later)&amp;nbsp;is&amp;nbsp;on&amp;nbsp;your&amp;nbsp;PATH&amp;nbsp;!!!&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/fail&gt;&amp;nbsp;!!discoiqbr!! &lt;/target&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;target&amp;nbsp;name="compile"&amp;nbsp;depends="clean,&amp;nbsp;wsdl"&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;javac&amp;nbsp;destdir="./classes"&amp;nbsp;fork="true"&amp;nbsp;debug="true"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;src&amp;nbsp;path="./src"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/javac&gt;&amp;nbsp;!!discoiqbr!! &lt;/target&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;target&amp;nbsp;name="run"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;java&amp;nbsp;classname="Client"&amp;nbsp;fork="yes"&amp;nbsp;failonerror="true"&amp;nbsp;maxmemory="200M"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;classpath&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;pathelement&amp;nbsp;location="./classes"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/classpath&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;value="${port}"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;value="${host}"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;value="${username}"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;value="${password}"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;arg&amp;nbsp;value="${tests}"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/java&gt;&amp;nbsp;!!discoiqbr!! &lt;/target&gt;&amp;nbsp;!!discoiqbr!! &lt;/project&gt; 
    </codeblock><p>Within this Ant build script, notice that the <span class="code">url</span> property is set to reference the Encryption service WSDL running on localhost. The <span class="code">username</span> and <span class="code">password</span> properties must be set to a valid AEM forms user name and password. Notice that the URL contains the <span class="code">lc_version</span> attribute. Without specifying the <span class="code">lc_version</span> option, you cannot invoke new AEM Forms service operations. </p> 
    <note> 
     <p>Replace <span class="code">EncryptionService</span><i> with the AEM Forms service name that you want to invoke using Java proxy classes. For example, to create Java proxy classes for the Rights Management service, specify:</i></p> 
    </note> 
    <codeblock gutter="true" class="syntax as3">
       http://localhost:8080/soap/services/RightsManagementService?WSDL&amp;lc_version=9.0.1 
    </codeblock></li> 
   <li><p>Create a BAT file to execute the Ant build script. The following command can be located within a BAT file that is responsible for executing the Ant build script:</p> 
    <codeblock gutter="true" class="syntax as3">
       ant&amp;nbsp;-buildfile&amp;nbsp;"build.xml"&amp;nbsp;wsdl 
    </codeblock><p>Place the ANT build script in the C:\Program Files\Java\jaxws-ri\bin directory. The script writes the JAVA files to the ./classes folder. The script generates JAVA files that can invoke the service.</p></li> 
   <li><p>Package the JAVA files into a JAR file. If you are working on Eclipse, follow these steps:</p> 
    <ul> 
     <li><p>Create a new Java project that is used to package the proxy JAVA files into a JAR file.</p></li> 
     <li><p>Create a source folder in the project.</p></li> 
     <li><p>Create a<span class="code"> com.adobe.idp.services</span> package in the Source folder. </p></li> 
     <li><p>Select the <span class="code">com.adobe.idp.services</span> package and then import the JAVA files from the adobe/idp/services folder into the package. </p></li> 
     <li><p>If necessary, create an <span class="code">org/apache/xml/xmlsoap</span> package in the Source folder.</p></li> 
     <li><p>Select the source folder and then import the JAVA files from the org/apache/xml/xmlsoap folder.</p></li> 
     <li><p>Set the Java compiler’s compliance level to 5.0 or greater.</p></li> 
     <li><p>Build the project.</p></li> 
     <li><p>Export the project as a JAR file.</p></li> 
     <li><p>Import this JAR file in a client project’s class path. In addition, import all of the JAR files located in &amp;lt;Install Directory&amp;gt;\Adobe\Adobe_Experience_Manager_forms\sdk\client-libs\thirdparty. </p></li> 
    </ul> 
    <note> 
     <p>All Java web service quick starts (except for the Forms service) located in Programming with AEM forms create Java proxy files using JAX-WS. In addition, all Java web service quick starts, use SwaRef. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</a>.)</p> 
    </note></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_apache_axis">Creating Java proxy classes using Apache Axis</a></p> 
  <p><a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a></p> 
  <p><a href="invoking-aem-forms-using-web#invoking_aem_forms_using_blob_data_over_http">Invoking AEM Forms using BLOB data over HTTP</a></p> 
  <p><a href="invoking-aem-forms-using-web#invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</a></p> 
  <h2 id="creating_java_proxy_classes_using_apache_axis">Creating Java proxy classes using Apache Axis</h2> 
  <p></p> 
  <p>You can use the Apache Axis WSDL2Java tool to convert a Forms service into Java proxy classes. These classes enable you to invoke Forms service operations. Using Apache Ant, you can generate Axis library files from a service WSDL. You can download Apache Axis at the URL <a href="http://ws.apache.org/axis/">http://ws.apache.org/axis/</a>.</p> 
  <note> 
   <p>The web service quick starts associated with the Forms service use Java proxy classes created using Apache Axis. The Forms web service quick starts also use Base64 as the encoding type. (See <a href="/programming-with-aem-forms/forms-service-api-quick-starts#forms_service_api_quick_starts">Forms Service API Quick Starts</a>.)</p> 
  </note> 
  <p>You can generate Axis Java library files by performing the following steps:</p> 
  <ol> 
   <li><p>Install Apache Ant on the client computer. It is available at <a href="http://ant.apache.org/bindownload.cgi">http://ant.apache.org/bindownload.cgi</a>.</p> 
    <ul> 
     <li><p>Add the bin directory to your class path.</p></li> 
     <li><p>Set the <span class="code">ANT_HOME</span> environment variable to the directory where you installed Ant. </p></li> 
    </ul></li> 
   <li><p>Install Apache Axis 1.4 on the client computer. It is available at <a href=" http://ws.apache.org/axis/">http://ws.apache.org/axis/</a>. </p></li> 
   <li><p>Set up the class path to use the Axis JAR files in your web service client, as described in the Axis installation instructions at <a href="http://ws.apache.org/axis/java/install.html">http://ws.apache.org/axis/java/install.html</a>.</p></li> 
   <li><p>Use the Apache WSDL2Java tool in Axis to generate Java proxy classes. Create an Ant build script to accomplish this task. The following script is a sample Ant build script named build.xml:</p> 
    <codeblock gutter="true" class="syntax as3">
       &lt;?xml&amp;nbsp;version="1.0"?&gt;&amp;nbsp;!!discoiqbr!! &lt;project&amp;nbsp;name="axis-wsdl2java"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;path&amp;nbsp;id="axis.classpath"&gt;&amp;nbsp;!!discoiqbr!! &lt;fileset&amp;nbsp;dir="C:\axis-1_4\lib"&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;include&amp;nbsp;name="**/*.jar"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &lt;/fileset&gt;&amp;nbsp;!!discoiqbr!! &lt;/path&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;taskdef&amp;nbsp;resource="axis-tasks.properties"&amp;nbsp;classpathref="axis.classpath"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;target&amp;nbsp;name="encryption-wsdl2java-client"&amp;nbsp;description="task"&gt;&amp;nbsp;!!discoiqbr!! &lt;axis-wsdl2java&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output="C:\JavaFiles"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;testcase="false"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;serverside="false"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose="true"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;username="administrator"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;password="password"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;url="http://localhost:8080/soap/services/EncryptionService?wsdl&amp;amp;lc_version=9.0.1"&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &lt;/axis-wsdl2java&gt;&amp;nbsp;!!discoiqbr!! &lt;/target&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &lt;/project&gt; 
    </codeblock><p>Within this Ant build script, notice that the <span class="code">url</span> property is set to reference the Encryption service WSDL running on localhost. The <span class="code">username</span> and <span class="code">password</span> properties must be set to a valid AEM forms user name and password.</p></li> 
   <li><p>Create a BAT file to execute the Ant build script. The following command can be located within a BAT file that is responsible for executing the Ant build script:</p> 
    <codeblock gutter="true" class="syntax as3">
       ant&amp;nbsp;-buildfile&amp;nbsp;"build.xml"&amp;nbsp;encryption-wsdl2java-client 
    </codeblock><p>The JAVA files are written to the C:\JavaFiles folder as specified by the <span class="code">output</span> property. To successfully invoke the Forms service, import these JAVA files into your class path. </p><p>By default, these files belong to a Java package named <span class="code">com.adobe.idp.services</span>. It is recommended that you place these JAVA files into a JAR file. Then import the JAR file into your client application’s class path.</p> 
    <note> 
     <p>There are different ways to put .JAVA files into a JAR. One way is using a Java IDE like Eclipse. Create a Java project and create a<span class="code">com.adobe.idp.services</span><i> package (all .JAVA files belong to this package). Next import all the .JAVA files into the package. Finally, export the project as a JAR file.</i></p> 
    </note></li> 
   <li><p>Amend the URL in the <span class="code">EncryptionServiceLocator</span> class to specify the encoding type. For example, to use base64, specify <span class="code">?blob=base64</span> to ensure that the <span class="code">BLOB</span> object returns binary data. That is, in the <span class="code">EncryptionServiceLocator</span> class, locate the following line of code: </p> 
    <codeblock gutter="true" class="syntax as3">
       http://localhost:8080/soap/services/EncryptionService; 
    </codeblock><p>and change it to:</p> 
    <codeblock gutter="true" class="syntax as3">
       http://localhost:8080/soap/services/EncryptionService?blob=base64; 
    </codeblock></li> 
   <li><p>Add the following Axis JAR files to your Java project’s class path:</p> 
    <ul> 
     <li><p>activation.jar</p></li> 
     <li><p>axis.jar</p></li> 
     <li><p>commons-codec-1.3.jar</p></li> 
     <li><p>commons-collections-3.1.jar</p></li> 
     <li><p>commons-discovery.jar</p></li> 
     <li><p>commons-logging.jar</p></li> 
     <li><p>dom3-xml-apis-2.5.0.jar</p></li> 
     <li><p>jai_imageio.jar</p></li> 
     <li><p>jaxen-1.1-beta-9.jar</p></li> 
     <li><p>jaxrpc.jar</p></li> 
     <li><p>log4j.jar</p></li> 
     <li><p>mail.jar</p></li> 
     <li><p>saaj.jar</p></li> 
     <li><p>wsdl4j.jar</p></li> 
     <li><p>xalan.jar</p></li> 
     <li><p>xbean.jar</p></li> 
     <li><p>xercesImpl.jar</p></li> 
    </ul><p>These JAR files are in the <i>[install directory]</i>/Adobe/Adobe Experience Manager Forms/sdk/lib/thirdparty directory. </p></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</a></p> 
  <p><a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a></p> 
  <p><a href="invoking-aem-forms-using-web#invoking_aem_forms_using_blob_data_over_http">Invoking AEM Forms using BLOB data over HTTP</a></p> 
  <h2 id="invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</h2> 
  <p></p> 
  <p>You can invoke a AEM Forms service using Base64 encoding. Base64 encoding encodes attachments that are sent with a web service invocation request. That is, <span class="code">BLOB</span> data is Base64 encoded, not the entire SOAP message.</p> 
  <p>"Invoking AEM Forms using Base64 encoding" discusses invoking the following AEM Forms short-lived process named <span class="code">MyApplication/EncryptDocument</span> by using Base64 encoding. </p> 
  <note> 
   <p>This process is not based on an existing AEM Forms process. To follow along with the code example, create a process named <span class="code">MyApplication/EncryptDocument</span> using Workbench. (See <a href="http://www.adobe.com/go/learn_aemforms_workbench_63">Using Workbench</a>.)</p> 
  </note> 
  <p>When this process is invoked, it performs the following actions:</p> 
  <ol> 
   <li><p>Obtains the unsecured PDF document that is passed to the process. This action is based on the <span class="code">SetValue</span> operation. The input parameter for this process is a <span class="code">document</span> process variable named <span class="code">inDoc</span>. </p></li> 
   <li><p>Encrypts the PDF document with a password. This action is based on the <span class="code">PasswordEncryptPDF</span> operation. The password encrypted PDF document is returned in a process variable named <span class="code">outDoc</span>. </p></li> 
  </ol> 
  <h3 id="creating_a_net_client_assembly_that_uses_base64_encoding">Creating a .NET client assembly that uses Base64 encoding</h3> 
  <p></p> 
  <p>You can create a .NET client assembly to invoke a Forms service from a Microsoft Visual Studio .NET project. To create a .NET client assembly that uses base64 encoding, perform the following steps:</p> 
  <ol> 
   <li><p>Create a proxy class based on an AEM Forms invocation URL.</p></li> 
   <li><p>Create a Microsoft Visual Studio .NET project that produces the .NET client assembly.</p></li> 
  </ol> 
  <p><strong>Creating a proxy class</strong></p> 
  <p>You can create a proxy class that is used to create the .NET client assembly by using a tool that accompanies Microsoft Visual Studio. The name of the tool is wsdl.exe and it is located in the Microsoft Visual Studio installation folder. To create a proxy class, open the command prompt and navigate to the folder that contains the wsdl.exe file. For more information about the wsdl.exe tool, see the <i>MSDN Help</i>.</p> 
  <p>Enter the following command at the command prompt:</p> 
  <codeblock gutter="true" class="syntax as3">
     wsdl&amp;nbsp;http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?WSDL&amp;lc_version=9.0.1 
  </codeblock> 
  <p>By default, this tool creates a CS file in the same folder that is based on the name of the WSDL. In this situation, it creates a CS file named <i>EncryptDocumentService.cs</i>. You use this CS file to create a proxy object that lets you invoke the service that was specified in the invocation URL.</p> 
  <p>Amend the URL in the proxy class to include <span class="code">?blob=base64</span> to ensure that the <span class="code">BLOB</span> object returns binary data. In the proxy class, locate the following line of code:</p> 
  <codeblock gutter="true" class="syntax as3">
     "http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument"; 
  </codeblock> 
  <p>and change it to:</p> 
  <codeblock gutter="true" class="syntax as3">
     "http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=base64"; 
  </codeblock> 
  <p>The <i>Invoking AEM Forms using Base64 Encoding</i> section uses <span class="code">MyApplication/EncryptDocument</span> as an example. If you are creating a .NET client assembly for another Forms service, ensure that you replace <span class="code">MyApplication/EncryptDocument</span> with the name of the service.</p> 
  <p><strong>Developing the .NET client assembly</strong></p> 
  <p>Create a Visual Studio Class Library project that produces a .NET client assembly. The CS file that you created using wsdl.exe can be imported into this project. This project produces a DLL file (the .NET client assembly) that you can use in other Visual Studio .NET projects to invoke a service.</p> 
  <ol> 
   <li><p>Start Microsoft Visual Studio .NET.</p></li> 
   <li><p>Create a Class Library project and name it DocumentService.</p></li> 
   <li><p>Import the CS file that you created using wsdl.exe.</p></li> 
   <li><p>In the <strong>Project</strong> menu, select <strong>Add Reference</strong>.</p></li> 
   <li><p>In the Add Reference dialog box, select <strong>System.Web.Services.dll</strong>.</p></li> 
   <li><p>Click <strong>Select</strong> and then click <strong>OK</strong>.</p></li> 
   <li><p>Compile and build the project.</p></li> 
  </ol> 
  <note> 
   <p>This procedure creates a .NET client assembly named DocumentService.dll that you can use to send SOAP requests to the <span class="code">MyApplication/EncryptDocument</span> service. </p> 
  </note> 
  <note> 
   <p>Make sure that you added <span class="code">?blob=base64</span> to the URL in the proxy class that is used to create the .NET client assembly. Otherwise, you cannot retrieve binary data from the <span class="code">BLOB</span> object. </p> 
  </note> 
  <p><strong>Referencing the .NET client assembly</strong></p> 
  <p>Place your newly created .NET client assembly on the computer where you are developing your client application. After you place the .NET client assembly in a directory, you can reference it from a project. Also reference the <span class="code">System.Web.Services</span> library from your project. If you do not reference this library, you cannot use the .NET client assembly to invoke a service.</p> 
  <ol> 
   <li><p>In the <strong>Project</strong> menu, select <strong>Add Reference</strong>.</p></li> 
   <li><p>Click the <strong>.NET</strong> tab.</p></li> 
   <li><p>Click <strong>Browse</strong> and locate the DocumentService.dll file.</p></li> 
   <li><p>Click <strong>Select</strong> and then click <strong>OK</strong>.</p></li> 
  </ol> 
  <p><strong>Invoking a service using a .NET client assembly that uses Base64 encoding</strong></p> 
  <p>You can invoke the <span class="code">MyApplication/EncryptDocument</span> service (which was built in Workbench) using a .NET client assembly that uses Base64 encoding. To invoke the <span class="code">MyApplication/EncryptDocument</span> service, perform the following steps:</p> 
  <ol> 
   <li><p>Create a Microsoft .NET client assembly that consumes the <span class="code">MyApplication/EncryptDocument</span> service WSDL. </p></li> 
   <li><p>Create a client Microsoft .NET project. Reference the Microsoft .NET client assembly in the client project. Also reference <span class="code">System.Web.Services</span>.</p></li> 
   <li><p>Using the Microsoft .NET client assembly, create a <span class="code">MyApplication_EncryptDocumentService</span> object by invoking its default constructor. </p></li> 
   <li><p>Set the <span class="code">MyApplication_EncryptDocumentService</span> object’s <span class="code">Credentials</span> property with a <span class="code">System.Net.NetworkCredential</span> object. Within the <span class="code">System.Net.NetworkCredential</span> constructor, specify a AEM forms user name and the corresponding password. Set authentication values to enable your .NET client application to successfully exchange SOAP messages with AEM Forms.</p></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store a PDF document pass to the <span class="code">MyApplication/EncryptDocument</span> process.</p></li> 
   <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that represents the file location of the PDF document and the mode in which to open the file.</p></li> 
   <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property.</p></li> 
   <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
   <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">binaryData</span> property with the contents of the byte array.</p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplication_EncryptDocumentService</span> object’s <span class="code">invoke</span> method and passing the <span class="code">BLOB</span> object that contains the PDF document. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object. </p></li> 
   <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the password-encrypted document.</p></li> 
   <li><p>Create a byte array that stores the data content of the <span class="code">BLOB</span> object returned by the <span class="code">MyApplicationEncryptDocumentService</span> object’s <span class="code">invoke</span> method. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">binaryData</span> data member.</p></li> 
   <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
   <li><p>Write the byte array contents to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
  </ol> 
  <h3 id="invoking_a_service_using_java_proxy_classes_and_base64_encoding">Invoking a service using Java proxy classes and Base64 encoding</h3> 
  <p></p> 
  <p>You can invoke an AEM Forms service using Java proxy classes and Base64. To invoke the <span class="code">MyApplication/EncryptDocument</span> service using Java proxy classes, perform the following steps:</p> 
  <ol> 
   <li><p>Create Java proxy classes using JAX-WS that consumes the <span class="code">MyApplication/EncryptDocument</span> service WSDL. Use the following WSDL endpoint: </p> 
    <note> 
     <p>Replace <span class="code">hiro-xp</span><i> with the IP address of the J2EE application servier hosting AEM Forms. </i></p> 
    </note></li> 
   <li><p>Package the Java proxy classes created using using JAX-WS into a JAR file. </p></li> 
   <li><p>Include the Java proxy JAR file and the JAR files located in the following path:</p><p>&amp;lt;Install Directory&amp;gt;\Adobe\Adobe_Experience_Manager_forms\sdk\client-libs\thirdparty </p><p>into your Java client project’s class path.</p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocumentService</span> object by using its constructor. </p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocument</span> object by invoking the <span class="code">MyApplicationEncryptDocumentService</span> object’s <span class="code">getEncryptDocument</span> method.</p></li> 
   <li><p>Set the connection values required to invoke AEM Forms by assigning values to the following data members:</p> 
    <ul> 
     <li><p>Assign the WSDL endpoint and the encoding type to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">ENDPOINT_ADDRESS_PROPERTY</span> field. To invoke the <span class="code">MyApplication/EncryptDocument</span> service using Base64 encoding, specify the following URL value:</p></li> 
     <li><p>Assign the AEM forms user to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">USERNAME_PROPERTY</span> field.</p></li> 
     <li><p>Assign the corresponding password value to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">PASSWORD_PROPERTY</span> field. </p></li> 
    </ul><p>The following code example shows this application logic:</p> 
    <codeblock gutter="true" class="syntax as3">
       //Set&amp;nbsp;connection&amp;nbsp;values&amp;nbsp;required&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;AEM&amp;nbsp;Forms&amp;nbsp;&amp;nbsp;!!discoiqbr!! String&amp;nbsp;url&amp;nbsp;=&amp;nbsp;"http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=base64";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;username&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,&amp;nbsp;url);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.USERNAME_PROPERTY,&amp;nbsp;username);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,&amp;nbsp;password); 
    </codeblock></li> 
   <li><p>Retrieve the PDF document to send to the <span class="code">MyApplication/EncryptDocument</span> process by creating a <span class="code">java.io.FileInputStream</span> object by using its constructor. Pass a string value that specifies the location of the PDF document. </p></li> 
   <li><p>Create a byte array and populate it with the contents of the <span class="code">java.io.FileInputStream</span> object.</p></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. </p></li> 
   <li><p>Populate the <span class="code">BLOB</span> object by invoking its <span class="code">setBinaryData</span> method and passing the byte array. The <span class="code">BLOB</span> object’s <span class="code">setBinaryData</span> is the method to call when using Base64 encoding. (See <a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b0c.2">Supplying BLOB objects in service requests</a>.)</p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplicationEncryptDocument</span> object’s <span class="code">invoke</span> method. Pass the <span class="code">BLOB</span> object that contains the PDF document. The invoke method returns a <span class="code">BLOB</span> object that contains the encrypted PDF document. </p></li> 
   <li><p>Create a byte array that contains the encrypted PDF document by invoking the <span class="code">BLOB</span> object’s <span class="code">getBinaryData</span> method. </p></li> 
   <li><p>Save the encrypted PDF document as a PDF file. Write the byte array to a file. </p></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_java_proxy_files_and_base64_encoding">Quick Start: Invoking a service using Java proxy files and Base64 encoding</a></p> 
  <p><a href="invoking-aem-forms-using-web#creating_a_net_client_assembly_that_uses_base64_encoding">Creating a .NET client assembly that uses Base64 encoding</a></p> 
  <h2 id="invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</h2> 
  <p></p> 
  <p>You can invoke AEM Forms services by using the web service standard MTOM. This standard defines how binary data, such as a PDF document, is transmitted over the Internet or intranet. A feature of MTOM is the use of the <span class="code">XOP:Include</span> element. This element is defined in the XML Binary Optimized Packaging (XOP) specification to reference the binary attachments of a SOAP message.</p> 
  <p>The discussion here is about using MTOM to invoke the following AEM Forms short-lived process named <span class="code">MyApplication/EncryptDocument</span>.</p> 
  <note> 
   <p>This process is not based on an existing AEM Forms process. To follow along with the code example, create a process named <span class="code">MyApplication/EncryptDocument</span> using Workbench. (See <a href="http://www.adobe.com/go/learn_aemforms_workbench_63">Using Workbench</a>.)</p> 
  </note> 
  <p>When this process is invoked, it performs the following actions:</p> 
  <ol> 
   <li><p>Obtains the unsecured PDF document that is passed to the process. This action is based on the <span class="code">SetValue</span> operation. The input parameter for this process is a <span class="code">document</span> process variable named <span class="code">inDoc</span>. </p></li> 
   <li><p>Encrypts the PDF document with a password. This action is based on the <span class="code">PasswordEncryptPDF</span> operation. The password encrypted PDF document is returned in a process variable named <span class="code">outDoc</span>. </p></li> 
  </ol> 
  <note> 
   <p>MTOM support was added in AEM Forms, version 9. </p> 
  </note> 
  <note> 
   <p>JAX WS-based applications that use the MTOM transmission protocol are limited to 25MB of sent and received data. This limitation is due to a bug in JAX-WS. If the combined size of your sent and received files exceeds 25MB, use the the SwaRef transmission protocol instead of the MTOM one. Otherwise, there is a possibility of an <span class="code">OutOfMemory</span><i> exception.</i></p> 
  </note> 
  <p>The discussion here is about using MTOM withthin a Microsoft .NET project to invoke AEM Forms services. The .NET framework used is 3.5, and the development environment is Visual Studio 2008. If you have Web Service Enhancements (WSE) installed on your development computer, remove it. The .NET 3.5 framework supports a SOAP framework named Windows Communication Foundation (WCF). When invoking AEM Forms by using MTOM, only WCF (not WSE) is supported.</p> 
  <h3 id="creating_a_net_project_that_invokes_a_service_using_mtom">Creating a .NET project that invokes a service using MTOM</h3> 
  <p></p> 
  <p>You can create a Microsoft .NET project that can invoke a AEM Forms service using web services. First, create a Microsoft .NET project by using Visual Studio 2008. To invoke a AEM Forms service, create a Service Reference to the AEM Forms service that you want to invoke within your project. When you create a Service Reference, specify a URL to the AEM Forms service: </p> 
  <codeblock gutter="true" class="syntax as3">
     http://localhost:8080/soap/services/MyApplication/EncryptDocument?WSDL&amp;lc_version=9.0.1 
  </codeblock> 
  <p>Replace <span class="code">localhost</span> with the IP address of the J2EE application server hosting AEM Forms. Replace <span class="code">MyApplication/EncryptDocument</span> with the name of the AEM Forms service to invoke. For example, to invoke a Rights Management operation, specify:</p> 
  <p><span class="code">http://localhost:8080/soap/services/RightsManagementService?WSDL&amp;lc_version=9.0.1</span></p> 
  <p>The <span class="code">lc_version</span> option ensures that AEM Forms functionality, such as MTOM, is available. Without specifying the <span class="code">lc_version</span> option, you cannot invoke AEM Forms using MTOM. </p> 
  <p>After you create a Service Reference, data types associated with the AEM Forms service are available for use within your .NET project. To create a .NET project that invokes an AEM Forms service, perform the following steps:</p> 
  <ol> 
   <li><p>Create a .NET project using Microsoft Visual Studio 2008. </p></li> 
   <li><p>In the <strong>Project</strong> menu, select <strong>Add Service Reference</strong>.</p></li> 
   <li><p>In the <strong>Address</strong> dialog box, specify the WSDL to the AEM Forms service. For example, </p> 
    <codeblock gutter="true" class="syntax as3">
       http://localhost:8080/soap/services/MyApplication/EncryptDocument?WSDL&amp;lc_version=9.0.1 
    </codeblock></li> 
   <li><p>Click <strong>Go </strong>and then click<strong> OK</strong>. </p></li> 
  </ol> 
  <h3 id="invoking_a_service_using_mtom_in_a_net_project">Invoking a service using MTOM in a .NET project</h3> 
  <p></p> 
  <p>Consider the <span class="code">MyApplication/EncryptDocument</span> process that accepts an unsecured PDF document and returns a password-encrypted PDF document. To invoke the <span class="code">MyApplication/EncryptDocument</span> process (which was built in Workbench) by using MTOM, perform the following steps: </p> 
  <ol> 
   <li><p>Create a Microsoft .NET project.</p></li> 
   <li><p>Create a <span class="code">MyApplication_EncryptDocumentClient</span> object by using its default constructor. </p></li> 
   <li><p>Create a <span class="code">MyApplication_EncryptDocumentClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service and the encoding type:</p> 
    <codeblock gutter="true" class="syntax as3">
       http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=mtom 
    </codeblock><p>You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. However, ensure that you specify<span class="code">?blob=mtom</span>.</p> 
    <note> 
     <p>Replace <span class="code">hiro-xp</span><i> with the IP address of the J2EE application servier hosting AEM Forms. </i></p> 
    </note></li> 
   <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">EncryptDocumentClient.Endpoint.Binding</span> data member. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
   <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> data member to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
   <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
    <ul> 
     <li><p>Assign the AEM forms user name to the data member <span class="code">MyApplication_EncryptDocumentClient.ClientCredentials.UserName.UserName</span>. </p></li> 
     <li><p>Assign the corresponding password value to the data member <span class="code">MyApplication_EncryptDocumentClient.ClientCredentials.UserName.Password</span>.</p></li> 
     <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the data member <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
     <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the data member <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
    </ul><p>The following code example shows these tasks.</p> 
    <codeblock gutter="true" class="syntax as3">
       //Enable&amp;nbsp;BASIC&amp;nbsp;HTTP&amp;nbsp;authentication&amp;nbsp;!!discoiqbr!! encryptProcess.ClientCredentials.UserName.UserName&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! encryptProcess.ClientCredentials.UserName.Password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! b.Security.Transport.ClientCredentialType&amp;nbsp;=&amp;nbsp;HttpClientCredentialType.Basic;&amp;nbsp;!!discoiqbr!! b.Security.Mode&amp;nbsp;=&amp;nbsp;BasicHttpSecurityMode.TransportCredentialOnly;&amp;nbsp;!!discoiqbr!! b.MaxReceivedMessageSize&amp;nbsp;=&amp;nbsp;4000000;&amp;nbsp;!!discoiqbr!! b.MaxBufferSize&amp;nbsp;=&amp;nbsp;4000000;&amp;nbsp;!!discoiqbr!! b.ReaderQuotas.MaxArrayLength&amp;nbsp;=&amp;nbsp;4000000; 
    </codeblock></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store a PDF document to pass to the <span class="code">MyApplication/EncryptDocument</span> process.</p></li> 
   <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that represents the file location of the PDF document and the mode in which to open the file.</p></li> 
   <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property.</p></li> 
   <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
   <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> data member with the contents of the byte array.</p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplication_EncryptDocumentClient</span> object’s <span class="code">invoke</span> method. Pass the <span class="code">BLOB</span> object that contains the PDF document. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object.</p></li> 
   <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the secured PDF document.</p></li> 
   <li><p>Create a byte array that stores the data content of the <span class="code">BLOB</span> object that was returned by the <span class="code">invoke</span> method. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> data member.</p></li> 
   <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
   <li><p>Write the contents of the byte array to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
  </ol> 
  <note> 
   <p>Most AEM Forms service operations have a MTOM quick start. You can view these quick starts in a service’s corresponding quick start section. For example, to see the Output quick start section, see <a href="/programming-with-aem-forms/output-service-java-api-quick#output_service_java_api_quick_start_soap">Output Service API Quick Starts</a>. </p> 
  </note> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_mtom_in_a_net_project">Quick Start: Invoking a service using MTOM in a .NET project</a></p> 
  <p><a href="invoking-aem-forms-using-web#accessing_multiple_services_using_web_services">Accessing multiple services using web services</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-human-centric-long-lived#creating_an_asp_net_web_application_that_invokes_a_human_centric_long_lived_process">Creating an ASP.NET web application that invokes a human-centric long-lived process</a></p> 
  <h2 id="invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</h2> 
  <p></p> 
  <p>You can invoke AEM Forms services using SwaRef. The content of the <span class="code">wsi:swaRef</span> XML element is sent as an attachment inside a SOAP body that stores the reference to the attachment. When invoking a Forms service by using SwaRef, create Java proxy classes by using the Java API for XML Web Services (JAX-WS). (See <a href="https://jax-ws.dev.java.net/jax-ws-ea3/docs/mtom-swaref.html">Java API for XML Web Services</a>.)</p> 
  <p>The discussion here is about invoking the following Forms short-lived process named <span class="code">MyApplication/EncryptDocument</span> by using SwaRef.</p> 
  <note> 
   <p>This process is not based on an existing AEM Forms process. To follow along with the code example, create a process named <span class="code">MyApplication/EncryptDocument</span> using Workbench. (See <a href="http://www.adobe.com/go/learn_aemforms_workbench_63">Using Workbench</a>.)</p> 
  </note> 
  <p>When this process is invoked, it performs the following actions:</p> 
  <ol> 
   <li><p>Obtains the unsecured PDF document that is passed to the process. This action is based on the <span class="code">SetValue</span> operation. The input parameter for this process is a <span class="code">document</span> process variable named <span class="code">inDoc</span>. </p></li> 
   <li><p>Encrypts the PDF document with a password. This action is based on the <span class="code">PasswordEncryptPDF</span> operation. The password encrypted PDF document is returned in a process variable named <span class="code">outDoc</span>. </p></li> 
  </ol> 
  <note> 
   <p>SwaRef support added in AEM Forms</p> 
  </note> 
  <p>The discussion below is about how to invoke Forms services by using SwaRef within a Java client application. The Java application uses proxy classes created by using JAX-WS. </p> 
  <h3 id="invoke_a_service_using_jax_ws_library_files_that_use_swaref">Invoke a service using JAX-WS library files that use SwaRef</h3> 
  <p></p> 
  <p>To invoke the <span class="code">MyApplication/EncryptDocument</span> process by using Java proxy files created using JAX-WS and SwaRef, perform the following steps: </p> 
  <ol> 
   <li><p>Create Java proxy classes using JAX-WS that consumes the <span class="code">MyApplication/EncryptDocument</span> service WSDL. Use the following WSDL endpoint: </p> 
    <codeblock gutter="true" class="syntax as3">
       http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?WSDL&amp;lc_version=9.0.1 
    </codeblock><p>For information, see <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</a>.</p> 
    <note> 
     <p>Replace <span class="code">hiro-xp</span><i> with the IP address of the J2EE application server hosting AEM Forms. </i></p> 
    </note></li> 
   <li><p>Package the Java proxy classes created using using JAX-WS into a JAR file. </p></li> 
   <li><p>Include the Java proxy JAR file and the JAR files located in the following path:</p><p>&amp;lt;Install Directory&amp;gt;\Adobe\Adobe_Experience_Manager_forms\sdk\client-libs\thirdparty </p><p>into your Java client project’s class path.</p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocumentService</span> object by using its constructor. </p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocument</span> object by invoking the <span class="code">MyApplicationEncryptDocumentService</span> object’s <span class="code">getEncryptDocument</span> method.</p></li> 
   <li><p>Set the connection values required to invoke AEM Forms by assigning values to the following data members:</p> 
    <ul> 
     <li><p>Assign the WSDL endpoint and the encoding type to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">ENDPOINT_ADDRESS_PROPERTY</span> field. To invoke the <span class="code">MyApplication/EncryptDocument</span> service using SwaRef encoding, specify the following URL value:</p><span class="code"> http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=swaref</span></li> 
     <li><p>Assign the AEM forms user to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">USERNAME_PROPERTY</span> field.</p></li> 
     <li><p>Assign the corresponding password value to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">PASSWORD_PROPERTY</span> field. </p></li> 
    </ul><p>The following code example shows this application logic:</p> 
    <codeblock gutter="true" class="syntax as3">
       //Set&amp;nbsp;connection&amp;nbsp;values&amp;nbsp;required&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;AEM&amp;nbsp;Forms&amp;nbsp;!!discoiqbr!! String&amp;nbsp;url&amp;nbsp;=&amp;nbsp;"http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=swaref";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;username&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,&amp;nbsp;url);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.USERNAME_PROPERTY,&amp;nbsp;username);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,&amp;nbsp;password); 
    </codeblock></li> 
   <li><p>Retrieve the PDF document to send to the <span class="code">MyApplication/EncryptDocument</span> process by creating a <span class="code">java.io.File</span> object by using its constructor. Pass a string value that specifies the location of the PDF document. </p></li> 
   <li><p>Create a <span class="code">javax.activation.DataSource</span> object by using the <span class="code">FileDataSource</span> constructor. Pass the <span class="code">java.io.File</span> object.</p></li> 
   <li><p>Create a <span class="code">javax.activation.DataHandler</span> object by using its constructor and passing the <span class="code">javax.activation.DataSource</span> object.</p></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. </p></li> 
   <li><p>Populate the <span class="code">BLOB</span> object by invoking its <span class="code">setSwaRef</span> method and passing the <span class="code">javax.activation.DataHandler</span> object. </p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplicationEncryptDocument</span> object’s <span class="code">invoke</span> method and passing the <span class="code">BLOB</span> object that contains the PDF document. The invoke method returns a <span class="code">BLOB</span> object that contains an encrypted PDF document.</p></li> 
   <li><p>Populate a <span class="code">javax.activation.DataHandler</span> object by invoking the <span class="code">BLOB</span> object’s <span class="code">getSwaRef</span> method.</p></li> 
   <li><p>Convert the <span class="code">javax.activation.DataHandler</span> object to a <span class="code">java.io.InputSteam</span> instance by invoking the <span class="code">javax.activation.DataHandler</span> object’s <span class="code">getInputStream</span> method. </p></li> 
   <li><p>Write the <span class="code">java.io.InputSteam</span> instance to a PDF file that represents the encrypted PDF document. </p></li> 
  </ol> 
  <note> 
   <p>Most AEM Forms service operations have a SwaRef quick start. You can view these quick starts in a service’s corresponding quick start section. For example, to see the Output quick start section, see <a href="/programming-with-aem-forms/output-service-java-api-quick#output_service_java_api_quick_start_soap">Output Service API Quick Starts</a>. </p> 
  </note> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_swaref_in_a_java_project">Quick Start: Invoking a service using SwaRef in a Java project</a></p> 
  <h2 id="invoking_aem_forms_using_blob_data_over_http">Invoking AEM Forms using BLOB data over HTTP</h2> 
  <p></p> 
  <p>You can invoke AEM Forms services using web services and passing BLOB data over HTTP. Passing BLOB data over HTTP is an alternative technique instead of using base64 encoding, DIME, or MIME. For example, you can pass data over HTTP in a Microsoft .NET project that uses Web Service Enhancement 3.0, which does not support DIME or MIME. When using BLOB data over HTTP, input data is uploaded before the AEM Forms service is invoked.</p> 
  <p>"Invoking AEM Forms using BLOB Data over HTTP" discusses invoking the following AEM Forms short-lived process named <span class="code">MyApplication/EncryptDocument</span> by passing BLOB data over HTTP. </p> 
  <note> 
   <p>This process is not based on an existing AEM Forms process. To follow along with the code example, create a process named <span class="code">MyApplication/EncryptDocument</span> using Workbench. (See <a href="http://www.adobe.com/go/learn_aemforms_workbench_63">Using Workbench</a>.)</p> 
  </note> 
  <p>When this process is invoked, it performs the following actions:</p> 
  <ol> 
   <li><p>Obtains the unsecured PDF document that is passed to the process. This action is based on the <span class="code">SetValue</span> operation. The input parameter for this process is a <span class="code">document</span> process variable named <span class="code">inDoc</span>. </p></li> 
   <li><p>Encrypts the PDF document with a password. This action is based on the <span class="code">PasswordEncryptPDF</span> operation. The password encrypted PDF document is returned in a process variable named <span class="code">outDoc</span>. </p></li> 
  </ol> 
  <note> 
   <p>It is recommended that you be familiar with Invoking AEM Forms using SOAP. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_web_services">Invoking AEM Forms using Web Services</a>.)</p> 
  </note> 
  <h3 id="creating_a_net_client_assembly_that_uses_data_over_http">Creating a .NET client assembly that uses data over HTTP</h3> 
  <p></p> 
  <p>To create a client assembly that uses data over HTTP, follow the process specified in <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_base64_encoding">Invoking AEM Forms using Base64 encoding</a>. However, amend the URL in the proxy class to include <span class="code">?blob=http</span> instead of <span class="code">?blob=base64</span>. This action ensures that data is passed over HTTP. In the proxy class, locate the following line of code:</p> 
  <codeblock gutter="true" class="syntax as3">
     "http://localhost:8080/soap/services/MyApplication/EncryptDocument"; 
  </codeblock> 
  <p>and change it to:</p> 
  <codeblock gutter="true" class="syntax as3">
     "http://localhost:8080/soap/services/MyApplication/EncryptDocument?blob=http"; 
  </codeblock> 
  <p><strong>Referencing the .NET clienMyApplication/EncryptDocumentt assembly</strong></p> 
  <p>Place your new .NET client assembly on the computer where you are developing your client application. After you place the .NET client assembly in a directory, you can reference it from a project. Reference the <span class="code">System.Web.Services</span> library from your project. If you do not reference this library, you cannot use the .NET client assembly to invoke a service.</p> 
  <ol> 
   <li><p>In the <strong>Project</strong> menu, select <strong>Add Reference</strong>.</p></li> 
   <li><p>Click the <strong>.NET</strong> tab.</p></li> 
   <li><p>Click <strong>Browse</strong> and locate the DocumentService.dll file.</p></li> 
   <li><p>Click <strong>Select</strong> and then click <strong>OK</strong>.</p></li> 
  </ol> 
  <p><strong>Invoking a service using a .NET client assembly that uses BLOB data over HTTP</strong></p> 
  <p>You can invoke the <span class="code">MyApplication/EncryptDocument</span> service (which was built in Workbench) using a .NET client assembly that uses data over HTTP. To invoke the <span class="code">MyApplication/EncryptDocument</span> service, perform the following steps:</p> 
  <ol> 
   <li><p>Create the .NET client assembly. </p></li> 
   <li><p>Reference the Microsoft .NET client assembly. Create a client Microsoft .NET project. Reference the Microsoft .NET client assembly in the client project. Also reference <span class="code">System.Web.Services</span>.</p></li> 
   <li><p>Using the Microsoft .NET client assembly, create a <span class="code">MyApplication_EncryptDocumentService</span> object by invoking its default constructor. </p></li> 
   <li><p>Set the <span class="code">MyApplication_EncryptDocumentService</span> object’s <span class="code">Credentials</span> property with a <span class="code">System.Net.NetworkCredential</span> object. Within the <span class="code">System.Net.NetworkCredential</span> constructor, specify a AEM forms user name and the corresponding password. Set authentication values to enable your .NET client application to successfully exchange SOAP messages with AEM Forms.</p></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to pass data to the <span class="code">MyApplication/EncryptDocument</span> process.</p></li> 
   <li><p>Assign a string value to the <span class="code">BLOB</span> object’s <span class="code">remoteURL</span> data member that specifies the URI location of a PDF document to pass to the <span class="code">MyApplication/EncryptDocument </span>service.</p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplication_EncryptDocumentService</span> object’s <span class="code">invoke</span> method and passing the <span class="code">BLOB</span> object. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object. </p></li> 
   <li><p>Create a <span class="code">System.UriBuilder</span> object by using its constructor and passing the value of the returned <span class="code">BLOB</span> object’s <span class="code">remoteURL</span> data member. </p></li> 
   <li><p>Convert the <span class="code">System.UriBuilder</span> object to a <span class="code">System.IO.Stream</span> object. (The C# Quick Start that follows this list illustrates how to perform this task.)</p></li> 
   <li><p>Create a byte array and populate it with the data located in the <span class="code">System.IO.Stream</span> object. </p></li> 
   <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
   <li><p>Write the byte array contents to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
  </ol> 
  <h3 id="invoking_a_service_using_java_proxy_classes_and_blob_data_over_http">Invoking a service using Java proxy classes and BLOB data over HTTP</h3> 
  <p></p> 
  <p>You can invoke an AEM Forms service using Java proxy classes and BLOB data over HTTP. To invoke the <span class="code">MyApplication/EncryptDocument</span> service using Java proxy classes, perform the following steps:</p> 
  <ol> 
   <li><p>Create Java proxy classes using JAX-WS that consumes the <span class="code">MyApplication/EncryptDocument</span> service WSDL. Use the following WSDL endpoint: </p> 
    <codeblock gutter="true" class="syntax as3">
       http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?WSDL&amp;lc_version=9.0.1 
    </codeblock><p>For information, see <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</a>.</p> 
    <note> 
     <p>Replace <span class="code">hiro-xp</span><i> with the IP address of the J2EE application server hosting AEM Forms. </i></p> 
    </note></li> 
   <li><p>Package the Java proxy classes created using using JAX-WS into a JAR file. </p></li> 
   <li><p>Include the Java proxy JAR file and the JAR files located in the following path:</p><p>&amp;lt;Install Directory&amp;gt;\Adobe\Adobe_Experience_Manager_forms\sdk\client-libs\thirdparty </p><p>into your Java client project’s class path.</p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocumentService</span> object by using its constructor. </p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocument</span> object by invoking the <span class="code">MyApplicationEncryptDocumentService</span> object’s <span class="code">getEncryptDocument</span> method.</p></li> 
   <li><p>Set the connection values required to invoke AEM Forms by assigning values to the following data members:</p> 
    <ul> 
     <li><p>Assign the WSDL endpoint and the encoding type to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">ENDPOINT_ADDRESS_PROPERTY</span> field. To invoke the <span class="code">MyApplication/EncryptDocument</span> service using BLOB over HTTP encoding, specify the following URL value:</p></li> 
     <li><p>Assign the AEM forms user to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">USERNAME_PROPERTY</span> field.</p></li> 
     <li><p>Assign the corresponding password value to the <span class="code">javax.xml.ws.BindingProvider</span> object’s <span class="code">PASSWORD_PROPERTY</span> field. </p></li> 
    </ul><p>The following code example shows this application logic:</p> 
    <codeblock gutter="true" class="syntax as3">
       //Set&amp;nbsp;connection&amp;nbsp;values&amp;nbsp;required&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;AEM&amp;nbsp;Forms&amp;nbsp;!!discoiqbr!! String&amp;nbsp;url&amp;nbsp;=&amp;nbsp;"http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=http";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;username&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! String&amp;nbsp;password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,&amp;nbsp;url);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.USERNAME_PROPERTY,&amp;nbsp;username);&amp;nbsp;!!discoiqbr!! ((BindingProvider)&amp;nbsp;encryptDocClient).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,&amp;nbsp;password); 
    </codeblock></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. </p></li> 
   <li><p>Populate the <span class="code">BLOB</span> object by invoking its <span class="code">setRemoteURL</span> method. Pass a string value that specifies the URI location of a PDF document to pass to the <span class="code">MyApplication/EncryptDocument</span> service. </p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">MyApplicationEncryptDocument</span> object’s <span class="code">invoke</span> method and passing the <span class="code">BLOB</span> object that contains the PDF document. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object. </p></li> 
   <li><p>Create a byte array to store the data stream that represents the encrypted PDF document. Invoke the <span class="code">BLOB</span> object’s <span class="code">getRemoteURL</span> method (use the <span class="code">BLOB</span> object returned by the <span class="code">invoke</span> method).</p></li> 
   <li><p>Create a <span class="code">java.io.File</span> object by using its constructor. This object represents the encrypted PDF document. </p></li> 
   <li><p>Create a <span class="code">java.io.FileOutputStream</span> object by using its constructor and passing the <span class="code">java.io.File</span> object.</p></li> 
   <li><p>Invoke the <span class="code">java.io.FileOutputStream</span> object’s <span class="code">write</span> method. Pass the byte array that contains the data stream that represents the encrypted PDF document. </p></li> 
  </ol> 
  <h2 id="invoking_aem_forms_using_dime">Invoking AEM Forms using DIME</h2> 
  <p></p> 
  <p>You can invoke AEM Forms services using SOAP with attachments. AEM Forms supports both MIME and DIME web service standards. DIME lets you send binary attachments, such as PDF documents, along with invocation requests instead of encoding the attachment. The <i>Invoking AEM Forms using DIME</i> section discusses invoking the following AEM Forms short-lived process named <span class="code">MyApplication/EncryptDocument</span> using DIME. </p> 
  <p>When this process is invoked, it performs the following actions:</p> 
  <ol> 
   <li><p>Obtains the unsecured PDF document that is passed to the process. This action is based on the <span class="code">SetValue</span> operation. The input parameter for this process is a <span class="code">document</span> process variable named <span class="code">inDoc</span>. </p></li> 
   <li><p>Encrypts the PDF document with a password. This action is based on the <span class="code">PasswordEncryptPDF</span> operation. The password encrypted PDF document is returned in a process variable named <span class="code">outDoc</span>. </p></li> 
  </ol> 
  <p>This process is not based on an existing AEM Forms process. To follow along with the code examples, create a process named <span class="code">MyApplication/EncryptDocument</span><i></i>using Workbench. (See <a href="http://www.adobe.com/go/learn_aemforms_workbench_63">Using Workbench</a>.)</p> 
  <note> 
   <p>Invoking AEM Forms service operations using DIME is deprecated. It is recommended that you use MTOM. (See <a href="invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a>.)</p> 
  </note> 
  <h3 id="creating_a_net_project_that_uses_dime">Creating a .NET project that uses DIME</h3> 
  <p></p> 
  <p>To create a .NET project that can invoke a Forms service using DIME, perform the following tasks:</p> 
  <ul> 
   <li><p>Install Web Services Enhancements 2.0 on your development computer.</p></li> 
   <li><p>From within your .NET project, create a web reference to the FormsAEM Forms service. </p></li> 
  </ul> 
  <p><strong>Installing Web Services Enhancements 2.0</strong></p> 
  <p>Install Web Services Enhancements 2.0 on your development computer and integrate it with Microsoft Visual Studio .NET. You can download Web Services Enhancements 2.0 from the <a href="http://www.microsoft.com/downloads/search.aspx">Microsoft Download Center.</a></p> 
  <p>From this web page, search for Web Services Enhancements 2.0 and download it onto your development computer. This download places a file named Microsoft WSE 2.0 SPI.msi on your computer. Run the installation program and follow the online directions.</p> 
  <note> 
   <p>Web Services Enhancements 2.0 supports DIME. The supported version of Microsoft Visual Studio is 2003 when working with Web Services Enhancements 2.0. Web Services Enhancements 3.0 does not support DIME; however, it supports MTOM. </p> 
  </note> 
  <p><strong>Creating a web reference to an AEM Forms service</strong></p> 
  <p>After you install Web Services Enhancements 2.0 on your development computer and create a Microsoft .NET project, create a web reference to the Forms service. For example, to create a web reference to the <span class="code">MyApplication/EncryptDocument</span> process and assuming that Forms is installed on the local computer, specify the following URL:</p> 
  <codeblock gutter="true" class="syntax as3">
     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http://localhost:8080/soap/services/MyApplication/EncryptDocument?WSDL 
  </codeblock> 
  <p>After you create a web reference, the following two proxy data types are available for you to use within your .NET project: <span class="code">EncryptDocumentService</span> and <span class="code">EncryptDocumentServiceWse</span>. To invoke the <span class="code">MyApplication/EncryptDocument</span> process using DIME, use the <span class="code">EncryptDocumentServiceWse</span> type. </p> 
  <note> 
   <p>Before creating a web reference to the Forms service, ensure that you reference Web Services Enhancements 2.0 in your project. (See “Installing Web Services Enhancements 2.0”.)</p> 
  </note> 
  <p><strong>Reference the WSE library</strong></p> 
  <ol> 
   <li><p>In the Project menu, select Add Reference.</p></li> 
   <li><p>In the Add Reference dialog box, select Microsoft.Web.Services2.dll.</p></li> 
   <li><p>Select System.Web.Services.dll.</p></li> 
   <li><p>Click Select and then click OK.</p></li> 
  </ol> 
  <p><strong>Create a web reference to a Forms service</strong></p> 
  <ol> 
   <li><p>In the Project menu, select Add Web Reference.</p></li> 
   <li><p>In the URL dialog box, specify the URL to the Forms service.</p></li> 
   <li><p>Click Go and then click Add Reference.</p></li> 
  </ol> 
  <note> 
   <p>Ensure that you enable your .NET project to use the WSE library. From within the Project Explorer, right-click the project name and select Enable WSE 2.0. Ensure that the check box on the dialog box that appears is selected. </p> 
  </note> 
  <p><strong>Invoking a service using DIME in a .NET project</strong></p> 
  <p>You can invoke a Forms service using DIME. Consider the <span class="code">MyApplication/EncryptDocument</span> process that accepts an unsecured PDF document and returns a password-encrypted PDF document. To invoke the <span class="code">MyApplication/EncryptDocument</span> process using DIME, perform the following steps:</p> 
  <ol> 
   <li><p>Create a Microsoft .NET project that enables you to invoke a Forms service using DIME. Ensure that you include Web Services Enhancements 2.0 and create a web reference to the AEM Forms service. </p></li> 
   <li><p>After setting a web reference to the <span class="code">MyApplication/EncryptDocument</span> process, create an <span class="code">EncryptDocumentServiceWse</span> object by using its default constructor. </p></li> 
   <li><p>Set the <span class="code">EncryptDocumentServiceWse</span> object’s <span class="code">Credentials</span> data member with a <span class="code">System.Net.NetworkCredential</span> value that specifies the AEM forms user name and password value.</p></li> 
   <li><p>Create a <span class="code">Microsoft.Web.Services2.Dime.DimeAttachment</span> object by using its constructor and passing the following values:</p> 
    <ul> 
     <li><p>A string value that specifies a GUID value. You can obtain a GUID value by invoking the <span class="code">System.Guid.NewGuid.ToString</span> method.</p></li> 
     <li><p>A string value that specifies the content type. Because this process requires a PDF document, specify <span class="code">application/pdf</span>.</p></li> 
     <li><p>A <span class="code">TypeFormat</span> enumeration value. Specify <span class="code">TypeFormat.MediaType</span>. </p></li> 
     <li><p>A string value that specifies the location of the PDF document to pass to the AEM Forms process. </p></li> 
    </ul></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. </p></li> 
   <li><p>Add the DIME attachment to the <span class="code">BLOB</span> object by assigning the <span class="code">Microsoft.Web.Services2.Dime.DimeAttachment</span> object’s <span class="code">Id</span> data member value to the <span class="code">BLOB</span> object’s <span class="code">attachmentID</span> data member. </p></li> 
   <li><p>Invoke the <span class="code">EncryptDocumentServiceWse.RequestSoapContext.Attachments.Add</span> method and pass the <span class="code">Microsoft.Web.Services2.Dime.DimeAttachment</span> object.</p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">EncryptDocumentServiceWse</span> object’s <span class="code">invoke</span> method and passing the <span class="code">BLOB</span> object that contains the DIME attachment. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object. </p></li> 
   <li><p>Obtain the attachment identifier value by getting the value of the returned <span class="code">BLOB</span> object’s <span class="code">attachmentID</span> data member. </p></li> 
   <li><p>Iterate through the attachments located in <span class="code">EncryptDocumentServiceWse.ResponseSoapContext.Attachments</span> and use the attachment identifier value to obtain the encrypted PDF document. </p></li> 
   <li><p>Obtain a <span class="code">System.IO.Stream</span> object by getting the value of the <span class="code">Attachment</span> object’s <span class="code">Stream</span> data member.</p></li> 
   <li><p>Create a byte array and pass that byte array to the <span class="code">System.IO.Stream</span> object’s <span class="code">Read</span> method. This method populates the byte array with a data stream that represents the encrypted PDF document. </p></li> 
   <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents a PDF file location. This object represents the encrypted PDF document.</p></li> 
   <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
   <li><p>Write the contents of the byte array to the PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
  </ol> 
  <h3 id="creating_apache_axis_java_proxy_classes_that_use_dime">Creating Apache Axis Java proxy classes that use DIME</h3> 
  <p></p> 
  <p>You can use the Apache Axis WSDL2Java tool to convert a service WSDL into Java proxy classes so that you can invoke service operations. Using Apache Ant, you can generate Axis library files from a AEM Forms service WSDL that lets you invoke the service. (See <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_apache_axis">Creating Java proxy classes using Apache Axis</a>.)</p> 
  <p>The Apache Axis WSDL2Java tool generates JAVA files that contain methods that are used to send SOAP requests to a service. SOAP requests received by a service are decoded by the Axis-generated libraries and turned back into the methods and arguments.</p> 
  <p>To invoke the <span class="code">MyApplication/EncryptDocument</span> service (which was built in Workbench) using Axis-generated library files and DIME, perform the following steps:</p> 
  <ol> 
   <li><p>Create Java proxy classes that consume the <span class="code">MyApplication/EncryptDocument</span> service WSDL using Apache Axis. (See <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_apache_axis">Creating Java proxy classes using Apache Axis</a>.)</p></li> 
   <li><p>Include the Java proxy classes into your class path. </p></li> 
   <li><p>Create a <span class="code">MyApplicationEncryptDocumentServiceLocator</span> object by using its constructor. </p></li> 
   <li><p>Create a <span class="code">URL</span> object by using its constructor and passing a string value that specifies the AEM Forms service WSDL definition. Ensure that you specify <span class="code">?blob=dime</span> at the end of the SOAP endpoint URL. For example, use </p> 
    <codeblock gutter="true" class="syntax as3">
       http://hiro-xp:8080/soap/services/MyApplication/EncryptDocument?blob=dime. 
    </codeblock></li> 
   <li><p>Create an <span class="code">EncryptDocumentSoapBindingStub</span> object by invoking its constructor and passing the <span class="code">MyApplicationEncryptDocumentServiceLocator </span>object and the <span class="code">URL</span> object.</p></li> 
   <li><p>Set the AEM forms user name and password value by invoking the <span class="code">EncryptDocumentSoapBindingStub</span> object’s <span class="code">setUsername</span> and <span class="code">setPassword</span> methods. </p> 
    <codeblock gutter="true" class="syntax as3">
       encryptionClientStub.setUsername("administrator");&amp;nbsp;!!discoiqbr!! encryptionClientStub.setPassword("password"); 
    </codeblock></li> 
   <li><p>Retrieve the PDF document to send to the <span class="code">MyApplication/EncryptDocument</span> service by creating a <span class="code">java.io.File</span> object. Pass a string value that specifies the PDF document location.</p></li> 
   <li><p>Create a <span class="code">javax.activation.DataHandler</span> object by using its constructor and passing a <span class="code">javax.activation.FileDataSource</span> object. The <span class="code">javax.activation.FileDataSource</span> object can be created by using its constructor and passing the <span class="code">java.io.File</span> object that represents the PDF document. </p></li> 
   <li><p>Create an <span class="code">org.apache.axis.attachments.AttachmentPart</span> object by using its constructor and passing the <span class="code">javax.activation.DataHandler</span> object.</p></li> 
   <li><p>Attach the attachment by invoking the <span class="code">EncryptDocumentSoapBindingStub</span> object’s <span class="code">addAttachment</span> method and passing the <span class="code">org.apache.axis.attachments.AttachmentPart</span> object.</p></li> 
   <li><p>Create a <span class="code">BLOB</span> object by using its constructor. Populate the <span class="code">BLOB</span> object with the attachment identifier value by invoking the <span class="code">BLOB</span> object’s <span class="code">setAttachmentID</span> method and passing the attachment identifier value. This value can be obtained by invoking the <span class="code">org.apache.axis.attachments.AttachmentPart</span> object’s <span class="code">getContentId</span> method. </p></li> 
   <li><p>Invoke the <span class="code">MyApplication/EncryptDocument</span> process by invoking the <span class="code">EncryptDocumentSoapBindingStub</span> object’s <span class="code">invoke</span> method. Pass the <span class="code">BLOB</span> object that contains the DIME attachment. This process returns an encrypted PDF document within a <span class="code">BLOB</span> object. </p></li> 
   <li><p>Obtain the attachment identifier value by invoking the returned <span class="code">BLOB</span> object’s <span class="code">getAttachmentID</span> method. This method returns a string value that represents the identifier value of the returned attachment. </p></li> 
   <li><p>Retrieve the attachments by invoking the <span class="code">EncryptDocumentSoapBindingStub</span> object’s <span class="code">getAttachments</span> method. This method returns an array of <span class="code">Objects</span> that represent the attachments. </p></li> 
   <li><p>Iterate through the attachments (the <span class="code">Object</span> array) and use the attachment identifier value to obtain the encrypted PDF document. Each element is an <span class="code">org.apache.axis.attachments.AttachmentPart</span> object. </p></li> 
   <li><p>Obtain the <span class="code">javax.activation.DataHandler</span> object associated with the attachment by invoking the <span class="code">org.apache.axis.attachments.AttachmentPart</span> object’s <span class="code">getDataHandler</span> method. </p></li> 
   <li><p>Obtain a <span class="code">java.io.FileStream</span> object by invoking the<span class="code"> javax.activation.DataHandler</span> object’s <span class="code">getInputStream</span> method. </p></li> 
   <li><p>Create a byte array and pass that byte array to the <span class="code">java.io.FileStream</span> object’s <span class="code">read</span> method. This method populates the byte array with a data stream that represents the encrypted PDF document. </p></li> 
   <li><p>Create a <span class="code">java.io.File</span> object by using its constructor. This object represents the encrypted PDF document. </p></li> 
   <li><p>Create a <span class="code">java.io.FileOutputStream</span> object by using its constructor and passing the <span class="code">java.io.File</span> object.</p></li> 
   <li><p>Invoke the <span class="code">java.io.FileOutputStream</span> object’s <span class="code">write</span> method and pass the byte array that contains the data stream that represents the encrypted PDF document. </p></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_dime_in_a_java_project">Quick Start: Invoking a service using DIME in a Java project</a></p> 
  <h2 id="using_saml_based_authentication">Using SAML-based authentication</h2> 
  <p></p> 
  <p>AEM Forms supports various web service authentication modes when invoking services. One authentication mode is specifying both a user name and password value using a basic authorization header in the web service call. AEM Forms also supports SAML assertion-based authentication. When a client application invokes an AEM Forms service using a web service, the client application can provide authentication information in one of the following ways:</p> 
  <ul> 
   <li><p>Passing credentials as part of Basic Authorization</p></li> 
   <li><p>Passing username token as part of WS-Security header</p></li> 
   <li><p>Passing a SAML assertion as part of WS-Security header</p></li> 
   <li><p>Passing Kerberos token as part of WS-Security header</p></li> 
  </ul> 
  <p>AEM Forms does not support standard certificate-based authentication but it does support certificate-based authentication in a different form.</p> 
  <note> 
   <p>The web service quick starts in Programming with AEM Forms specify user name and password values to perform authorization.</p> 
  </note> 
  <p>The identity of AEM forms users can be represented through a SAML assertion signed using a secret key. The following XML code shows an example of a SAML assertion.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;Assertion&amp;nbsp;xmlns="urn:oasis:names:tc:SAML:1.0:assertion"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:samlp="urn:oasis:names:tc:SAML:1.0:protocol"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AssertionID="fd4bd0c87302780e0d9bbfa8726d5bc0"&amp;nbsp;IssueInstant="2008-04-17T13:47:00.720Z"&amp;nbsp;Issuer="LiveCycle"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MajorVersion="1"&amp;nbsp;MinorVersion="1"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Conditions&amp;nbsp;NotBefore="2008-04-17T13:47:00.720Z"&amp;nbsp;NotOnOrAfter="2008-04-17T15:47:00.720Z"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Conditions&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;AuthenticationStatement&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AuthenticationInstant="2008-04-17T13:47:00.720Z"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AuthenticationMethod="urn:oasis:names:tc:SAML:1.0:am:unspecified"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Subject&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;NameIdentifier&amp;nbsp;NameQualifier="DefaultDom"&gt;administrator&lt;/NameIdentifier&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;SubjectConfirmation&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ConfirmationMethod&gt;urn:oasis:names:tc:SAML:1.0:cm:sender-vouches&lt;/ConfirmationMethod&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SubjectConfirmation&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Subject&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/AuthenticationStatement&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:Signature&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:SignedInfo&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:CanonicalizationMethod&amp;nbsp;Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"&gt;&lt;/ds:CanonicalizationMethod&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:SignatureMethod&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1"&gt;&lt;/ds:SignatureMethod&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:Reference&amp;nbsp;URI="#fd4bd0c87302780e0d9bbfa8726d5bc0"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:Transforms&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:Transform&amp;nbsp;Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"&gt;&lt;/ds:Transform&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:Transform&amp;nbsp;Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ec:InclusiveNamespaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PrefixList="code&amp;nbsp;ds&amp;nbsp;kind&amp;nbsp;rw&amp;nbsp;saml&amp;nbsp;samlp&amp;nbsp;typens&amp;nbsp;#default"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ec:InclusiveNamespaces&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ds:Transform&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ds:Transforms&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:DigestMethod&amp;nbsp;Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"&gt;&lt;/ds:DigestMethod&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:DigestValue&gt;hVrtqjWr+VzaVUIpQx0YI9lIjaY=&lt;/ds:DigestValue&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ds:Reference&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ds:SignedInfo&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;ds:SignatureValue&gt;UMbBb+cUcPtcWDCIhXes4n4FxfU=&lt;/ds:SignatureValue&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/ds:Signature&gt;&amp;nbsp;!!discoiqbr!! &lt;/Assertion&gt; 
  </codeblock> 
  <p>This example assertion is issued for an administrator user. This assertion contains the following noticeable items:</p> 
  <ul> 
   <li><p>It is valid for certain duration.</p></li> 
   <li><p>It is issued for a particular user.</p></li> 
   <li><p>It is digitally signed. So any modification done to it would break the signature.</p></li> 
   <li><p>It can be presented to AEM Forms as a token of user's identity similar to user name and password. </p></li> 
  </ul> 
  <p>A client application can retrieve the assertion from any AEM Forms AuthenticationManager API which returns an <span class="code">AuthResult</span> object. You can obtain an <span class="code">AuthResult</span> instance by performing one of the following two methods: </p> 
  <ul> 
   <li><p>Authenticating the user using any of the authenticate methods exposed by AuthenticationManager API. Typically, one would use the user name and password; however, you can also use the certificate authentication.</p></li> 
   <li><p>Using the <span class="code">AuthenticationManager.getAuthResultOnBehalfOfUser</span> method. This method lets a client application get an <span class="code">AuthResult</span> object for any AEM forms user.</p></li> 
  </ul> 
  <p>a AEM forms user can be authenticated using a SAML token that is obtained. This SAML assertion (xml fragment) can be send as part of the WS-Security header with the web service call for user authentication. Typically, a client application has authenticated a user but has not stored the user credentials. (Or the user has logged on to that client through a mechanism other than using a user name and password.) In this situation, the client application has to invoke AEM Forms and impersonate a specific user which is allowed to invoke AEM Forms. </p> 
  <p>To impersonate a specific user, invoke the <span class="code">AuthenticationManager.getAuthResultOnBehalfOfUser</span> method using a web service. This method returns an <span class="code">AuthResult</span> instance which contains the SAML assertion for that user. </p> 
  <p>Next, use that SAML assertion to invoke any service that requires authentication. This action involves sending the assertion as part of the SOAP header. When a web service call is made with this assertion, AEM Forms identifies the user as the one represented by that assertion. That is, the user specified in the assertion is the user who is invoking the service.</p> 
  <h3 id="using_apache_axis_classes_and_saml_based_authentication">Using Apache Axis classes and SAML-based authentication</h3> 
  <p></p> 
  <p>You can invoke an AEM Forms service by Java proxy classes that were created using the Axis library. (See <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_apache_axis">Creating Java proxy classes using Apache Axis</a>.)</p> 
  <p>When using AXIS that uses SAML-based authentication, register the request and response handler with Axis. Apache Axis invokes the handler before sending an invocation request to AEM Forms. To register a handler, create a Java class that extends <span class="code">org.apache.axis.handlers.BasicHandler</span>. </p> 
  <p><strong>Create an AssertionHandler with Axis</strong></p> 
  <p>The following Java class, named <span class="code">AssertionHandler.java</span>, shows an example of a Java class that extends <span class="code">org.apache.axis.handlers.BasicHandler</span>. </p> 
  <codeblock gutter="true" class="syntax as3">
     public&amp;nbsp;class&amp;nbsp;AssertionHandler&amp;nbsp;extends&amp;nbsp;BasicHandler&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;invoke(MessageContext&amp;nbsp;ctx)&amp;nbsp;throws&amp;nbsp;AxisFault&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;assertion&amp;nbsp;=&amp;nbsp;(String)&amp;nbsp;ctx.getProperty(LC_ASSERTION);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//no&amp;nbsp;assertion&amp;nbsp;hence&amp;nbsp;nothing&amp;nbsp;to&amp;nbsp;insert&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(assertion&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;return;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MessageElement&amp;nbsp;samlElement&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MessageElement(convertToXML(assertion));&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SOAPHeader&amp;nbsp;header&amp;nbsp;=&amp;nbsp;(SOAPHeader)&amp;nbsp;ctx.getRequestMessage().getSOAPHeader();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;the&amp;nbsp;wsse:Security&amp;nbsp;element&amp;nbsp;which&amp;nbsp;would&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;SAML&amp;nbsp;element&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SOAPElement&amp;nbsp;wsseHeader&amp;nbsp;=&amp;nbsp;header.addChildElement("Security",&amp;nbsp;"wsse",&amp;nbsp;WSSE_NS);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wsseHeader.appendChild(samlElement);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//remove&amp;nbsp;the&amp;nbsp;actor&amp;nbsp;attribute&amp;nbsp;as&amp;nbsp;in&amp;nbsp;LC&amp;nbsp;we&amp;nbsp;do&amp;nbsp;not&amp;nbsp;specify&amp;nbsp;any&amp;nbsp;actor.&amp;nbsp;This&amp;nbsp;would&amp;nbsp;not&amp;nbsp;remove&amp;nbsp;the&amp;nbsp;actor&amp;nbsp;attribute&amp;nbsp;though&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//it&amp;nbsp;would&amp;nbsp;only&amp;nbsp;remove&amp;nbsp;it&amp;nbsp;from&amp;nbsp;the&amp;nbsp;soapenv&amp;nbsp;namespace&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wsseHeader.getAttributes().removeNamedItem("actor");&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(SOAPException&amp;nbsp;e)&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;AxisFault("Error&amp;nbsp;occured&amp;nbsp;while&amp;nbsp;adding&amp;nbsp;the&amp;nbsp;assertion&amp;nbsp;to&amp;nbsp;the&amp;nbsp;SOAP&amp;nbsp;Header",e);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <p><strong>Register the handler</strong></p> 
  <p>To register a handler with Axis, create a client-config.wsdd file. By default, Axis looks for a file with this name. The following XML code is an example of a client-config.wsdd file. See Axis documentation for more information. </p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;deployment&amp;nbsp;xmlns="http://xml.apache.org/axis/wsdd/"&amp;nbsp;xmlns:java="http://xml.apache.org/axis/wsdd/providers/java"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;transport&amp;nbsp;name="http"&amp;nbsp;pivot="java:org.apache.axis.transport.http.HTTPSender"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;globalConfiguration&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;requestFlow&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;handler&amp;nbsp;type="java:com.adobe.idp.um.example.AssertionHandler"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/requestFlow&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/globalConfiguration&amp;nbsp;&gt;&amp;nbsp;!!discoiqbr!! &lt;/deployment&gt;&amp;nbsp;!!discoiqbr!!  
  </codeblock> 
  <p><strong>Invoke an AEM Forms service</strong></p> 
  <p>The following code example invokes an AEM Forms service using SAML-based authentication.</p> 
  <codeblock gutter="true" class="syntax as3">
     public&amp;nbsp;class&amp;nbsp;ImpersonationExample&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;&amp;nbsp;authenticateOnBehalf(String&amp;nbsp;superUsername,String&amp;nbsp;password,&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;canonicalName,String&amp;nbsp;domainName)&amp;nbsp;throws&amp;nbsp;UMException,&amp;nbsp;RemoteException{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((org.apache.axis.client.Stub)&amp;nbsp;authenticationManager).setUsername(superUsername);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((org.apache.axis.client.Stub)&amp;nbsp;authenticationManager).setPassword(password);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Step&amp;nbsp;1&amp;nbsp;-&amp;nbsp;Invoke&amp;nbsp;the&amp;nbsp;Auth&amp;nbsp;manager&amp;nbsp;api&amp;nbsp;to&amp;nbsp;get&amp;nbsp;an&amp;nbsp;assertion&amp;nbsp;for&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;be&amp;nbsp;impersonated&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AuthResult&amp;nbsp;ar&amp;nbsp;=&amp;nbsp;authenticationManager.getAuthResultOnBehalfOfUser(canonicalName,&amp;nbsp;domainName,&amp;nbsp;null);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;assertion&amp;nbsp;=&amp;nbsp;ar.getAssertion();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Step&amp;nbsp;2&amp;nbsp;-&amp;nbsp;Setting&amp;nbsp;the&amp;nbsp;assertion&amp;nbsp;here&amp;nbsp;to&amp;nbsp;be&amp;nbsp;picked&amp;nbsp;later&amp;nbsp;by&amp;nbsp;the&amp;nbsp;AssertionHandler.&amp;nbsp;Note&amp;nbsp;that&amp;nbsp;stubs&amp;nbsp;are&amp;nbsp;not&amp;nbsp;threadSafe&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//hence&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;reused.&amp;nbsp;For&amp;nbsp;this&amp;nbsp;simple&amp;nbsp;example&amp;nbsp;we&amp;nbsp;have&amp;nbsp;made&amp;nbsp;them&amp;nbsp;instance&amp;nbsp;variable&amp;nbsp;but&amp;nbsp;care&amp;nbsp;should&amp;nbsp;be&amp;nbsp;taken&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//regarding&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;safety&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((javax.xml.rpc.Stub)&amp;nbsp;authorizationManager)._setProperty(AssertionHandler.LC_ASSERTION,&amp;nbsp;assertion);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Role&amp;nbsp;findRole(String&amp;nbsp;roleId)&amp;nbsp;throws&amp;nbsp;UMException,&amp;nbsp;RemoteException{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//This&amp;nbsp;api&amp;nbsp;would&amp;nbsp;be&amp;nbsp;invoked&amp;nbsp;under&amp;nbsp;bob's&amp;nbsp;user&amp;nbsp;rights&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;authorizationManager.findRole(roleId);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ImpersonationExample&amp;nbsp;ie&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ImpersonationExample("http://localhost:5555");&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Get&amp;nbsp;the&amp;nbsp;SAML&amp;nbsp;assertion&amp;nbsp;for&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;impersonate&amp;nbsp;and&amp;nbsp;store&amp;nbsp;it&amp;nbsp;in&amp;nbsp;stub&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ie.authenticateOnBehalf(&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"administrator",&amp;nbsp;//The&amp;nbsp;Super&amp;nbsp;user&amp;nbsp;which&amp;nbsp;has&amp;nbsp;the&amp;nbsp;required&amp;nbsp;impersonation&amp;nbsp;permission&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"password",&amp;nbsp;//&amp;nbsp;Password&amp;nbsp;of&amp;nbsp;the&amp;nbsp;super&amp;nbsp;user&amp;nbsp;as&amp;nbsp;referred&amp;nbsp;above&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"bob",&amp;nbsp;//Cannonical&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;impersonate&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"testdomain"&amp;nbsp;//Domain&amp;nbsp;of&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;impersonate&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Role&amp;nbsp;r&amp;nbsp;=&amp;nbsp;ie.findRole("BASIC_ROLE_ADMINISTRATOR");&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Role&amp;nbsp;"+r.getName());&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <h3 id="using_a_net_client_assembly_and_saml_based_authentication">Using a .NET client assembly and SAML-based authentication</h3> 
  <p></p> 
  <p>You can invoke a Forms service by using a .NET client assembly and SAML-based authentication. To do so, you must use the Web Service Enhancements 3.0 (WSE). For information about creating a .NET client assembly that uses WSE, see <a href="invoking-aem-forms-using-web#creating_a_net_project_that_uses_dime">Creating a .NET project that uses DIME</a>. </p> 
  <note> 
   <p>The DIME section uses WSE 2.0. To use SAML-based authentication, follow the same instructions that are specified in the DIME topic. However, replace WSE 2.0 with WSE 3.0. Install Web Services Enhancements 3.0 on your development computer and integrate it with Microsoft Visual Studio .NET. You can download Web Services Enhancements 3.0 from the <a href="http://www.microsoft.com/downloads/search.aspx">Microsoft Download Center</a>.</p> 
  </note> 
  <p>The WSE architecture uses Policies, Assertions, and SecurityToken data types. Briefly, for a web service call, specify a policy. A policy can have multiple assertions. Each assertion can contain filters. A filter is invoked at certain stages in a web service call and, at that time, they can modify the SOAP request. For full details, see the Web Service Enhancements 3.0 documentation.</p> 
  <p><strong>Create the Assertion and Filter</strong></p> 
  <p>The following C# code example creates filter and assertion classes. This code example creates a SamlAssertionOutputFilter. This filter is invoked by the WSE framework before the SOAP request is sent to AEM Forms. </p> 
  <codeblock gutter="true" class="syntax as3">
     class&amp;nbsp;LCSamlPolicyAssertion&amp;nbsp;:&amp;nbsp;Microsoft.Web.ServicES4.Design.PolicyAssertion&amp;nbsp;!!discoiqbr!! {&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;override&amp;nbsp;Microsoft.Web.ServicES4.SoapFilter&amp;nbsp;CreateClientOutputFilter(FilterCreationContext&amp;nbsp;context)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;SamlAssertionOutputFilter();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;!!discoiqbr!! }&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! class&amp;nbsp;SamlAssertionOutputFilter&amp;nbsp;:&amp;nbsp;SendSecurityFilter&amp;nbsp;!!discoiqbr!! {&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;override&amp;nbsp;void&amp;nbsp;SecureMessage(SoapEnvelope&amp;nbsp;envelope,&amp;nbsp;Security&amp;nbsp;security)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Get&amp;nbsp;the&amp;nbsp;SamlToken&amp;nbsp;from&amp;nbsp;the&amp;nbsp;SessionState&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SamlToken&amp;nbsp;samlToken&amp;nbsp;=&amp;nbsp;envelope.Context.Credentials.UltimateReceiver.GetClientToken&lt;SamlToken&gt;();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;security.Tokens.Add(samlToken);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <p><strong>Create the SAML Token</strong></p> 
  <p>Create a class to represent the SAML assertion. The main task that this class performs is convert data values from string to xml and preserve white space. This assertion xml is later imported into the SOAP request.</p> 
  <codeblock gutter="true" class="syntax as3">
     class&amp;nbsp;SamlToken&amp;nbsp;:&amp;nbsp;SecurityToken&amp;nbsp;!!discoiqbr!! {&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;const&amp;nbsp;string&amp;nbsp;SAMLAssertion&amp;nbsp;=&amp;nbsp;"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;XmlElement&amp;nbsp;_assertionElement;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;SamlToken(string&amp;nbsp;assertion)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;base(SAMLAssertion)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;XmlDocument&amp;nbsp;xmlDoc&amp;nbsp;=&amp;nbsp;new&amp;nbsp;XmlDocument();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//The&amp;nbsp;white&amp;nbsp;space&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;preserved&amp;nbsp;else&amp;nbsp;the&amp;nbsp;digital&amp;nbsp;signature&amp;nbsp;would&amp;nbsp;get&amp;nbsp;broken&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlDoc.PreserveWhitespace&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlDoc.LoadXml(assertion);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_assertionElement&amp;nbsp;=&amp;nbsp;xmlDoc.DocumentElement;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;override&amp;nbsp;XmlElement&amp;nbsp;GetXml(XmlDocument&amp;nbsp;document)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;(XmlElement)document.ImportNode(_assertionElement,&amp;nbsp;true);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <p><strong>Invoke an AEM Forms service</strong></p> 
  <p>The following C# code example invokes a Forms service by using SAML-based authentication.</p> 
  <codeblock gutter="true" class="syntax as3">
     public&amp;nbsp;class&amp;nbsp;ImpersonationExample&amp;nbsp;!!discoiqbr!! {&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;AuthenticateOnBehalf(string&amp;nbsp;superUsername,&amp;nbsp;string&amp;nbsp;password,&amp;nbsp;string&amp;nbsp;canonicalName,&amp;nbsp;string&amp;nbsp;domainName)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;policy&amp;nbsp;for&amp;nbsp;UsernamePassword&amp;nbsp;Token&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Policy&amp;nbsp;usernamePasswordPolicy&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Policy();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;usernamePasswordPolicy.Assertions.Add(new&amp;nbsp;UsernameOverTransportAssertion());&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UsernameToken&amp;nbsp;token&amp;nbsp;=&amp;nbsp;new&amp;nbsp;UsernameToken(superUsername,&amp;nbsp;password,&amp;nbsp;PasswordOption.SendPlainText);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authenticationManager.SetClientCredential(token);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authenticationManager.SetPolicy(usernamePasswordPolicy);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Get&amp;nbsp;the&amp;nbsp;SAML&amp;nbsp;assertion&amp;nbsp;for&amp;nbsp;impersonated&amp;nbsp;user&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AuthClient.AuthenticationManagerService.AuthResult&amp;nbsp;ar&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&amp;nbsp;authenticationManager.getAuthResultOnBehalfOfUser(canonicalName,&amp;nbsp;domainName,&amp;nbsp;null);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.Console.WriteLine("Received&amp;nbsp;assertion&amp;nbsp;"&amp;nbsp;+&amp;nbsp;ar.assertion);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;policy&amp;nbsp;for&amp;nbsp;inserting&amp;nbsp;SAML&amp;nbsp;assertion&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Policy&amp;nbsp;samlPolicy&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Policy();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;samlPolicy.Assertions.Add(new&amp;nbsp;LCSamlPolicyAssertion());&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authorizationManager.SetPolicy(samlPolicy);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set&amp;nbsp;the&amp;nbsp;SAML&amp;nbsp;assertion&amp;nbsp;obtained&amp;nbsp;previously&amp;nbsp;as&amp;nbsp;the&amp;nbsp;token&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authorizationManager.SetClientCredential(new&amp;nbsp;SamlToken(ar.assertion));&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Role&amp;nbsp;findRole(string&amp;nbsp;roleId)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;authorizationManager.findRole(roleId);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;void&amp;nbsp;Main(string[]&amp;nbsp;args)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ImpersonationExample&amp;nbsp;ie&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ImpersonationExample("http://localhost:5555");&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ie.AuthenticateOnBehalf(&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"administrator",&amp;nbsp;//The&amp;nbsp;Super&amp;nbsp;user&amp;nbsp;which&amp;nbsp;has&amp;nbsp;the&amp;nbsp;required&amp;nbsp;impersonation&amp;nbsp;permission&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"password",&amp;nbsp;//&amp;nbsp;Password&amp;nbsp;of&amp;nbsp;the&amp;nbsp;super&amp;nbsp;user&amp;nbsp;as&amp;nbsp;referred&amp;nbsp;above&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"bob",&amp;nbsp;//Cannonical&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;impersonate&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"testdomain"&amp;nbsp;//Domain&amp;nbsp;of&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;impersonate&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Role&amp;nbsp;r&amp;nbsp;=&amp;nbsp;ie.findRole("BASIC_ROLE_ADMINISTRATOR");&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.Console.WriteLine("Role&amp;nbsp;"+r.name);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <h2 id="related_considerations_when_using_web_services">Related considerations when using web services</h2> 
  <p></p> 
  <p>Sometimes issues occur when invoking certain AEM Forms services operations by using web services. The objective of this discussion is to identify those issues and provide a solution, if one is available. </p> 
  <h3 id="invoking_service_operations_asynchronously">Invoking service operations asynchronously</h3> 
  <p></p> 
  <p>If you attempt to asynchronously invoke an AEM Forms service operation, such as the Generate PDF’s <span class="code">htmlToPDF</span> operation, a <span class="code">SoapFaultException</span> occurs. To resolve this issue, create a custom-binding XML file that maps the <span class="code">ExportPDF_Result</span> element and other elements into different classes. The following XML represents a custom binding file. </p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;bindings&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:xsd="http://www.w3.org/2001/XMLSchema"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:jxb="http://java.sun.com/xml/ns/jaxb"&amp;nbsp;jxb:version="1.0"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wsdlLocation="http://localhost:8080/soap/services/GeneratePDFService?wsdl&amp;amp;async=true&amp;amp;lc_version=9.0.0"&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xmlns="http://java.sun.com/xml/ns/jaxws"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;enableAsyncMapping&gt;false&lt;/enableAsyncMapping&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;package&amp;nbsp;name="external_customize.client"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;enableWrapperStyle&gt;true&lt;/enableWrapperStyle&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;bindings&amp;nbsp;node="/wsdl:definitions/wsdl:types/xsd:schema[@targetNamespace='http://adobe.com/idp/services']/xsd:element[@name='ExportPDF_Result']"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jxb:class&amp;nbsp;name="ExportPDFAsyncResult"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/jxb:class&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/bindings&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;bindings&amp;nbsp;node="/wsdl:definitions/wsdl:types/xsd:schema[@targetNamespace='http://adobe.com/idp/services']/xsd:element[@name='CreatePDF_Result']"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jxb:class&amp;nbsp;name="CreatePDFAsyncResult"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/jxb:class&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/bindings&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;bindings&amp;nbsp;node="/wsdl:definitions/wsdl:types/xsd:schema[@targetNamespace='http://adobe.com/idp/services']/xsd:element[@name='HtmlToPDF_Result']"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jxb:class&amp;nbsp;name="HtmlToPDFAsyncResult"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/jxb:class&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/bindings&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;bindings&amp;nbsp;node="/wsdl:definitions/wsdl:types/xsd:schema[@targetNamespace='http://adobe.com/idp/services']/xsd:element[@name='OptimizePDF_Result']"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jxb:class&amp;nbsp;name="OptimizePDFAsyncResult"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/jxb:class&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/bindings&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--bindings&amp;nbsp;node="//wsdl:portType[@name='GeneratePDFService']/wsdl:operation[@name='HtmlToPDF_Result']"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jxb:class&amp;nbsp;name="HtmlToPDFAsyncResult"/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/bindings--&gt;&amp;nbsp;!!discoiqbr!! &lt;/bindings&gt; 
  </codeblock> 
  <p>Use this XML file when creating Java proxy files by using JAX-WS. (See <a href="invoking-aem-forms-using-web#creating_java_proxy_classes_using_jax_ws">Creating Java proxy classes using JAX-WS</a>.) </p> 
  <p>Reference this XML file when executing the JAX-WS tool (wsimport.exe) by using the -<span class="code">b</span> command line option. Update the <span class="code">wsdlLocation</span> element in the binding XML file to specify the URL of AEM Forms. </p> 
  <p>To ensure that asynchronous invocation works, modify the end point URL value and specify <span class="code">async=true</span>. For example, for Java proxy files that are created with JAX-WS, specify the following for the <span class="code">BindingProvider.ENDPOINT_ADDRESS_PROPERTY</span>. </p> 
  <p><span class="code">http://server:port/soap/services/ServiceName?wsdl&amp;async=true&amp;lc_version=9.0.0</span></p> 
  <p>The following list specifies other services that need a custom binding file when invoked asynchronously:</p> 
  <ul> 
   <li><p>PDFG3D</p></li> 
   <li><p>Task Manager</p></li> 
   <li><p>Application Manager</p></li> 
   <li><p>Directory Manager</p></li> 
   <li><p>Distiller</p></li> 
   <li><p>Rights Management</p></li> 
   <li><p>Document Management </p></li> 
  </ul> 
  <h3 id="differences_in_j2ee_application_servers">Differences in J2EE application servers</h3> 
  <p></p> 
  <p>Sometimes a proxy library created using a specific J2EE application server does not successfully invoke AEM Forms that is hosted on a different J2EE application server. Consider a proxy library that is generated using AEM Forms that is deployed on WebSphere. This proxy library cannot successfully invoke AEM Forms services that are deployed on the JBoss Application Server. </p> 
  <p>Some AEM Forms complex data types, such as <span class="code">PrincipalReference</span>, are defined differently when AEM Forms is deployed on WebSphere as compared to the JBoss Application Server. Differences in the JDKs used by the different J2EE application services are the reason why there are differences in WSDL definitions. As a result, use proxy libraries that are generated from the same J2EE application server. </p> 
  <h3 id="accessing_multiple_services_using_web_services">Accessing multiple services using web services</h3> 
  <p></p> 
  <p>Due to namespace conflicts, data objects cannot be shared between multiple service WSDLs. Different services can share data types and, therefore the services share the definition of these types in the WSDLs. For example, you cannot add two .NET client assemblies that contain a <span class="code">BLOB</span> data type to the same .NET client project. If you attempt to do so, a compile error occurs. </p> 
  <p>The following list specifies data types that cannot be shared between multiple service WSDLs:</p> 
  <ul> 
   <li></li> 
   <li></li> 
   <li></li> 
   <li></li> 
   <li></li> 
   <li></li> 
  </ul> 
  <p>To avoid this problem, it is recommended that you fully-qualify the data types. For example, consider a .NET application that references both the Forms service and Signature service using a service reference. Both service references will contain a <span class="code">BLOB</span> class. To use a <span class="code">BLOB</span> instance, fully-qualify the <span class="code">BLOB</span> object when you declare it. This approach is shown in the following code example. For information about this code exampe, see <a href="/programming-with-aem-forms/digitally-signing-certifying-documents#digitally_signing_interactive_forms">Digitally Signing Interactive Forms</a>. </p> 
  <p>The following C# code example signs an interactive form that is rendered by the Forms service. The client application has two service references. The <span class="code">BLOB</span> instance that is associated with the Forms service belongs to the <span class="code">SignInteractiveForm.ServiceReference2</span> namespace. Likewise, the <span class="code">BLOB</span> instance that is associated with the Signature service belongs to the <span class="code">SignInteractiveForm.ServiceReference1</span> namespace. The signed interactive form is saved as a PDF file named <i>LoanXFASigned.pdf</i>. </p> 
  <codeblock gutter="true" class="syntax as3">
     ???/**&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Ensure&amp;nbsp;that&amp;nbsp;you&amp;nbsp;create&amp;nbsp;a&amp;nbsp;.NET&amp;nbsp;project&amp;nbsp;that&amp;nbsp;uses&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;MS&amp;nbsp;Visual&amp;nbsp;Studio&amp;nbsp;2008&amp;nbsp;and&amp;nbsp;version&amp;nbsp;3.5&amp;nbsp;of&amp;nbsp;the&amp;nbsp;.NET&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;framework.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;required&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;a&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;AEM&amp;nbsp;Forms&amp;nbsp;service&amp;nbsp;using&amp;nbsp;MTOM.&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;For&amp;nbsp;information,&amp;nbsp;see&amp;nbsp;"Invoking&amp;nbsp;AEM&amp;nbsp;Forms&amp;nbsp;using&amp;nbsp;MTOM"&amp;nbsp;in&amp;nbsp;Programming&amp;nbsp;with&amp;nbsp;AEM&amp;nbsp;forms&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System.Collections.Generic;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System.Linq;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System.Text;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System.ServiceModel;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;System.IO;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! //A&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Signature&amp;nbsp;service&amp;nbsp;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;SignInteractiveForm.ServiceReference1;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! //A&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Forms&amp;nbsp;service&amp;nbsp;&amp;nbsp;!!discoiqbr!! using&amp;nbsp;SignInteractiveForm.ServiceReference2;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! namespace&amp;nbsp;SignInteractiveForm&amp;nbsp;!!discoiqbr!! {&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;Program&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;void&amp;nbsp;Main(string[]&amp;nbsp;args)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Because&amp;nbsp;BLOB&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;used&amp;nbsp;in&amp;nbsp;both&amp;nbsp;service&amp;nbsp;references&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//it&amp;nbsp;is&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;fully-qualify&amp;nbsp;the&amp;nbsp;BLOB&amp;nbsp;objects&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Retrieve&amp;nbsp;the&amp;nbsp;form&amp;nbsp;--&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;Forms&amp;nbsp;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB&amp;nbsp;formData&amp;nbsp;=&amp;nbsp;GetForm();&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;BLOB&amp;nbsp;object&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Signature&amp;nbsp;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference1.BLOB&amp;nbsp;sigData&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SignInteractiveForm.ServiceReference1.BLOB();&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Transfer&amp;nbsp;the&amp;nbsp;byte&amp;nbsp;stream&amp;nbsp;from&amp;nbsp;one&amp;nbsp;Forms&amp;nbsp;BLOB&amp;nbsp;object&amp;nbsp;to&amp;nbsp;the&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Signature&amp;nbsp;BLOB&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sigData.MTOM&amp;nbsp;=&amp;nbsp;formData.MTOM;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sign&amp;nbsp;the&amp;nbsp;Form&amp;nbsp;--&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;Signature&amp;nbsp;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignForm(sigData);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;ee)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(ee.Message);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Creates&amp;nbsp;an&amp;nbsp;interactive&amp;nbsp;PDF&amp;nbsp;form&amp;nbsp;based&amp;nbsp;on&amp;nbsp;a&amp;nbsp;XFA&amp;nbsp;form&amp;nbsp;-&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;Forms&amp;nbsp;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB&amp;nbsp;GetForm()&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;FormsServiceClient&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FormsServiceClient&amp;nbsp;formsClient&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FormsServiceClient();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formsClient.Endpoint.Address&amp;nbsp;=&amp;nbsp;new&amp;nbsp;System.ServiceModel.EndpointAddress("http://hiro-xp:8080/soap/services/FormsService?blob=mtom");&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Enable&amp;nbsp;BASIC&amp;nbsp;HTTP&amp;nbsp;authentication&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BasicHttpBinding&amp;nbsp;b&amp;nbsp;=&amp;nbsp;(BasicHttpBinding)formsClient.Endpoint.Binding;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MessageEncoding&amp;nbsp;=&amp;nbsp;WSMessageEncoding.Mtom;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formsClient.ClientCredentials.UserName.UserName&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formsClient.ClientCredentials.UserName.Password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Security.Transport.ClientCredentialType&amp;nbsp;=&amp;nbsp;HttpClientCredentialType.Basic;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Security.Mode&amp;nbsp;=&amp;nbsp;BasicHttpSecurityMode.TransportCredentialOnly;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MaxReceivedMessageSize&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MaxBufferSize&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.ReaderQuotas.MaxArrayLength&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;BLOB&amp;nbsp;to&amp;nbsp;store&amp;nbsp;form&amp;nbsp;data&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB&amp;nbsp;formData&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB&amp;nbsp;pdfForm&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB();&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;a&amp;nbsp;XML&amp;nbsp;form&amp;nbsp;data&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;path&amp;nbsp;=&amp;nbsp;"C:\\Adobe\Loan.xml";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileStream&amp;nbsp;fs&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileStream(path,&amp;nbsp;FileMode.Open);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Get&amp;nbsp;the&amp;nbsp;length&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;stream&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;len&amp;nbsp;=&amp;nbsp;(int)fs.Length;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[]&amp;nbsp;ByteArray&amp;nbsp;=&amp;nbsp;new&amp;nbsp;byte[len];&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fs.Read(ByteArray,&amp;nbsp;0,&amp;nbsp;len);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formData.MTOM&amp;nbsp;=&amp;nbsp;ByteArray;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;a&amp;nbsp;XML&amp;nbsp;form&amp;nbsp;data&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;path2&amp;nbsp;=&amp;nbsp;"C:\\Adobe\LoanSigXFA.pdf";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileStream&amp;nbsp;fs2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileStream(path2,&amp;nbsp;FileMode.Open);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Get&amp;nbsp;the&amp;nbsp;length&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;stream&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;len2&amp;nbsp;=&amp;nbsp;(int)fs2.Length;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[]&amp;nbsp;ByteArray2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;byte[len2];&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fs2.Read(ByteArray2,&amp;nbsp;0,&amp;nbsp;len2);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pdfForm.MTOM&amp;nbsp;=&amp;nbsp;ByteArray2;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PDFFormRenderSpec&amp;nbsp;renderSpec&amp;nbsp;=&amp;nbsp;new&amp;nbsp;PDFFormRenderSpec();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;renderSpec.generateServerAppearance&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set&amp;nbsp;out&amp;nbsp;parameter&amp;nbsp;values&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;pageCount&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;localValue&amp;nbsp;=&amp;nbsp;"en_US";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FormsResult&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FormsResult();&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Render&amp;nbsp;an&amp;nbsp;interactive&amp;nbsp;PDF&amp;nbsp;form&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formsClient.renderPDFForm2(&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pdfForm,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;formData,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;renderSpec,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out&amp;nbsp;pageCount,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out&amp;nbsp;localValue,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out&amp;nbsp;result);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Write&amp;nbsp;the&amp;nbsp;data&amp;nbsp;stream&amp;nbsp;to&amp;nbsp;the&amp;nbsp;BLOB&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference2.BLOB&amp;nbsp;outForm&amp;nbsp;=&amp;nbsp;result.outputContent;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;outForm;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;ee)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(ee.Message);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;null;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sign&amp;nbsp;the&amp;nbsp;form&amp;nbsp;--&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;Signature&amp;nbsp;service&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;void&amp;nbsp;SignForm(SignInteractiveForm.ServiceReference1.BLOB&amp;nbsp;inDoc)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;SignatureServiceClient&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignatureServiceClient&amp;nbsp;signatureClient&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SignatureServiceClient();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;signatureClient.Endpoint.Address&amp;nbsp;=&amp;nbsp;new&amp;nbsp;System.ServiceModel.EndpointAddress("http://hiro-xp:8080/soap/services/SignatureService?blob=mtom");&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Enable&amp;nbsp;BASIC&amp;nbsp;HTTP&amp;nbsp;authentication&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BasicHttpBinding&amp;nbsp;b&amp;nbsp;=&amp;nbsp;(BasicHttpBinding)signatureClient.Endpoint.Binding;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MessageEncoding&amp;nbsp;=&amp;nbsp;WSMessageEncoding.Mtom;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;signatureClient.ClientCredentials.UserName.UserName&amp;nbsp;=&amp;nbsp;"administrator";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;signatureClient.ClientCredentials.UserName.Password&amp;nbsp;=&amp;nbsp;"password";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Security.Transport.ClientCredentialType&amp;nbsp;=&amp;nbsp;HttpClientCredentialType.Basic;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Security.Mode&amp;nbsp;=&amp;nbsp;BasicHttpSecurityMode.TransportCredentialOnly;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MaxReceivedMessageSize&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.MaxBufferSize&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.ReaderQuotas.MaxArrayLength&amp;nbsp;=&amp;nbsp;2000000;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;signature&amp;nbsp;field&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;fieldName&amp;nbsp;=&amp;nbsp;"form1[0].grantApplication[0].page1[0].SignatureField1[0]";&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;Credential&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Credential&amp;nbsp;myCred&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Credential();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myCred.alias&amp;nbsp;=&amp;nbsp;"secure";&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;the&amp;nbsp;reason&amp;nbsp;to&amp;nbsp;sign&amp;nbsp;the&amp;nbsp;document&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;reason&amp;nbsp;=&amp;nbsp;"The&amp;nbsp;document&amp;nbsp;was&amp;nbsp;reviewed";&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;the&amp;nbsp;location&amp;nbsp;of&amp;nbsp;the&amp;nbsp;signer&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;location&amp;nbsp;=&amp;nbsp;"New&amp;nbsp;York&amp;nbsp;HQ";&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Specify&amp;nbsp;contact&amp;nbsp;information&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;contactInfo&amp;nbsp;=&amp;nbsp;"Tony&amp;nbsp;Blue";&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;PDFSignatureAppearanceOptions&amp;nbsp;object&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//and&amp;nbsp;show&amp;nbsp;date&amp;nbsp;information&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PDFSignatureAppearanceOptionSpec&amp;nbsp;appear&amp;nbsp;=&amp;nbsp;new&amp;nbsp;PDFSignatureAppearanceOptionSpec();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;appear.showDate&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sign&amp;nbsp;the&amp;nbsp;PDF&amp;nbsp;document&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SignInteractiveForm.ServiceReference1.BLOB&amp;nbsp;signedDoc&amp;nbsp;=&amp;nbsp;signatureClient.sign(&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inDoc,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fieldName,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myCred,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HashAlgorithm.SHA1,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reason,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;contactInfo,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;appear,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;null);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Populate&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;array&amp;nbsp;with&amp;nbsp;BLOB&amp;nbsp;data&amp;nbsp;that&amp;nbsp;represents&amp;nbsp;the&amp;nbsp;signed&amp;nbsp;form&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[]&amp;nbsp;outByteArray&amp;nbsp;=&amp;nbsp;signedDoc.MTOM;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Save&amp;nbsp;the&amp;nbsp;signed&amp;nbsp;PDF&amp;nbsp;document&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;fileName&amp;nbsp;=&amp;nbsp;"C:\\Adobe\LoanXFASigned.pdf";&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileStream&amp;nbsp;fs2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileStream(fileName,&amp;nbsp;FileMode.OpenOrCreate);&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create&amp;nbsp;a&amp;nbsp;BinaryWriter&amp;nbsp;object&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BinaryWriter&amp;nbsp;w&amp;nbsp;=&amp;nbsp;new&amp;nbsp;BinaryWriter(fs2);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.Write(outByteArray);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.Close();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fs2.Close();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;ee)&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(ee.Message);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! }&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!!  
  </codeblock> 
  <h3 id="services_starting_with_the_letter_i_produce_invalid_proxy_files">Services starting with the letter I produce invalid proxy files</h3> 
  <p></p> 
  <p>The name of some AEM Forms generated proxy classes are incorrect when using Microsoft .Net 3.5 and WCF. This issue occurs when proxy classes are created for the IBMFilenetContentRepositoryConnector, IDPSchedulerService or any other service whose name starts with the letter I. For example, the name of the generated client in case of IBMFileNetContentRepositoryConnector is <span class="code">BMFileNetContentRepositoryConnectorClient</span>. The letter I is missing in the generated proxy class.</p> 
  <p></p> 
  <related-links> 
   <a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_base64_in_a_microsoft_net_project">Quick Start: Invoking a service using base64 in a Microsoft .NET project</a> 
   <a href="invoking-aem-forms-using-web#creating_a_net_project_that_uses_dime">Creating a .NET project that uses DIME</a> 
   <a href="invoking-aem-forms-using-web#creating_apache_axis_java_proxy_classes_that_use_dime">Creating Apache Axis Java proxy classes that use DIME</a> 
   <a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_dime_in_a_net_project">Quick Start: Invoking a service using DIME in a .NET project</a> 
   <a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_blob_data_over_http_in_a_java_project">Quick Start: Invoking a service using BLOB data over HTTP in a Java project</a> 
   <a href="/programming-with-aem-forms/invocation-api-quick-starts#quick_start_invoking_a_service_using_blob_data_over_http_in_a_net_project">Quick Start: Invoking a service using BLOB data over HTTP in a .NET project</a> 
  </related-links> 
 </body> 
</html>