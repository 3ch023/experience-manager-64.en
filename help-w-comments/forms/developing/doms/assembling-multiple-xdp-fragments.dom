<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="d513261d-a63d-444e-95c4-34a3935fa8bf" name="jcr:uuid" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="topicBrowsingSortDate" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="Assembling Multiple XDP Fragments" name="navTitle" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="a8c5ce8e-ba7a-4cd4-bfa1-ebc1f5cb892c" name="jcr:predecessors" /> 
  <meta content="2017-10-03T06:52:08.034-0400" name="firstPublishExternalDate" /> 
  <meta content="content_type:reference;geptopics:SG_AEMFORMS/categories/assembling_pdf_documents;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7feb.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e124080eff91336a357575-7ffe.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7328.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7327.2" name="cq:gepId" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="2017-08-09T03:29:39.751-0400" name="lr_lastModified" /> 
  <meta content="2018-04-03T08:31:32.866-0400" name="cq:lastReplicated" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="2017-11-22T19:07:24.191-0500" name="jcr:created" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2017-11-21T06:59:21.551-0500" name="cq:lastModified" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/assembling-multiple-xdp-fragments.html" name="publishExternalURL" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="admin" name="lr_creator" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="/content/help/en/experience-manager/6-4/forms/developing/morehelp/operations;/content/help/en/experience-manager/6-4/forms/developing/morehelp/operations" name="moreHelpPaths" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="sortDate" /> 
  <meta content="2017-10-03T06:52:08.034-0400" name="lastPublishExternalDate" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="Assembling Multiple XDP Fragments" name="jcr:title" /> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="2017-10-03T06:52:08.034-0400" name="publishExternalDate" /> 
 </head> 
 <body> 
  <p>You can assemble multiple XDP fragments into a single XDP document. For example, consider XDP fragments where each XDP file contains one or more subforms used to create a health form. The following illustration shows the outline view (represents the tuc018_template_flowed.xdp file used in the <i>Assembling multiple XDP fragments</i> quick start): </p> 
  <img alt="" src="assets/am_am_forma.png" /> 
  <p>The following illustration shows the patient section (represents the tuc018_contact.xdp file used in the <i>Assembling multiple XDP fragments</i> quick start): </p> 
  <img alt="" src="assets/am_am_formb.png" /> 
  <p>The following illustration shows the patient health section (represents the tuc018_patient.xdp file used in the <i>Assembling multiple XDP fragments</i> quick start): </p> 
  <img alt="" src="assets/am_am_formc.png" /> 
  <p>This fragment contains two subforms named <i>subPatientPhysical</i> and <i>subPatientHealth</i>. Both of these sub forms are referenced in the DDX document that is passed to the Assembler service. Using the Assembler service, you can combine all of these XDP fragments into a single XDP document, as shown in the following illustration. </p> 
  <img alt="" src="assets/am_am_formd.png" /> 
  <p>The following DDX document assembles multiple XDP fragments into an XDP document.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&amp;nbsp;!!discoiqbr!! &lt;DDX&amp;nbsp;xmlns="http://ns.adobe.com/DDX/1.0/"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;XDP&amp;nbsp;result="tuc018result.xdp"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;XDP&amp;nbsp;source="tuc018_template_flowed.xdp"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;XDPContent&amp;nbsp;insertionPoint="ddx_fragment"&amp;nbsp;source="tuc018_contact.xdp"&amp;nbsp;fragment="subPatientContact"&amp;nbsp;required="false"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;XDPContent&amp;nbsp;insertionPoint="ddx_fragment"&amp;nbsp;source="tuc018_patient.xdp"&amp;nbsp;fragment="subPatientPhysical"&amp;nbsp;required="false"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;XDPContent&amp;nbsp;insertionPoint="ddx_fragment"&amp;nbsp;source="tuc018_patient.xdp"&amp;nbsp;fragment="subPatientHealth"&amp;nbsp;required="false"/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/XDP&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/XDP&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &lt;/DDX&gt; 
  </codeblock> 
  <p>The DDX document contains an XDP <span class="code">result</span> tag that specifies the name of the result. In this situation, the value is <span class="code">tuc018result.xdp</span>. This value is referenced in the application logic that is used to retrieve the XDP document after the Assembler service returns the result. For example, consider the following Java application logic that is used to retrieve the assembled XDP document (notice the value is bolded):</p> 
  <codeblock gutter="true" class="syntax as3">
     //Iterate&amp;nbsp;through&amp;nbsp;the&amp;nbsp;map&amp;nbsp;object&amp;nbsp;to&amp;nbsp;retrieve&amp;nbsp;the&amp;nbsp;result&amp;nbsp;XDP&amp;nbsp;document&amp;nbsp;!!discoiqbr!! for&amp;nbsp;(Iterator&amp;nbsp;i&amp;nbsp;=&amp;nbsp;allDocs.entrySet().iterator();&amp;nbsp;i.hasNext();)&amp;nbsp;{&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Retrieve&amp;nbsp;the&amp;nbsp;Map&amp;nbsp;object’s&amp;nbsp;value&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map.Entry&amp;nbsp;e&amp;nbsp;=&amp;nbsp;(Map.Entry)i.next();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Get&amp;nbsp;the&amp;nbsp;key&amp;nbsp;name&amp;nbsp;as&amp;nbsp;specified&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//DDX&amp;nbsp;document&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;keyName&amp;nbsp;=&amp;nbsp;(String)e.getKey();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(keyName.equalsIgnoreCase("tuc018result.xdp"))&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;o&amp;nbsp;=&amp;nbsp;e.getValue();&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;outDoc&amp;nbsp;=&amp;nbsp;(Document)o;&amp;nbsp;!!discoiqbr!! &amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Save&amp;nbsp;the&amp;nbsp;result&amp;nbsp;PDF&amp;nbsp;file&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File&amp;nbsp;myOutFile&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File("C:\\AssemblerResultXDP.xdp");&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;outDoc.copyToFile(myOutFile);&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;!!discoiqbr!! } 
  </codeblock> 
  <p>The <span class="code">XDP source</span> tag specifies the XDP file that represents a complete XDP document that can be used as a container for adding XDP fragments or as one of a number of documents that are appended together in order. In this situation, the XDP document is used only as a container (the first illustration shown in <i>Assembling Multiple XDP Fragments</i>). That is, the other XDP files are placed within the XDP container.</p> 
  <p>For each sub form, you can add an <span class="code">XDPContent</span> element (this element is optional). In the above example, notice that there are three sub forms: <span class="code">subPatientContact</span>, <span class="code">subPatientPhysical</span>, and <span class="code">subPatientHealth</span>. Both the <span class="code">subPatientPhysical</span> subform and the <span class="code">subPatientHealth</span> sub form are located in the same XDP file, tuc018_patient.xdp. The fragment element specifies the name of the sub form, as defined in Designer.</p> 
  <note> 
   <p>For more information about the Assembler service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <note> 
   <p>For more information about a DDX document, see <a href="http://www.adobe.com/go/learn_aemforms_ddx_63">Assembler Service and DDX Reference</a>. </p> 
  </note> 
  <h2 id="summary_of_steps">Summary of steps</h2> 
  <p></p> 
  <p>To assemble multiple XDP fragments, perform the following tasks:</p> 
  <ol> 
   <li><p>Include project files.</p></li> 
   <li><p>Create a PDF Assembler client.</p></li> 
   <li><p>Reference an existing DDX document.</p></li> 
   <li><p>Reference the XDP documents.</p></li> 
   <li><p>Set run-time options.</p></li> 
   <li><p>Assemble the multiple XDP documents. </p></li> 
   <li><p>Retrieve the assembled XDP document.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include the necessary files in your development project. If you are creating a client application by using Java, include the necessary JAR files. If you are using web services, ensure that you include the proxy files. </p> 
  <p>The following JAR files must be added to your project’s class path:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-assembler-client.jar</p></li> 
   <li><p>adobe-utilities.jar (required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p><strong>Create a PDF Assembler client</strong></p> 
  <p>Before you can programmatically perform an Assembler operation, create an Assembler service client.</p> 
  <p><strong>Reference an existing DDX document</strong></p> 
  <p>A DDX document must be referenced to assemble multiple XDP documents. This DDX document must contain <span class="code">XDP result</span>, <span class="code">XDP source</span>, and <span class="code">XDPContent</span> elements.</p> 
  <p><strong>Reference the XDP documents</strong></p> 
  <p>To assemble multiple XDP documents, reference all XDP files that are used to assemble the result XDP document. Ensure that the name of the sub form contained in the XDP document that is referenced by the <span class="code">source</span> attribute is specified in the <span class="code">fragment</span> attribute. A sub form is defined in Designer. For example, consider the following XML.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;XDPContent&amp;nbsp;insertionPoint="ddx_fragment"&amp;nbsp;source="tuc018_contact.xdp"&amp;nbsp;fragment="subPatientContact"&amp;nbsp;required="false"/&gt; 
  </codeblock> 
  <p>The sub form named <i>subPatientContact</i> must be located in the XDP file named <i>tuc018_contact.xdp</i>. </p> 
  <p><strong>Set run-time options</strong></p> 
  <p>You can set run-time options that control the behavior of the Assembler service while it performs a job. For example, you can set an option that instructs the Assembler service to continue processing a job if an error is encountered. </p> 
  <p><strong>Assemble the multiple XDP documents</strong></p> 
  <p>To assemble multiple XDP files, call the <span class="code">invokeDDX</span> operation. The Assembler service returns the assembled XDP document within a collection object.</p> 
  <p><strong>Retrieve the assembled XDP document</strong></p> 
  <p>An assembled XDP document is returned within a collection object. Iterate through the collection object and save the XDP document as an XDP file. You can also pass the XDP document to another AEM Forms service, such as Output. </p> 
  <p><strong>See also</strong></p> 
  <p><a href="assembling-multiple-xdp-fragments#assemble_multiple_xdp_fragments_using_the_java_api">Assemble multiple XDP fragments using the Java API</a></p> 
  <p><a href="assembling-multiple-xdp-fragments#assemble_multiple_xdp_fragments_using_the_web_service_api">Assemble multiple XDP fragments using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a></p> 
  <p><a href="/programming-with-aem-forms/creating-document-output-streams-creating creating-document-output-streams-creating#creating_pdf_documents_using_fragments">Creating PDF Documents Using Fragments</a></p> 
  <h2 id="assemble_multiple_xdp_fragments_using_the_java_api">Assemble multiple XDP fragments using the Java API</h2> 
  <p></p> 
  <p>Assemble multiple XDP fragments by using the Assembler Service API (Java):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-assembler-client.jar, in your Java project’s class path.</p></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties.</p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object. </p></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document.</p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object that represents the DDX document by using its constructor and passing a string value that specifies the location of the DDX file.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object by using its constructor and passing the <span class="code">java.io.FileInputStream</span> object.</p></li> 
    </ul></li> 
   <li><p>Reference the XDP documents.</p> 
    <ul> 
     <li><p>Create a <span class="code">java.util.Map</span> object that is used to store input XDP documents by using a <span class="code">HashMap</span> constructor.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object and pass the <span class="code">java.io.FileInputStream</span> object that contains the input XDP file (repeat this task for each XDP file).</p></li> 
     <li><p>Add an entry to the <span class="code">java.util.Map</span> object by invoking its <span class="code">put</span> method and passing the following arguments:</p> 
      <ul> 
       <li><p>A string value that represents the key name. This value must match the <span class="code">source</span> element value specified in the DDX document (repeat this task for each XDP file).</p></li> 
       <li><p>A <span class="code">com.adobe.idp.Document</span> object that contains the XDP document that corresponds to the <span class="code">source</span> element (repeat this task for each XDP file).</p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Set the run-time options.</p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by invoking a method that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, invoke the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">setFailOnError</span> method and pass <span class="code">false</span>.</p></li> 
    </ul></li> 
   <li><p>Assemble the multiple XDP documents.</p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following required values:</p> 
    <ul> 
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that represents the DDX document to use</p></li> 
     <li><p>A <span class="code">java.util.Map</span> object that contains the input XDP files</p></li> 
     <li><p>A <span class="code">com.adobe.livecycle.assembler.client.AssemblerOptionSpec</span> object that specifies the run-time options, including the default font and the job log level</p></li> 
    </ul><p>The <span class="code">invokeDDX</span> method returns a <span class="code">com.adobe.livecycle.assembler.client.AssemblerResult</span> object that contains the assembled XDP document.</p></li> 
   <li><p>Retrieve the assembled XDP document.</p><p>To obtain the assembled XDP document, perform the following actions:</p> 
    <ul> 
     <li><p>Invoke the <span class="code">AssemblerResult</span> object’s <span class="code">getDocuments</span> method. This method returns a <span class="code">java.util.Map</span> object.</p></li> 
     <li><p>Iterate through the <span class="code">java.util.Map</span> object until you find the resultant <span class="code">com.adobe.idp.Document</span> object.</p></li> 
     <li><p>Invoke the <span class="code">com.adobe.idp.Document</span> object’s <span class="code">copyToFile</span> method to extract the assembled XDP document.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="assembling-multiple-xdp-fragments#assembling_multiple_xdp_fragments">Assembling Multiple XDP Fragments</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f57.2">Quick Start (SOAP mode): Assembling multiple XDP fragments using the Java API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <h2 id="assemble_multiple_xdp_fragments_using_the_web_service_api">Assemble multiple XDP fragments using the web service API</h2> 
  <p></p> 
  <p>Assemble multiple XDP fragments by using the Assembler Service API (web service):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition when setting a service reference:</p> 
    <codeblock gutter="true" class="syntax as3">
       http://localhost:8080/soap/services/AssemblerService?WSDL&amp;lc_version=9.0.1. 
    </codeblock> 
    <note> 
     <p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms. </p> 
    </note></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its default constructor. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service, such as <span class="code">http://localhost:8080/soap/services/AssemblerService?blob=mtom</span>). You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. </p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">AssemblerServiceClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the <span class="code">AssemblerServiceClient.ClientCredentials.UserName.UserName</span> field.</p></li> 
       <li><p>Assign the corresponding password value to the <span class="code">AssemblerServiceClient.ClientCredentials.UserName.Password </span>field.</p></li> 
       <li><p>Assign the <span class="code">HttpClientCredentialType.Basic</span> constant value to the <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType </span>field. </p></li> 
       <li><p>Assign the <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> constant value to the <span class="code">BasicHttpBindingSecurity.Security.Mode </span>field. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the DDX document.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the DDX document and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, starting position, and stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> property with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Reference the XDP documents. </p> 
    <ul> 
     <li><p>For each input XDP file, create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the input file. </p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the input file and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, starting position, and stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
     <li><p>Create a <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object. This collection object is used to store input files required to create an assembled XDP document.</p></li> 
     <li><p>For each input file, create a <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object. </p></li> 
     <li><p>Assign a string value that represents the key name to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object's <span class="code">key</span> field. This value must match the value of the element specified in the DDX document. (Perform this task for each input XDP file.)</p></li> 
     <li><p>Assign the <span class="code">BLOB</span> object that stores the input file to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object's <span class="code">value</span> field. (Perform this task for each input XDP file.)</p></li> 
     <li><p>Add the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object. Invoke the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object's <span class="code">Add</span> method and pass the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object. (Perform this task for each input XDP document.)</p></li> 
    </ul></li> 
   <li><p>Set run-time options.</p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by assigning a value to a data member that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, assign <span class="code">false</span> to the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">failOnError</span> data member. </p></li> 
    </ul></li> 
   <li><p>Assemble the multiple XDP documents. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">BLOB</span> object that represents the DDX document</p></li> 
     <li><p>The <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object that contains the required files</p></li> 
     <li><p>An <span class="code">AssemblerOptionSpec</span> object that specifies run-time options</p></li> 
    </ul><p>The <span class="code">invokeDDX</span> method returns an <span class="code">AssemblerResult</span> object that contains the results of the job and any exceptions that occurred. </p></li> 
   <li><p>Retrieve the assembled XDP document.</p><p>To obtain the newly created XDP document, perform the following actions:</p> 
    <ul> 
     <li><p>Access the <span class="code">AssemblerResult</span> object’s <span class="code">documents</span> field, which is a <span class="code">Map</span> object that contains the resultant PDF documents.</p></li> 
     <li><p>Iterate through the <span class="code">Map</span> object to obtain each resultant document. Then, cast that array member’s <span class="code">value</span> to a <span class="code">BLOB</span>.</p></li> 
     <li><p>Extract the binary data that represents the PDF document by accessing its <span class="code">BLOB</span> object’s <span class="code">MTOM</span> property. This returns an array of bytes that you can write out to an XDP file.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="assembling-multiple-xdp-fragments#assembling_multiple_xdp_fragments">Assembling Multiple XDP Fragments</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7f56.2">Quick Start (MTOM): Assembling multiple XDP fragments using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe7.2">Invoking AEM Forms using MTOM</a></p> 
 </body> 
</html>