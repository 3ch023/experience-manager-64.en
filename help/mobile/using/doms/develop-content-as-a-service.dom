<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2018-05-11T10:01:30.015-0400" name="cq:lastModified" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2018-05-04T05:14:08.091-0400" name="publishExternalDate" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2018-05-04T05:14:08.091-0400" name="topicBrowsingSortDate" /> 
  <meta content="237b1a13-0752-4252-9d1c-52623857715b" name="jcr:uuid" /> 
  <meta content="6a25220d-9ded-4d8e-a2e2-fb87d094802a" name="jcr:predecessors" /> 
  <meta content="Content Delivery" name="jcr:title" /> 
  <meta content="2018-05-04T05:14:08.091-0400" name="lastPublishExternalDate" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2018-04-03T07:18:56.664-0400" name="firstPublishExternalDate" /> 
  <meta content="2017-12-13T19:01:34.684-0500" name="jcr:created" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/MOBILE" name="primaryProductTag" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2018-05-11T10:01:30.015-0400" name="locHandOffDate" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="bohnert" name="cq:lastReplicatedBy" /> 
  <meta content="Content Delivery" name="seoTitle" /> 
  <meta content="/content/docs/en/aem/6-3/develop/mobile-apps/content-services/content-as-a-service" name="qaNotes" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="content_type:reference;products:SG_EXPERIENCEMANAGER/6.4/MOBILE" name="cq:tags" /> 
  <meta content="2018-05-04T05:14:08.243-0400" name="cq:lastReplicated" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/mobile/using/develop-content-as-a-service.html" name="publishExternalURL" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="admin" name="jcr:createdBy" /> 
 </head> 
 <body> 
  <note> 
   <p>Adobe recommends using the SPA Editor for projects that require single page application framework-based client-side rendering (e.g. React). <a href="../../sites/developing/using/spa-overview.md">Learn more</a>.</p> 
  </note> 
  <p>Mobile Apps should be able to use any and all content in AEM as needed to deliver the targeted app experience.</p> 
  <p>This includes using assets, site content, CaaS content (over-the-air) content, and custom content that may have its own structure.</p> 
  <note> 
   <p><strong>Over-the-Air Content </strong>can come from any of the above via ContentSync handlers. It can be used to batch package and delivery via zips as well as maintain updates or those packages.</p> 
  </note> 
  <p>There are three main types of material that Content Services deliver:</p> 
  <ol> 
   <li><strong>Assets</strong></li> 
   <li><strong>Packaged HTML content (HTML/CSS/JS)</strong></li> 
   <li><strong>Channel independent content</strong></li> 
  </ol> 
  <img imageRotate="0" src="assets/chlimage_1-169.png" /> 
  <h2>Assets</h2> 
  <p>Asset collections are AEM constructs that contains references to other collections. </p> 
  <p>An Asset collection can be exposed through Content Services. Calling an asset collection in a request returns an object that is a list of the assets - including their URLs. Assets are accessed via a URL. The URL is provided in an object. For example:</p> 
  <ul> 
   <li>A page entity returns JSON (page object) that includes an image reference. The image reference is a URL that is used to get the asset binary for the image.</li> 
   <li>A request for a list of assets in a folder returns JSON with details about all of the entities in that folder. That list is an object. The JSON has URL references that are use to get the asset binary for each asset in that folder.</li> 
  </ul> 
  <h4>Asset Optimization</h4> 
  <p>A key value of Content Services is the ability to return assets that are optimized for the device. This reduces local device storage needs and improves app performance. </p> 
  <p>Asset optimization will be a server side function, based on information supplied in the API request. Wherever possible, the asset renditions should be cached so similar requests will not require a re-generation of the asset rendition.</p> 
  <h4>Assets Workflow</h4> 
  <p>The asset workflow is as follows:</p> 
  <ol> 
   <li>Asset Reference available in AEM out-of-the-box</li> 
   <li>Create Asset Reference Entity given its model</li> 
   <li>Edit entity 
    <ol> 
     <li>Pick asset or asset collection </li> 
     <li>Customize JSON rendering</li> 
    </ol> </li> 
  </ol> 
  <p>The following diagram shows the <strong>Assets Reference Workflow</strong>:</p> 
  <img imageRotate="0" src="assets/chlimage_1-170.png" /> 
  <h3>Managing Assets</h3> 
  <p>Content Services provide access to AEM managed assets that may not be referenced through other AEM content.</p> 
  <h4>Existing Managed Assets</h4> 
  <p>An existing AEM Sites and Assets user is using AEM Assets to manage all of their digital material for all channels. They are developing a native mobile app and need to use several assets that are managed by AEM Assets. For example logos, background images, button icons, etc.</p> 
  <p>Currently these are spread around the Assets repository. The files the app needs to reference are in:</p> 
  <ul> 
   <li>/content/dam/geometrixx-outdoors/brand/logo_light.png</li> 
   <li>/content/dam/geometrixx-outdoors/brand/logo_dark.png</li> 
   <li>/content/dam/geometrixx-outdoors/styles/backgrounds/grey_blue.jpg</li> 
   <li>/content/dam/geometrixx-outdoors/brand/icons/app/cart.png</li> 
   <li>/content/dam/geometrixx-outdoors/brand/icons/app/home.png</li> 
  </ul> 
  <h4>Accessing CS Asset Entities</h4> 
  <p>Let’s put aside the steps of how the page is made available through the API for now (it will be covered by the AEM UI description) and assume it has been done. Asset entities have been created and added to the “appImages” space. Additional folders were created under the space for organization purposes. So the asset entities are stored in the AEM JCR as:</p> 
  <ul> 
   <li>/content/entities/appImages/logos/logo_light</li> 
   <li>/content/entities/appImages/logos/logo_dark</li> 
   <li>/content/entities/appImages/bkgnd/grey_blue</li> 
   <li>/content/entities/appImages/icons/cart</li> 
   <li>/content/entities/appImages/icons/home</li> 
  </ul> 
  <h4>Getting a list of available asset entities</h4> 
  <p>An app developer can get a list of what assets are available, by retrieving the asset entities. The Content Services space endpoint can provide that information through the web service API SDK. </p> 
  <p>The result would be an object in a JSON format that would provide a list of the assets in the "icons" folder. </p> 
  <img imageRotate="0" src="assets/chlimage_1-171.png" /> 
  <h4>Getting an Image</h4> 
  <p>The JSON provides a URL for each image, generated by Content Services to the image.</p> 
  <p>To get the binary for the "cart" image, the client library is used once again. </p> 
  <h2>Packaged HTML Content</h2> 
  <p>HTML content is needed for customers that need to maintain the layout of content. This is useful for native applications that are using a web container - such as a Cordova webview - to display the content.</p> 
  <p>AEM Content Services will be able to provide HTML content to the mobile app via the API. Customers wanting to expose AEM content as HTML will create an HTML page entity that points to the AEM content source.</p> 
  <p>The following options are considered:</p> 
  <ul> 
   <li><strong>Zip file:</strong> To have the best chance at displaying properly on the device, all of the page’s referenced material - css, JavaScript, assets, etc. - will be included in a single compressed file with the response. The references in the HTML page will be adjusted to use a relative path to these files.</li> 
   <li><strong>Streaming:</strong> Getting a manifest of the required files from AEM. Then use that manifest to request all of the files (HTML, CSS, JS, etc.) with subsequent requests.</li> 
  </ul> 
  <img imageRotate="0" src="assets/chlimage_1-172.png" title="Content Re- use Options" /> 
  <h2>Channel Independent Content</h2> 
  <p>Channel independent content is a way of exposing AEM content constructs - such as pages - without worrying about layout, components or other channel specific information.</p> 
  <p>These content entities are generated using a content model to translate the AEM structures into a JSON format. The resulting JSON data contains information about the content’s data, that is decoupled from the AEM repository. This includes returning metadata and AEM reference links to assets as well as the relationships between content structures - including entity hierarchy.</p> 
  <h3>Managing Channel Independent Content</h3> 
  <p>Content can get to the app in several ways.</p> 
  <ol> 
   <li>GET content ZIPS via AEM Over-the-Air 
    <ul> 
     <li>Content Sync handlers can update the zip package directly or by calling existing content renderers 
      <ul> 
       <li>Platform Handlers</li> 
       <li>AEMM Handlers</li> 
       <li>Custom Handlers </li> 
      </ul> </li> 
    </ul> </li> 
   <li>GET content directly via content renderers 
    <ul> 
     <li>Out-of-the-box Default Sling Renderers</li> 
     <li>AEM Mobile/Content Services Content Renderers</li> 
     <li>Custom Renders </li> 
    </ul> </li> 
  </ol> 
 </body> 
</html>