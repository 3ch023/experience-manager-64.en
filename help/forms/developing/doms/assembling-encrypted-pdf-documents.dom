<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-11-21T06:59:19.920-0500" name="cq:lastModified" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="topicBrowsingSortDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="2017-10-03T06:49:13.805-0400" name="firstPublishExternalDate" /> 
  <meta content="admin" name="lr_creator" /> 
  <meta content="2017-10-03T06:49:13.805-0400" name="publishExternalDate" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="Assembling Encrypted PDF Documents" name="jcr:title" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="sortDate" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7faf.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e1276782941336a356d86-7ffd.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7403.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-73ec.2" name="cq:gepId" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2017-11-22T19:07:23.938-0500" name="jcr:created" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
  <meta content="2017-08-09T03:29:39.717-0400" name="lr_lastModified" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2017-10-03T06:49:13.805-0400" name="lastPublishExternalDate" /> 
  <meta content="content_type:reference;geptopics:SG_AEMFORMS/categories/assembling_pdf_documents;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" /> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/assembling-encrypted-pdf-documents.html" name="publishExternalURL" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="7b9de24d-e698-4d22-9a98-3ae528bf5c3c" name="jcr:uuid" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="Assembling Encrypted PDF Documents Assembling Encrypted PDF Documents" name="navTitle" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="1ddcf6bc-cd62-4684-9f97-0568d42c79a5" name="jcr:predecessors" /> 
  <meta content="2018-04-03T08:31:32.866-0400" name="cq:lastReplicated" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="admin" name="jcr:createdBy" /> 
 </head> 
 <body> 
  <p>You can encrypt a PDF document with a password by using the Assembler service. After a PDF document is encrypted with a password, a user must specify the password to view the PDF document in Adobe Reader or Acrobat. To encrypt a PDF document with a password, the DDX document must contain encryption element values that are required to encrypt a PDF document.</p> 
  <p>For the purpose of this discussion, assume that the following DDX document is used.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&amp;nbsp;!!discoiqbr!! &lt;DDX&amp;nbsp;xmlns="http://ns.adobe.com/DDX/1.0/"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;result="EncryptLoan.pdf"&amp;nbsp;encryption="userProtect"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;source="inDoc"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/PDF&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PasswordEncryptionProfile&amp;nbsp;name="userProtect"&amp;nbsp;compatibilityLevel="Acrobat7"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;OpenPassword&gt;AdobeOpen&lt;/OpenPassword&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/PasswordEncryptionProfile&gt;&amp;nbsp;!!discoiqbr!! &lt;/DDX&gt; 
  </codeblock> 
  <p>Within this DDX document, notice that the source attribute is assigned the value <span class="code">inDoc</span>. In situations where only one input PDF document is passed to the Assembler service and one PDF document is returned, and you invoke the <span class="code">invokeOneDocument</span> operation, assign the value <span class="code">inDoc</span> to the PDF source attribute. When invoking the <span class="code">invokeOneDocument</span> operation, the <span class="code">inDoc</span> value is a predefined key that must be specified in the DDX document. </p> 
  <p>In contrast, when passing two or more input PDF documents to the Assembler service, you can invoke the <span class="code">invokeDDX</span> operation. In this situation, assign the file name of the input PDF document to the <span class="code">source</span> attribute.</p> 
  <p>The Encryption service does not have to be part of your AEM forms installation to encrypt a PDF document with a password. See <a href="/programming-with-aem-forms/encrypting-decrypting-pdf-documents-encrypting encrypting-decrypting-pdf-documents-encrypting#encrypting_and_decrypting_pdf_documents">Encrypting and Decrypting PDF Documents</a>.</p> 
  <note> 
   <p>For more information about the Assembler service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <note> 
   <p>For more information about a DDX document, see <a href="http://www.adobe.com/go/learn_aemforms_ddx_63">Assembler Service and DDX Reference</a>. </p> 
  </note> 
  <h2 id="summary_of_steps">Summary of steps</h2> 
  <p></p> 
  <p>To assemble an encrypted PDF document, perform the following steps:</p> 
  <ol> 
   <li><p>Include project files.</p></li> 
   <li><p>Create a PDF Assembler client.</p></li> 
   <li><p>Reference an existing DDX document.</p></li> 
   <li><p>Reference an unsecured PDF document.</p></li> 
   <li><p>Set run-time options.</p></li> 
   <li><p>Encrypt the document. </p></li> 
   <li><p>Save the encrypted PDF document.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include necessary files into your development project. If you are creating a client application using Java, include the necessary JAR files. If you are using web services, ensure that you include the proxy files.</p> 
  <p>The following JAR files must be added to your project’s class path:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-assembler-client.jar</p></li> 
   <li><p>adobe-utilities.jar (required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p>if AEM Forms is deployed on a supported J2EE application server other than JBoss, you must replace the adobe-utilities.jar and jbossall-client.jar files with JAR files that are specific to the J2EE application server that AEM Forms is deployed on. For information about the location of all AEM Forms JAR files, see <a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a>.</p> 
  <p><strong>Create an Assembler client</strong></p> 
  <p>Before you can programmatically perform an Assembler operation, you must create an Assembler service client.</p> 
  <p><strong>Reference an existing DDX document</strong></p> 
  <p>A DDX document must be referenced to assemble a PDF document. For example, consider the DDX document that was introduced in this section. To encrypt a PDF document, the DDX document must contain the <span class="code">PasswordEncryptionProfile</span> element. </p> 
  <p><strong>Reference an unsecured PDF document</strong></p> 
  <p>An unsecured PDF document must be referenced and passed to the Assembler service to encrypt it. If you reference a PDF document that is already encrypted, an exception is thrown.</p> 
  <p><strong>Set run-time options</strong></p> 
  <p>You can set run-time options that control the behaviour of the Assembler service while it performs a job. For example, you can set an option that instructs the Assembler service to continue processing a job if an error is encountered. For information about the run-time options that you can set, see the <span class="code">AssemblerOptionSpec</span> class reference in <a href="http://www.adobe.com/go/learn_aemforms_javadocs_63_en">AEM Forms API Reference</a>.</p> 
  <p><strong>Encrypt the document</strong></p> 
  <p>After you create the Assembler service client, reference the DDX document that contains encryption information, reference an unsecured PDF document, and set run-time options, you can invoke the <span class="code">invokeOneDocument</span> operation. Because only one input PDF document is being passed to the Assembler service (and one document is being returned), you can use the <span class="code">invokeOneDocument</span> operation instead of the <span class="code">invokeDDX</span> operation.</p> 
  <p><strong>Save the encrypted PDF document</strong></p> 
  <p>If only a single PDF document is being passed to the Assembler service, the Assembler service returns a single document instead of a collection object. That is, when invoking the <span class="code">invokeOneDocument</span> operation, a single document is returned. Because the DDX document referenced in this section contains encryption information, the Assembler service returns a PDF document that is encrypted with a password.</p> 
  <p><strong>See also</strong></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a></p> 
  <h2 id="assemble_an_encrypted_pdf_document_using_the_java_api">Assemble an encrypted PDF document using the Java API</h2> 
  <p></p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-assembler-client.jar, in your Java project’s class path. </p></li> 
   <li><p>Create an Assembler client. </p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object. </p></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object that represents the DDX document by using its constructor and passing a string value that specifies the location of the DDX file.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object by using its constructor and passing the <span class="code">java.io.FileInputStream</span> object.</p></li> 
    </ul></li> 
   <li><p>Reference an unsecured PDF document.</p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object by using its constructor and passing the location of an unsecured PDF document.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object and pass the <span class="code">java.io.FileInputStream</span> object that contains the PDF document. This <span class="code">com.adobe.idp.Document</span> object is passed to the <span class="code">invokeOneDocument</span> method.</p></li> 
    </ul></li> 
   <li><p>Set run-time options. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by invoking a method that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, invoke the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">setFailOnError</span> method and pass <span class="code">false</span>. </p></li> 
    </ul></li> 
   <li><p>Encrypt the document. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeOneDocument</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that represents the DDX document. Ensure that this DDX document contains the value <span class="code">inDoc</span> for the PDF source element.</p></li> 
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that contains the unsecured PDF document.</p></li> 
     <li><p>A <span class="code">com.adobe.livecycle.assembler.client.AssemblerOptionSpec</span> object that specifies the run-time options, including default font and job log level.</p></li> 
    </ul><p>The <span class="code">invokeOneDocument</span> method returns a <span class="code">com.adobe.idp.Document</span> object that contains a password-encrypted PDF document.</p></li> 
   <li><p>Save the encrypted PDF document. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.File</span> object and ensure that the file name extension is .pdf.</p></li> 
     <li><p>Invoke the <span class="code">Document</span> object’s <span class="code">copyToFile</span> method to copy the contents of the <span class="code">Document</span> object to the file. Ensure that you use the <span class="code">Document</span> object that the <span class="code">invokeOneDocument</span> method returned.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7fad.2">Quick Start (SOAP mode): Assembling an encrypted PDF document using the Java API</a></p> 
  <h2 id="assemble_an_encrypted_pdf_document_using_the_web_service_api">Assemble an encrypted PDF document using the web service API</h2> 
  <p></p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition when setting a service reference: <span class="code">http://localhost:8080/soap/services/AssemblerService?WSDL&amp;lc_version=9.0.1</span>. </p> 
    <note> 
     <p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms. </p> 
    </note></li> 
   <li><p>Create an Assembler client. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its default constructor. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/AssemblerService?blob=mtom</span>). You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. </p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">AssemblerServiceClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.UserName</span>.</p></li> 
       <li><p>Assign the corresponding password value to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.Password</span>.</p></li> 
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the DDX document.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the DDX document and the mode to open the file in.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method and passing the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Reference an unsecured PDF document. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the input PDF document. This <span class="code">BLOB</span> object is passed to the <span class="code">invokeOneDocument</span> as an argument. </p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the input PDF document and the mode to open the file in.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method and passing the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Set run-time options. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set run-time options to meet your business requirements by assigning a value to a data member that belongs to the <span class="code">AssemblerOptionSpec</span> object. For example, to instruct the Assembler service to continue processing a job when an error occurs, assign <span class="code">false</span> to the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">failOnError</span> data member. </p></li> 
    </ul></li> 
   <li><p>Encrypt the document. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeOneDocument</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">BLOB</span> object that represents the DDX document</p></li> 
     <li><p>A <span class="code">BLOB</span> object that represents the unsecured PDF document</p></li> 
     <li><p>An <span class="code">AssemblerOptionSpec</span> object that specifies run-time options</p></li> 
    </ul><p>The <span class="code">invokeOneDocument</span> method returns a <span class="code">BLOB</span> object that contains an encrypted PDF document.</p></li> 
   <li><p>Save the encrypted PDF document. </p> 
    <ul> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the encrypted PDF document and the mode to open the file in.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">BLOB</span> object that the <span class="code">invokeOneDocument</span> method returned. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> data member.</p></li> 
     <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
     <li><p>Write the contents of the byte array to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7fac.2">Quick Start (MTOM): Assembling an encrypted PDF document using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe7.2">Invoking AEM Forms using MTOM</a></p> 
 </body> 
</html>