<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="admin" name="lr_creator" /> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="980e8519-7c12-4362-9310-59c3846f97b7" name="jcr:uuid" /> 
  <meta content="2017-10-03T06:49:13.505-0400" name="firstPublishExternalDate" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="00b07bed-eca0-4d4d-872a-91fc548eae0c" name="jcr:predecessors" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/assembling-documents-using-bates-numbering.html" name="publishExternalURL" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7faa.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e1275df656d1336a356f7a-7fff.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-73cf.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-73ce.2" name="cq:gepId" /> 
  <meta content="2017-08-09T03:29:39.593-0400" name="lr_lastModified" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2017-11-22T19:05:15.421-0500" name="jcr:created" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Assembling Documents Using Bates Numbering" name="jcr:title" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="/content/help/en/experience-manager/6-4/forms/developing/morehelp/operations;/content/help/en/experience-manager/6-4/forms/developing/morehelp/operations" name="moreHelpPaths" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="topicBrowsingSortDate" /> 
  <meta content="2017-10-03T06:49:13.505-0400" name="publishExternalDate" /> 
  <meta content="Assembling Documents Using Bates Numbering Assembling Documents Using Bates Numbering" name="navTitle" /> 
  <meta content="2017-08-09T03:29:00.000-0400" name="sortDate" /> 
  <meta content="content_type:reference;geptopics:SG_AEMFORMS/categories/assembling_pdf_documents;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="2018-04-03T08:30:24.163-0400" name="cq:lastReplicated" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="2017-11-21T06:59:18.471-0500" name="cq:lastModified" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2017-10-03T06:49:13.505-0400" name="lastPublishExternalDate" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
 </head> 
 <body> 
  <p>You can assemble PDF documents that contain unique page identifiers by using Bates numbering. <i>Bates numbering</i> is a method of applying unique identifies to a batch of related documents. Each page in the document (or set of documents) is assigned a Bates number that uniquely identifies the page. For example, manufacturing documents that contain bill of material information and are associated with the production of an assembly can contain an identifier. A Bates number contains a sequentially incremented numeric value and an optional prefix and suffix. The prefix + numeric + suffix is referred to as a <i>bates pattern</i>. </p> 
  <p>The following illustration shows a PDF document that contains a unique identifier located in the document’s header.</p> 
  <img alt="" src="assets/au_au_batesnumber.png" /> 
  <p>For the purpose of this discussion, the unique page identifier is placed in a document’s header. Assume that the following DDX document is used.</p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;&amp;nbsp;!!discoiqbr!! &lt;DDX&amp;nbsp;xmlns="http://ns.adobe.com/DDX/1.0/"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;result="out.pdf"&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Header&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;Center&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;StyledText&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;p&amp;nbsp;font-size="20pt"&gt;&lt;BatesNumber/&gt;&lt;/p&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/StyledText&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Center&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Header&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;source="map.pdf"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;PDF&amp;nbsp;source="directions.pdf"&amp;nbsp;/&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/PDF&gt;&amp;nbsp;!!discoiqbr!! &lt;/DDX&gt; 
  </codeblock> 
  <p>This DDX document merges two PDF documents named <i>map.pdf</i> and<i> directions.pdf</i> into a single PDF document. The resultant PDF document contains a header that consists of a unique page identifier. For example, the document in the above illustration shows 000016.</p> 
  <note> 
   <p>Before reading this section, it is recommended that you be familiar with assembling PDF documents using the Assembler service. This section does not discuss the concepts, such as creating a collection object that contains input documents, or extracting the results from the returned collection object. (See <a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a>.)</p> 
  </note> 
  <note> 
   <p>For more information about the Assembler service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <note> 
   <p>For more information about a DDX document, see <a href="http://www.adobe.com/go/learn_aemforms_ddx_63">Assembler Service and DDX Reference</a>. </p> 
  </note> 
  <h2 id="summary_of_steps">Summary of steps</h2> 
  <p></p> 
  <p>To assemble a PDF document that contains a unique page identifier (Bates numbering), perform the following tasks:</p> 
  <ol> 
   <li><p>Include project files.</p></li> 
   <li><p>Create a PDF Assembler client.</p></li> 
   <li><p>Reference an existing DDX document.</p></li> 
   <li><p>Reference input PDF documents.</p></li> 
   <li><p>Set the initial Bates number value.</p></li> 
   <li><p>Assemble the input PDF documents. </p></li> 
   <li><p>Extract the results.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include the necessary files in your development project. If you are creating a client application by using Java, include the necessary JAR files. If you are using web services, ensure that you include the proxy files.</p> 
  <p>The following JAR files must be added to your project’s class path:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-assembler-client.jar</p></li> 
   <li><p>adobe-utilities.jar (required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p>if AEM Forms is deployed on a supported J2EE application server other than JBoss, you must replace the adobe-utilities.jar and jbossall-client.jar files with JAR files that are specific to the J2EE application server on which AEM Forms is deployed. For information about the location of all AEM Forms JAR files, see <a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a>.</p> 
  <p><strong>Create a PDF Assembler client</strong></p> 
  <p>Before you can programmatically perform an Assembler operation, you must create an Assembler service client. </p> 
  <p><strong>Reference an existing DDX document</strong></p> 
  <p>A DDX document must be referenced to assemble a PDF document. For example, consider the DDX document that was introduced in this section. To assemble a PDF document that contains unique page identifiers, the DDX document must contain the <span class="code">BatesNumber</span> element.</p> 
  <p><strong>Reference input PDF documents</strong></p> 
  <p>Input PDF documents must be referenced to assemble a PDF document. For example, the map.pdf and directions.pdf documents must be referenced to assemble these PDF documents into a single PDF document.</p> 
  <p><strong>Set the initial Bates number value</strong></p> 
  <p>You can set the initial Bates number value to meet your business requirements. For example, assume that it is a requirement to set the initial value to 000100. If you do not set the initial value, the value of the first page is 000000.</p> 
  <p><strong>Assemble the input PDF documents</strong></p> 
  <p>After you create the Assembler service client, reference the DDX document that contains <span class="code">BatesNumber</span> element information, reference an input PDF document, and set run-time options, you can invoke the <span class="code">invokeDDX</span> operation that results in the Assembler service assembling a PDF document that contains unique page identifiers.</p> 
  <p><strong>Extract the results</strong></p> 
  <p>The Assembler service returns a collection object that contains the job results. You can extract the resultant PDF document and any exceptions that are thrown. In this situation, an encrypted PDF document is located within the collection object.</p> 
  <note> 
   <p>A collection object is returned if you invoke the <span class="code">invokeDDX</span> operation. This operation is used when passing two or more input PDF documents to the Assembler service. However if you pass only one input PDF document to the Assembler service, you should invoke the <span class="code">invokeOneDocument</span> operation. For information about using this operation, see <a href="/programming-with-aem-forms/assembling-encrypted-pdf-documents-assembling assembling-encrypted-pdf-documents-assembling#assembling_encrypted_pdf_documents">Assembling Encrypted PDF Documents</a>.</p> 
  </note> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/assembling-documents-using-bates-numbering assembling-documents-using-bates-numbering#assemble_documents_with_bates_numbering_using_the_java_api">Assemble documents with Bates numbering using the Java API</a></p> 
  <p><a href="/programming-with-aem-forms/assembling-documents-using-bates-numbering assembling-documents-using-bates-numbering#assemble_documents_with_bates_numbering_using_the_web_service_api">Assemble documents with Bates numbering using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/programmatically-assembling-pdf-documents-programmatically programmatically-assembling-pdf-documents-programmatically#programmatically_assembling_pdf_documents">Programmatically Assembling PDF Documents</a></p> 
  <h2 id="assemble_documents_with_bates_numbering_using_the_java_api">Assemble documents with Bates numbering using the Java API</h2> 
  <p></p> 
  <p>Assemble a PDF document that uses unique page identifiers (Bates numbering) by using the Assembler Service API (Java):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-assembler-client.jar, in your Java project’s class path. </p></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object. </p></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object that represents the DDX document by using its constructor and passing a string value that specifies the location of the DDX file.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object by using its constructor and passing the <span class="code">java.io.FileInputStream</span> object.</p></li> 
    </ul></li> 
   <li><p>Reference input PDF documents. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.util.Map</span> object used to store input PDF documents by using a <span class="code">HashMap</span> constructor.</p></li> 
     <li><p>For each input PDF document, create a <span class="code">java.io.FileInputStream</span> object by using its constructor and passing the location of the input PDF document. In this situation, pass the location of an unsecured PDF document. </p></li> 
     <li><p>For each input PDF document, create a <span class="code">com.adobe.idp.Document</span> object and pass the <span class="code">java.io.FileInputStream</span> object that contains the PDF document. </p></li> 
     <li><p>Add an entry to the <span class="code">java.util.Map</span> object by invoking its <span class="code">put</span> method and passing the following arguments:</p> 
      <ul> 
       <li><p>A string value that represents the key name. This value must match the value of the PDF source element specified in the DDX document. For example, the name of the PDF source file specified in the DDX document that is introduced in this section is Loan.pdf.</p></li> 
       <li><p>A <span class="code">com.adobe.idp.Document</span> object that contains the unsecured PDF document. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Set the initial Bates number value. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set the initial Bates number by invoking the <span class="code">AssemblerOptionSpec</span> object’s <span class="code">setFirstBatesNumber</span> and passing a numeric value that specifies the initial value. </p></li> 
    </ul></li> 
   <li><p>Assemble the input PDF documents. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invokeDDX</span> method and pass the following required values:</p> 
    <ul> 
     <li><p>A <span class="code">com.adobe.idp.Document</span> object that represents the DDX document. </p></li> 
     <li><p>A <span class="code">java.util.Map</span> object that contains the input unsecured PDF file.</p></li> 
     <li><p>A <span class="code">com.adobe.livecycle.assembler.client.AssemblerOptionSpec</span> object that specifies the run-time options, including default font and job log level.</p></li> 
    </ul><p>The <span class="code">invokeDDX</span> method returns a <span class="code">com.adobe.livecycle.assembler.client.AssemblerResult</span> object that contains a password-encrypted PDF document.</p></li> 
   <li><p>Extract the results. </p><p>To obtain the newly created PDF document, perform the following actions:</p> 
    <ul> 
     <li><p>Invoke the <span class="code">AssemblerResult</span> object’s <span class="code">getDocuments</span> method. This action returns a <span class="code">java.util.Map</span> object.</p></li> 
     <li><p>Iterate through the <span class="code">java.util.Map</span> object until you find the <span class="code">com.adobe.idp.Document</span> object.</p></li> 
     <li><p>Invoke the <span class="code">com.adobe.idp.Document</span> object’s <span class="code">copyToFile</span> method to extract the PDF document.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/assembling-documents-using-bates-numbering assembling-documents-using-bates-numbering#assembling_documents_using_bates_numbering">Assembling Documents Using Bates Numbering</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7fa8.2">Quick Start (SOAP mode): Assembling a PDF document with bates numbering using the Java API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7b4b.2">Including AEM Forms Java library files</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-java-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fd6.2">Setting connection properties</a></p> 
  <h2 id="assemble_documents_with_bates_numbering_using_the_web_service_api">Assemble documents with Bates numbering using the web service API</h2> 
  <p></p> 
  <p>Assemble a PDF document that uses unique page identifiers (Bates numbering) by using the Assembler Service API (web service):</p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition: <span class="code">http://localhost:8080/soap/services/AssemblerService?WSDL&amp;lc_version=9.0.1</span>. </p> 
    <note> 
     <p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms.</p> 
    </note></li> 
   <li><p>Create a PDF Assembler client. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerServiceClient</span> object by using its default constructor. </p></li> 
     <li><p>Create an <span class="code">AssemblerServiceClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/AssemblerService?blob=mtom</span>). You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference.</p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">AssemblerServiceClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.UserName</span>.</p></li> 
       <li><p>Assign the corresponding password value to the field <span class="code">AssemblerServiceClient.ClientCredentials.UserName.Password</span>.</p></li> 
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Reference an existing DDX document. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the DDX document.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the DDX document and the mode to open the file in.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Reference input PDF documents.</p> 
    <ul> 
     <li><p>For each input PDF document, create a <span class="code">BLOB</span> object by using its constructor. The <span class="code">BLOB</span> object is used to store the input PDF document. </p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that represents the file location of the input PDF document and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> property with the contents of the byte array.</p></li> 
     <li><p>Create a<span class="code"> MyMapOf_xsd_string_To_xsd_anyType</span> object. This collection object is used to store the input PDF documents.</p></li> 
     <li><p>For each input PDF document, create a <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object. For example, if two input PDF documents are used, create two <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> objects. </p></li> 
     <li><p>Assign a string value that represents the key name to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object's <span class="code">key</span> field. This value must match the value of the PDF source element specified in the DDX document. (Perform this task for each input PDF document.)</p></li> 
     <li><p>Assign the <span class="code">BLOB</span> object that stores the PDF document to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object's <span class="code">value</span> field. (Perform this task for each input PDF document.)</p></li> 
     <li><p>Add the <span class="code">MyMapOf_xsd_string_To_xsd_anyType_Item</span> object to the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object. Invoke the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object's <span class="code">Add</span> method and pass the <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object. (Perform this task for each input PDF document.)</p></li> 
    </ul></li> 
   <li><p>Set the initial Bates number value. </p> 
    <ul> 
     <li><p>Create an <span class="code">AssemblerOptionSpec</span> object that stores run-time options by using its constructor.</p></li> 
     <li><p>Set the initial Bates number by assigning a numeric value to the <span class="code">firstBatesNumber</span> data member that belongs to the <span class="code">AssemblerOptionSpec</span> object.</p></li> 
    </ul></li> 
   <li><p>Assemble the input PDF documents. </p><p>Invoke the <span class="code">AssemblerServiceClient</span> object’s <span class="code">invoke</span> method and pass the following values:</p> 
    <ul> 
     <li><p>A <span class="code">BLOB</span> object that represents the DDX document. </p></li> 
     <li><p>The <span class="code">MyMapOf_xsd_string_To_xsd_anyType</span> object that contains the input PDF documents. Its keys must match the names of the PDF source files, and its values must be the <span class="code">BLOB</span> objects that corresponds to those files.</p></li> 
     <li><p>An <span class="code">AssemblerOptionSpec</span> object that specifies run-time options.</p></li> 
    </ul><p>The <span class="code">invoke</span> method returns an <span class="code">AssemblerResult</span> object that contains the results of the job and any exceptions that occurred. </p></li> 
   <li><p>Extract the results. </p><p>To obtain the newly created PDF document, perform the following actions:</p> 
    <ul> 
     <li><p>Access the <span class="code">AssemblerResult</span> object’s <span class="code">documents</span> field, which is a <span class="code">Map</span> object that contains the result PDF documents.</p></li> 
     <li><p>Iterate through the <span class="code">Map</span> object until you find the key that matches the name of the resultant document. Then cast that array member’s <span class="code">value</span> to a <span class="code">BLOB</span>.</p></li> 
     <li><p>Extract the binary data that represents the PDF document by accessing its <span class="code">BLOB</span> object’s <span class="code">MTOM</span> property. This returns an array of bytes that you can write out to a PDF file.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="/programming-with-aem-forms/assembling-documents-using-bates-numbering assembling-documents-using-bates-numbering#assembling_documents_using_bates_numbering">Assembling Documents Using Bates Numbering</a></p> 
  <p><a href="#unresolvedlink-lc-qs-assembler-as.xml#ws624e3cba99b79e12e69a9941333732bac8-7fa7.2">Quick Start (MTOM): Assembling a PDF document with bates numbering using the web service API</a></p> 
  <p><a href="#unresolvedlink-lc-in-invoke-using-web-services-iu.xml#ws624e3cba99b79e12e69a9941333732bac8-7fe7.2">Invoking AEM Forms using MTOM</a></p> 
 </body> 
</html>