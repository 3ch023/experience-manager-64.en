<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="light" name="heroGradient" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/FORMS" name="primaryProductTag" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="admin" name="contentOwner" /> 
  <meta content="AEMForms/6.1/ProgramLC/WS624e3cba99b79e125296a5a21336a353ef4-8000.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e125296a5a21336a353ef4-7fff.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7df1.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e125296a5a21336a353ef4-7ffc.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7867.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7866.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-7def.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e125296a5a21336a353ef4-7fee.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-784e.2,AEMForms/6.1/ProgramLC/WS624e3cba99b79e12e69a9941333732bac8-784d.2" name="cq:gepId" /> 
  <meta content="Importing and Exporting Data" name="jcr:title" /> 
  <meta content="false" name="doNotLocalize" /> 
  <meta content="not_checked" name="acrolinxStatus" /> 
  <meta content="2017-07-12T07:03:00.000-0400" name="sortDate" /> 
  <meta content="https://helpx.adobe.com/aem-forms/6-3/developing/importing-exporting-data.html" name="publishExternalURL" /> 
  <meta content="2017-07-12T07:03:38.512-0400" name="lr_lastModified" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="admin" name="lr_lastModifiedBy" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="2017-10-03T06:48:33.956-0400" name="lastPublishExternalDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="content_type:reference;products:SG_EXPERIENCEMANAGER/6.4/FORMS;topic_tags:operations" name="cq:tags" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2017-11-21T06:58:12.486-0500" name="cq:lastModified" /> 
  <meta content="2017-11-22T19:06:37.965-0500" name="jcr:created" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="afc1469c-c1f8-4e46-b504-0599044b4564" name="jcr:uuid" /> 
  <meta content="2017-10-03T06:48:33.956-0400" name="publishExternalDate" /> 
  <meta content="Importing and Exporting Data" name="navTitle" /> 
  <meta content="video" name="pageLayout" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="head1_20111213" name="gep_conversion_script_version" /> 
  <meta content="572bb2f8-2147-4247-9697-c06dbf6ae467" name="jcr:predecessors" /> 
  <meta content="admin" name="lr_creator" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="left" name="sideColumn" /> 
  <meta content="khsingh@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2017-10-03T06:48:33.956-0400" name="firstPublishExternalDate" /> 
  <meta content="2018-04-03T08:22:23.020-0400" name="cq:lastReplicated" /> 
  <meta content="2017-07-12T07:03:00.000-0400" name="topicBrowsingSortDate" /> 
 </head> 
 <body> 
  <h2 id="about_the_form_data_integration_service">About the Form Data Integration Service</h2> 
  <p></p> 
  <p>The Form Data Integration service can import data into a PDF form and export data from a PDF form. The import and export operations support two types of PDF forms: </p> 
  <ul> 
   <li><p>An Acrobat form (created in Acrobat) is a PDF document that contains form fields. </p></li> 
   <li><p>An Adobe XML form (created in Designer) is a PDF document that conforms to the XML Adobe XML Forms Architecture (XFA). </p></li> 
  </ul> 
  <p>Form data can exist in one of the following formats depending on the type of PDF form:</p> 
  <ul> 
   <li><p>An XFDF file, which is an XML version of the Acrobat form data format. </p></li> 
   <li><p>An XDP file, which is an XML file that contains form field definitions. It may also contain form field data and an embedded PDF file. An XDP file generated by Designer can only be used if it carries an embedded base-64-encoded PDF document. </p></li> 
  </ul> 
  <p>You can accomplish these tasks using the Form Data Integration service:</p> 
  <ul> 
   <li><p>Import data into PDF forms. For information, see <a href="importing-exporting-data#importing_form_data">Importing Form Data</a>.</p></li> 
   <li><p>Export data from PDF forms. For information, see <a href="importing-exporting-data#exporting_form_data">Exporting Form Data</a>.</p></li> 
  </ul> 
  <note> 
   <p>For more information about the Form Data Integration service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <h2 id="importing_form_data">Importing Form Data</h2> 
  <p></p> 
  <p>You can import form data into interactive PDF forms by using the Form Data Integration service. An interactive PDF form is a PDF document that contains one or more fields for collecting information from a user or for displaying custom information. The Form Data Integration service does not support form calculations, validation, or scripting.</p> 
  <p>To import data into a form created in Designer, you must reference a valid XDP XML data source. Consider the following example mortgage application form. </p> 
  <img alt="" src="assets/ie_ie_loanformdata.png" /> 
  <p>In order to import data values into this form, you must have a valid XDP XML data source that corresponds to the form. You cannot use an arbitrary XML data source to import data into a form using the Form Data Integration service. The difference between an arbitrary XML data source and an XDP XML data source is that an XDP data source conforms to the XML Forms Architecture (XFA). The following XML represents an XDP XML data source that corresponds to the example mortgage application form. </p> 
  <codeblock gutter="true" class="syntax as3">
     &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"&amp;nbsp;?&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! -&amp;nbsp;&lt;xfa:datasets&amp;nbsp;xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/"&gt;&amp;nbsp;!!discoiqbr!! -&amp;nbsp;&lt;xfa:data&gt;&amp;nbsp;!!discoiqbr!! -&amp;nbsp;&lt;data&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;&lt;Layer&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;closeDate&gt;1/26/2007&lt;/closeDate&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;lastName&gt;Johnson&lt;/lastName&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;firstName&gt;Jerry&lt;/firstName&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;mailingAddress&gt;JJohnson@NoMailServer.com&lt;/mailingAddress&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;city&gt;New&amp;nbsp;York&lt;/city&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;zipCode&gt;00501&lt;/zipCode&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;state&gt;NY&lt;/state&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;dateBirth&gt;26/08/1973&lt;/dateBirth&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;middleInitials&gt;D&lt;/middleInitials&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;socialSecurityNumber&gt;(555)&amp;nbsp;555-5555&lt;/socialSecurityNumber&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;phoneNumber&gt;5555550000&lt;/phoneNumber&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Layer&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;&lt;Mortgage&gt;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;mortgageAmount&gt;295000.00&lt;/mortgageAmount&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;monthlyMortgagePayment&gt;1724.54&lt;/monthlyMortgagePayment&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;purchasePrice&gt;300000&lt;/purchasePrice&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;downPayment&gt;5000&lt;/downPayment&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;term&gt;25&lt;/term&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;interestRate&gt;5.00&lt;/interestRate&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!! &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/Mortgage&gt;&amp;nbsp;!!discoiqbr!! &lt;/data&gt;&amp;nbsp;!!discoiqbr!! &lt;/xfa:data&gt;&amp;nbsp;!!discoiqbr!! &lt;/xfa:datasets&gt; 
  </codeblock> 
  <note> 
   <p>For more information about the Form Data Integration service, see<a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <h3 id="summary_of_steps">Summary of steps</h3> 
  <p></p> 
  <p>To import form data into a PDF form, perform the following steps:</p> 
  <ol> 
   <li><p>Include project files.</p></li> 
   <li><p>Create a Form Data Integration service client. </p></li> 
   <li><p>Reference a PDF form.</p></li> 
   <li><p>Reference an XML data source.</p></li> 
   <li><p>Import data into the PDF form.</p></li> 
   <li><p>Save the PDF form as a PDF file.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include necessary files into your development project. If you are creating a client application using Java, then include the necessary JAR files. If you are using web services, then make sure that you include the proxy files.</p> 
  <p>The following JAR files must be added to your project’s classpath:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-formdataintegration-client.jar</p></li> 
   <li><p>adobe-utilities.jar (Required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (Required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p>For information about the location of these JAR files, see <a href="/programming-with-aem-forms/invoking-aem-forms-using-java#including_aem_forms_java_library_files">Including AEM Forms Java library files</a>.</p> 
  <p><strong>Create a Form Data Integration service client</strong></p> 
  <p>Before you can programmatically import data into a PDF form Client API, you must create a Data Integration service client. When creating a service client, you define connection settings that are required to invoke a service. For information, see <a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a>. </p> 
  <p><strong>Reference a PDF form</strong></p> 
  <p>To import data into a PDF form, you must reference either an XML form created in Designer or an Acrobat form created in Acrobat.</p> 
  <p><strong>Reference an XML data source</strong></p> 
  <p>In order to import form data, you must reference a valid data source. To import data into an XFA XML form created in Designer, you must use an XDP XML data source. If you reference an Acrobat form, then you must use an XFDF data source. For each field that you want to import data into, a value must be specified. If an element located in the XML data source does not correspond to a field in the form, then the element is ignored. </p> 
  <p><strong>Import data into the PDF form</strong></p> 
  <p>After you reference a PDF form and a valid XML data source, you can import the data into the PDF form. </p> 
  <p><strong>Save the PDF form as a PDF file</strong></p> 
  <p>After you import data into a form, you can save the form as a PDF file. Once saved as a PDF file, a user can open the form in Adobe Reader or Acrobat and see the form with the imported data.</p> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#import_form_data_using_the_java_api">Import form data using the Java API</a></p> 
  <p><a href="importing-exporting-data#import_form_data_using_the_web_service_api">Import form data using the web service API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#including_aem_forms_java_library_files">Including AEM Forms Java library files</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/form-data-integration-service-java#form_data_integration_service_java_api_quick_start_soap">Form Data Integration Service API Quick Starts</a></p> 
  <p><a href="importing-exporting-data#exporting_form_data">Exporting Form Data</a></p> 
  <h3 id="import_form_data_using_the_java_api">Import form data using the Java API</h3> 
  <p></p> 
  <p>Import form data by using the Form Data Integration API (Java): </p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-formdataintegration-client.jar, in your Java project’s class path. </p></li> 
   <li><p>Create a Form Data Integration service client. </p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties. </p></li> 
     <li><p>Create a <span class="code">FormDataIntegrationClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object.</p></li> 
    </ul></li> 
   <li><p>Reference a PDF form. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object by using its constructor. Pass a string value that specifies the location of the PDF form. </p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object that stores the PDF form by using the <span class="code">com.adobe.idp.Document</span> constructor. Pass the <span class="code">java.io.FileInputStream</span> object that contains the PDF form to the constructor.</p></li> 
    </ul></li> 
   <li><p>Reference an XML data source. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object by using its constructor and pass a string value that specifies the location of the XML file that contains data to import into the form. </p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object that stores form data by using the <span class="code">com.adobe.idp.Document</span> constructor. Pass the <span class="code">java.io.FileInputStream</span> object that contains form data to the constructor.</p></li> 
    </ul></li> 
   <li><p>Import data into the PDF form. </p><p>Import data into PDF form by invoking the <span class="code">FormDataIntegrationClient</span> object’s <span class="code">importData</span> method and passing the following values:</p> 
    <ul> 
     <li><p>The <span class="code">com.adobe.idp.Document</span> object that stores the PDF form.</p></li> 
     <li><p>The <span class="code">com.adobe.idp.Document</span> object that stores form data. </p></li> 
    </ul><p>The <span class="code">importData</span> method returns a <span class="code">com.adobe.idp.Document</span> object that stores a PDF form that contains the data located in the XML data source.</p></li> 
   <li><p>Save the PDF form as a PDF file. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.File</span> object and ensure that the file extension is “.PDF”.</p></li> 
     <li><p>Invoke the <span class="code">Document</span> object’s <span class="code">copyToFile</span> method to copy the contents of the <span class="code">Document</span> object to the file (ensure that you use the <span class="code">Document</span> object that was returned by the <span class="code">importData</span> method).</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#summary_of_steps">Summary of steps</a></p> 
  <p><a href="/programming-with-aem-forms/form-data-integration-service-java#quick_start_soap_mode_importing_form_data_using_the_java_api">Quick Start (SOAP mode): Importing form data using the Java API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#including_aem_forms_java_library_files">Including AEM Forms Java library files</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a></p> 
  <h3 id="import_form_data_using_the_web_service_api">Import form data using the web service API</h3> 
  <p></p> 
  <p>Import form data by using the Form Data Integration API (web service): </p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition: <span class="code">http://localhost:8080/soap/services/FormDataIntegration?WSDL&amp;lc_version=9.0.1</span>. </p> 
    <note> 
     <p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms. </p> 
    </note></li> 
   <li><p>Create a Form Data Integration service client. </p> 
    <ul> 
     <li><p>Create a <span class="code">FormDataIntegrationClient</span> object by using its default constructor. </p></li> 
     <li><p>Create a <span class="code">FormDataIntegrationClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/FormDataIntegration?blob=mtom</span>.) You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. However, specify <span class="code">?blob=mtom</span> to use MTOM.</p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">FormDataIntegrationClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the field <span class="code">FormDataIntegrationClient.ClientCredentials.UserName.UserName</span>.</p></li> 
       <li><p>Assign the corresponding password value to the field <span class="code">FormDataIntegrationClient.ClientCredentials.UserName.Password</span>.</p></li> 
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Reference a PDF form. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. This <span class="code">BLOB</span> object is used to store the PDF form.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that specifies the location of the PDF form and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Reference an XML data source. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. This <span class="code">BLOB</span> object is used to store the data that is imported into the form.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that specifies the location of the XML file that contains data to import and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method. Pass the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Import data into the PDF form. </p><p>Import data into the PDF form by invoking the <span class="code">FormDataIntegrationClient</span> object’s <span class="code">importData</span> method and passing the following values:</p> 
    <ul> 
     <li><p>The <span class="code">BLOB</span> object that stores the PDF form.</p></li> 
     <li><p>The <span class="code">BLOB</span> object that stores form data. </p></li> 
    </ul><p>The <span class="code">importData</span> method returns a <span class="code">BLOB</span> object that stores a PDF form that contains the data located in the XML data source.</p></li> 
   <li><p>Save the PDF form as a PDF file. </p> 
    <ul> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the file location of the PDF file.</p></li> 
     <li><p>Create a byte array that stores the data content of the <span class="code">BLOB</span> object that was returned by the <span class="code">importData</span> method. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> field.</p></li> 
     <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
     <li><p>Write the contents of the byte array to a PDF file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#summary_of_steps">Summary of steps</a></p> 
  <p><a href="#unresolvedlink-lc-qs-form-data-integration-fd.xml#ws624e3cba99b79e12e69a9941333732bac8-7de5.2">Quick Start (MTOM): Importing form data using the web service API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a></p> 
  <h2 id="exporting_form_data">Exporting Form Data</h2> 
  <p></p> 
  <p>You can export form data from an interactive PDF form by using the Form Data Integration service. The format of the data that is exported depends on the form type. If the form type is an Acrobat form created in Acrobat then the exported data is XFDF. If the form type is an XML form that was created in Designer, then the exported data is XDP. </p> 
  <note> 
   <p>For more information about the Form Data Integration service, see <a href="http://www.adobe.com/go/learn_aemforms_services_63">Services Reference for AEM Forms</a>.</p> 
  </note> 
  <h3 id="summary_of_steps">Summary of steps</h3> 
  <p></p> 
  <p>To export form data from a PDF form, perform the following steps:</p> 
  <ol> 
   <li><p>Include project files</p></li> 
   <li><p>Create a Form Data Integration service client. </p></li> 
   <li><p>Reference a PDF form.</p></li> 
   <li><p>Export data from the PDF form.</p></li> 
   <li><p>Save the exported data as an XML file.</p></li> 
  </ol> 
  <p><strong>Include project files</strong></p> 
  <p>Include necessary files into your development project. If you are creating a client application using Java, then include the necessary JAR files. If you are using web services, then make sure that you include the proxy files.</p> 
  <p>The following JAR files must be added to your project’s classpath:</p> 
  <ul> 
   <li><p>adobe-livecycle-client.jar</p></li> 
   <li><p>adobe-usermanager-client.jar</p></li> 
   <li><p>adobe-formdataintegration-client.jar</p></li> 
   <li><p>adobe-utilities.jar (Required if AEM Forms is deployed on JBoss)</p></li> 
   <li><p>jbossall-client.jar (Required if AEM Forms is deployed on JBoss)</p></li> 
  </ul> 
  <p><strong>Create a Form Data Integration service client</strong></p> 
  <p>Before you can programmatically import data into a PDF formClient API, you must create a Data Integration service client. When creating a service client, you define connection settings that are required to invoke a service. For information, <a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a>.</p> 
  <p><strong>Reference a PDF form</strong></p> 
  <p>To export data from a PDF form, you must reference PDF form that was created in Designer or Acrobat and that contains form data. If you attempt to export data from an empty PDF form, you will get an empty XML schema.</p> 
  <p><strong>Export data from the PDF form</strong></p> 
  <p>After you reference a PDF form that contains form data, you can export the data from the form. The data is exported within an XML schema that is based on the form. </p> 
  <p><strong>Save the form data as an XML file</strong></p> 
  <p>After you export form data, you can save the data as an XML file. Once saved as an XML file, you can open the XML file within an XML viewer to view the form data. </p> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#export_form_data_using_the_java_api">Export form data using the Java API</a></p> 
  <p><a href="importing-exporting-data#export_form_data_using_the_web_service_api">Export form data using the web service API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#including_aem_forms_java_library_files">Including AEM Forms Java library files</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a></p> 
  <p><a href="/programming-with-aem-forms/form-data-integration-service-java#form_data_integration_service_java_api_quick_start_soap">Form Data Integration Service API Quick Starts</a></p> 
  <p><a href="importing-exporting-data#importing_form_data">Importing Form Data</a></p> 
  <h3 id="export_form_data_using_the_java_api">Export form data using the Java API</h3> 
  <p></p> 
  <p>Export form data by using the Form Data Integration API (Java): </p> 
  <ol> 
   <li><p>Include project files. </p><p>Include client JAR files, such as adobe-formdataintegration-client.jar, in your Java project’s class path. </p></li> 
   <li><p>Create a Form Data Integration service client.</p> 
    <ul> 
     <li><p>Create a <span class="code">ServiceClientFactory</span> object that contains connection properties.</p></li> 
     <li><p>Create a <span class="code">FormDataIntegrationClient</span> object by using its constructor and passing the <span class="code">ServiceClientFactory</span> object.</p></li> 
    </ul></li> 
   <li><p>Reference a PDF form. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.FileInputStream</span> object by using its constructor and pass a string value that specifies the location of the PDF form that contains data to export.</p></li> 
     <li><p>Create a <span class="code">com.adobe.idp.Document</span> object that stores the PDF form by using the <span class="code">com.adobe.idp.Document</span> constructor. Pass the <span class="code">java.io.FileInputStream</span> object that contains the PDF form to the constructor.</p></li> 
    </ul></li> 
   <li><p>Export data from the PDF form. </p><p>Export form data by invoking the <span class="code">FormDataIntegrationClient</span> object’s <span class="code">exportData</span> method and pass the <span class="code">com.adobe.idp.Document</span> object that stores the PDF form. This method returns a <span class="code">com.adobe.idp.Document</span> object that stores form data as an XML schema.</p></li> 
   <li><p>Save the PDF form as a PDF file. </p> 
    <ul> 
     <li><p>Create a <span class="code">java.io.File</span> object and ensure that the file extension is XML.</p></li> 
     <li><p>Invoke the <span class="code">Document</span> object’s <span class="code">copyToFile</span> method to copy the contents of the <span class="code">Document</span> object to the file (ensure that you use the <span class="code">Document</span> object that was returned by the <span class="code">exportData</span> method).</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#summary_of_steps">Summary of steps</a></p> 
  <p><a href="/programming-with-aem-forms/form-data-integration-service-java#quick_start_soap_mode_exporting_form_data_using_the_java_api">Quick Start (SOAP mode): Exporting form data using the Java API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#including_aem_forms_java_library_files">Including AEM Forms Java library files</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-java#setting_connection_properties">Setting connection properties</a></p> 
  <h3 id="export_form_data_using_the_web_service_api">Export form data using the web service API</h3> 
  <p></p> 
  <p>Export form data by using the Form Data Integration API (web service): </p> 
  <ol> 
   <li><p>Include project files. </p><p>Create a Microsoft .NET project that uses MTOM. Ensure that you use the following WSDL definition: <span class="code">http://localhost:8080/soap/services/FormDataIntegration?WSDL&amp;lc_version=9.0.1</span>. </p> 
    <ul> 
     <li><p>Replace <span class="code">localhost</span> with the IP address of the server hosting AEM Forms. </p></li> 
    </ul></li> 
   <li><p>Create a Form Data Integration service client. </p> 
    <ul> 
     <li><p>Create a <span class="code">FormDataIntegrationClient</span> object by using its default constructor. </p></li> 
     <li><p>Create a <span class="code">FormDataIntegrationClient.Endpoint.Address</span> object by using the <span class="code">System.ServiceModel.EndpointAddress</span> constructor. Pass a string value that specifies the WSDL to the AEM Forms service (for example, <span class="code">http://localhost:8080/soap/services/FormDataIntegration?blob=mtom</span>.) You do not need to use the <span class="code">lc_version</span> attribute. This attribute is used when you create a service reference. However, specify <span class="code">?blob=mtom</span> to use MTOM.</p></li> 
     <li><p>Create a <span class="code">System.ServiceModel.BasicHttpBinding</span> object by getting the value of the <span class="code">FormDataIntegrationClient.Endpoint.Binding</span> field. Cast the return value to <span class="code">BasicHttpBinding</span>. </p></li> 
     <li><p>Set the <span class="code">System.ServiceModel.BasicHttpBinding</span> object’s <span class="code">MessageEncoding</span> field to <span class="code">WSMessageEncoding.Mtom</span>. This value ensures that MTOM is used. </p></li> 
     <li><p>Enable basic HTTP authentication by performing the following tasks:</p> 
      <ul> 
       <li><p>Assign the AEM forms user name to the field <span class="code">FormDataIntegrationClient.ClientCredentials.UserName.UserName</span>.</p></li> 
       <li><p>Assign the corresponding password value to the field <span class="code">FormDataIntegrationClient.ClientCredentials.UserName.Password</span>.</p></li> 
       <li><p>Assign the constant value <span class="code">HttpClientCredentialType.Basic</span> to the field <span class="code">BasicHttpBindingSecurity.Transport.ClientCredentialType</span>. </p></li> 
       <li><p>Assign the constant value <span class="code">BasicHttpSecurityMode.TransportCredentialOnly</span> to the field <span class="code">BasicHttpBindingSecurity.Security.Mode</span>. </p></li> 
      </ul></li> 
    </ul></li> 
   <li><p>Reference a PDF form. </p> 
    <ul> 
     <li><p>Create a <span class="code">BLOB</span> object by using its constructor. This <span class="code">BLOB</span> object is used to store the PDF form from which data is exported.</p></li> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor. Pass a string value that specifies the location of the PDF form and the mode in which to open the file.</p></li> 
     <li><p>Create a byte array that stores the content of the <span class="code">System.IO.FileStream</span> object. You can determine the size of the byte array by getting the <span class="code">System.IO.FileStream</span> object’s <span class="code">Length</span> property. </p></li> 
     <li><p>Populate the byte array with stream data by invoking the <span class="code">System.IO.FileStream</span> object’s <span class="code">Read</span> method and passing the byte array, the starting position, and the stream length to read.</p></li> 
     <li><p>Populate the <span class="code">BLOB</span> object by assigning its <span class="code">MTOM</span> field with the contents of the byte array.</p></li> 
    </ul></li> 
   <li><p>Export data from the PDF form. </p><p>Import data into PDF form by invoking the <span class="code">FormDataIntegrationClient</span> object’s <span class="code">exportData</span> method and pass the <span class="code">BLOB</span> object that stores the PDF form. This method returns a <span class="code">BLOB</span> object that stores form data as an XML schema.</p></li> 
   <li><p>Save the PDF form as a PDF file. </p> 
    <ul> 
     <li><p>Create a <span class="code">System.IO.FileStream</span> object by invoking its constructor and passing a string value that represents the location of the XML file.</p></li> 
     <li><p>Create a byte array that stores the data content of the <span class="code">BLOB</span> object that was returned by the <span class="code">exportData</span> method. Populate the byte array by getting the value of the <span class="code">BLOB</span> object’s <span class="code">MTOM</span> field.</p></li> 
     <li><p>Create a <span class="code">System.IO.BinaryWriter</span> object by invoking its constructor and passing the <span class="code">System.IO.FileStream</span> object.</p></li> 
     <li><p>Write the contents of the byte array to a XML file by invoking the <span class="code">System.IO.BinaryWriter</span> object’s <span class="code">Write</span> method and passing the byte array.</p></li> 
    </ul></li> 
  </ol> 
  <p><strong>See also</strong></p> 
  <p><a href="importing-exporting-data#summary_of_steps">Summary of steps</a></p> 
  <p><a href="#unresolvedlink-lc-qs-form-data-integration-fd.xml#ws624e3cba99b79e12e69a9941333732bac8-7de7.2">Quick Start (MTOM): Exporting form data using the web service API</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-web#invoking_aem_forms_using_mtom">Invoking AEM Forms using MTOM</a></p> 
  <p><a href="/programming-with-aem-forms/invoking-aem-forms-using-web#invoking_aem_forms_using_swaref">Invoking AEM Forms using SwaRef</a></p> 
 </body> 
</html>