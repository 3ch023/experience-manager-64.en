<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="light" name="gnavTheme" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="aheimoz" name="cq:lastModifiedBy" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2017-10-31T16:34:41.399-0400" name="firstPublishExternalDate" /> 
  <meta content="936" name="acrolinxWords" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/assets/using/mac-api-assets.html" name="publishExternalURL" /> 
  <meta content="dist5" name="distType" /> 
  <meta content="red" name="acrolinxPageStatus" /> 
  <meta content="2017-12-01T19:07:07.957-0500" name="jcr:created" /> 
  <meta content="de8e25b5-3628-4fe1-bf74-5decb5841fb3" name="jcr:predecessors" /> 
  <meta content="2017-10-12T21:46:00.000-0400" name="qaDate" /> 
  <meta content="2019-01-31T02:08:51.966-0500" name="cq:lastModified" /> 
  <meta content="aheimoz@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2019-01-31T02:08:51.962-0500" name="topicBrowsingSortDate" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="2019-01-31T02:08:51.996-0500" name="cq:lastReplicated" /> 
  <meta content="Learn about the implementation, data model, and features of Assets HTTP API. Use Assets HTTP API to perform various tasks around assets." name="seoDescription" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="Assets HTTP API" name="navTitle" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/ASSETS;topic_tags:extending-assets;content_type:reference" name="cq:tags" /> 
  <meta content="2019-01-31T02:08:51.962-0500" name="lastPublishExternalDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="User" name="contentOwner" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="fc300c17-8839-4b52-a9c1-c5d5fe933285" name="jcr:uuid" /> 
  <meta content="asgupta" name="acrolinxLastCheckedBy" /> 
  <meta content="2019-01-12T17:31:17.841-0500" name="acrolinxDate" /> 
  <meta content="2019-01-31T02:08:51.962-0500" name="publishExternalDate" /> 
  <meta content="2018-04-24T11:57:35.924-0400" name="locHandOffDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="/content/docs/en/aem/6-3/develop/extending/mac-api-assets" name="qaNotes" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/ASSETS" name="primaryProductTag" /> 
  <meta content="115" name="acrolinxSentences" /> 
  <meta content="/content/help/en/experience-manager/6-4/assets/morehelp/extending-assets;/content/help/en/experience-manager/6-4/assets/morehelp/extending-assets" name="moreHelpPaths" /> 
  <meta content="http://acrolinx.corp.adobe.com:8031/output/en/mac_api_assets_krs_workflow_f3c2f2ccebf6138e_151_report.xml" name="acrolinxReportURL" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="aheimoz" name="cq:lastReplicatedBy" /> 
  <meta content="checked_not_improved" name="acrolinxStatus" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="Assets HTTP API" name="jcr:title" /> 
  <meta content="Assets HTTP API" name="seoTitle" /> 
 </head> 
 <body> 
  <h2>Overview</h2> 
  <p>The Assets HTTP API is a specific part of the general Marketing Cloud API. For general documentation, see Marketing Cloud API user documentation.</p> 
  <p>The Assets HTTP API is exposed at <em>/api/assets</em>, and allows for create-read-update-delete (CRUD) operations on Assets, including binary, metadata, renditions, and comments.</p> 
  <h2>Current implementation</h2> 
  <p>The Assets HTTP API was first introduced with Adobe Experience Manager (AEM) Assets 6.1.</p> 
  <p>To access the API:</p> 
  <ol> 
   <li><p>Start AEM</p> </li> 
   <li><p>Open the API Service Document at <span class="code">http://&amp;lt;<em>hostname</em>&amp;gt;:&amp;lt;<em>port</em>&amp;gt;/api.json</span></p> </li> 
   <li><p>Follow the Assets service link.</p> </li> 
  </ol> 
  <h2>Data model</h2> 
  <p>The Assets HTTP API exposes two major elements, folders and assets.</p> 
  <h3>Folders</h3> 
  <p>Folders are like directories in tradtional filesystems. They are containers for other folders or asserts. Folders have the following components:</p> 
  <p><strong>Entities</strong>: The entities of a folder are its child elements, which can be folders and assets.</p> 
  <p><strong>Properties</strong>:</p> 
  <codeblock class="syntax js">
    name&amp;nbsp;&amp;nbsp;--&amp;nbsp;Name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;folder.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;the&amp;nbsp;same&amp;nbsp;as&amp;nbsp;the&amp;nbsp;last&amp;nbsp;segment&amp;nbsp;in&amp;nbsp;the&amp;nbsp;URL&amp;nbsp;path&amp;nbsp;without&amp;nbsp;the&amp;nbsp;extension!!discoiqbr!!title&amp;nbsp;--&amp;nbsp;Optional&amp;nbsp;title&amp;nbsp;of&amp;nbsp;the&amp;nbsp;folder&amp;nbsp;which&amp;nbsp;can&amp;nbsp;be&amp;nbsp;displayed&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;its&amp;nbsp;name 
  </codeblock> 
  <p><strong>Links</strong></p> 
  <p>Folders expose three links:</p> 
  <codeblock class="syntax xml">
    self&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&amp;nbsp;Link&amp;nbsp;to&amp;nbsp;itself!!discoiqbr!!parent&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&amp;nbsp;Link&amp;nbsp;to&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;folder!!discoiqbr!!thumbnail&amp;nbsp;--&amp;nbsp;(Optional)&amp;nbsp;link&amp;nbsp;to&amp;nbsp;a&amp;nbsp;folder&amp;nbsp;thumbnail&amp;nbsp;image 
  </codeblock> 
  <h3>Assets</h3> 
  <p>Assets are actually multi-part elements:</p> 
  <ul> 
   <li>The properties and metadata of the asset</li> 
   <li>Multiple renditions such as the original rendition (which is the originally uploaded asset), a thumbnail and various other renditions. Additional renditions may be images of different sizes, different video encodings, or extracted pages from PDF or InDesign.</li> 
   <li>Optional comments</li> 
  </ul> 
  <p>Folders have the following components:</p> 
  <p><strong>Entities</strong></p> 
  <p>The children of Assets are its renditions.</p> 
  <p><strong>Properties</strong></p> 
  <p><strong>Links</strong></p> 
  <h2>Available features</h2> 
  <p>The Assets HTTP API includes the following features:</p> 
  <ul> 
   <li>Retrieve a folder listing</li> 
   <li>Create a folder</li> 
   <li>Create an asset</li> 
   <li>Update asset binary</li> 
   <li>Update asset metadata</li> 
   <li>Create an asset rendition</li> 
   <li>Update an asset rendition</li> 
   <li>Create an asset comment</li> 
   <li>Copy a folder or asset</li> 
   <li>Move a folder or asset</li> 
   <li>Delete a folder, asset, or rendition</li> 
  </ul> 
  <note> 
   <p>For the ease of readability the following examples omit the full cURL notation. In fact the notation does correlate with <a href="https://github.com/micha/resty">Resty</a> which is a script wrapper for cURL.</p> 
  </note> 
  <div> 
   <strong>Prerequisites</strong> 
  </div> 
  <ul> 
   <li>Go to <i>http://&amp;lt;Server&amp;gt;:&amp;lt;Port&amp;gt;/system/console/configMgr</i>.</li> 
   <li>Navigate to <strong>Adobe Granite CSRF Filter</strong>.</li> 
   <li>Make sure the property <strong>Filter Methods</strong> incudes: POST, PUT, DELETE.</li> 
  </ul> 
  <h3>Retrieve a Folder Listing</h3> 
  <p>Retrieves a Siren representation of an existing folder and of its child entities (subfolders or assets).</p> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    GET&amp;nbsp;/api/assets/myFolder.json 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    200&amp;nbsp;-&amp;nbsp;OK&amp;nbsp;-&amp;nbsp;success!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;folder&amp;nbsp;does&amp;nbsp;not&amp;nbsp;exist&amp;nbsp;or&amp;nbsp;is&amp;nbsp;not&amp;nbsp;accessible!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <p><strong>Response</strong></p> 
  <p>The class of the entity returned is assets/folder.</p> 
  <p>Properties of contained entities are a subset of the full set of properties of each entity. In order to obtain a full representation of the entity, clients should retrieve the contents of the URL pointed to by the link with a <span class="code">rel</span> of <span class="code">self</span>.</p> 
  <h3>Create a Folder</h3> 
  <p>Creates a new <span class="code">sling</span>:<span class="code">OrderedFolder</span> at the given path. If a * is given instead of a node name the servlet will use the parameter name as node name. Accepted as request data is either a Siren representation of the new folder or a set of name-value pairs, encoded as <span class="code">application/www-form-urlencoded</span> or <span class="code">multipart</span>/<span class="code">form</span>-<span class="code">data</span>, useful for creating a folder directly from an HTML form. Additionally, properties of the folder can be specified as URL query parameters.</p> 
  <p>The operation will fail with a <span class="code">500</span> response code if the parent node of the given path does not exist. If the folder already exists a <span class="code">409</span> response code is returned.</p> 
  <p><strong>Parameters</strong></p> 
  <codeblock class="syntax js">
    name&amp;nbsp;-&amp;nbsp;Folder&amp;nbsp;name 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myFolder&amp;nbsp;-H"Content-Type:&amp;nbsp;application/json"&amp;nbsp;-d&amp;nbsp;'{"class":"assetFolder","properties":{"title":"My&amp;nbsp;Folder"}}' 
  </codeblock> 
  <p>Or</p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/*&amp;nbsp;-F"name=myfolder"&amp;nbsp;-F"title=My&amp;nbsp;Folder" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;on&amp;nbsp;successful&amp;nbsp;creation!!discoiqbr!!409&amp;nbsp;-&amp;nbsp;CONFLICT&amp;nbsp;-&amp;nbsp;if&amp;nbsp;folder&amp;nbsp;already&amp;nbsp;exist!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Create an Asset</h3> 
  <p>Creates a DAM asset at the given path with the given file. If a * is given instead of a node name the servlet will use the parameter name or the file name as node name.</p> 
  <p><strong>Parameters</strong></p> 
  <codeblock class="syntax js">
    name&amp;nbsp;-&amp;nbsp;Asset&amp;nbsp;name!!discoiqbr!!file&amp;nbsp;-&amp;nbsp;File&amp;nbsp;reference 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myFolder/myAsset.png&amp;nbsp;-H"Content-Type:&amp;nbsp;image/png"&amp;nbsp;--data-binary&amp;nbsp;"@myPicture.png" 
  </codeblock> 
  <p>or</p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myFolder/*&amp;nbsp;-F"name=myAsset.png"&amp;nbsp;-F"file=@myPicture.png" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;created&amp;nbsp;successfully!!discoiqbr!!409&amp;nbsp;-&amp;nbsp;CONFLICT&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;already&amp;nbsp;exist!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Update Asset binary</h3> 
  <p>Updates an Assets binary (rendition with name original). This will trigger the default Asset workflow if configured.</p> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    PUT&amp;nbsp;/api/assets/myfolder/myAsset.png&amp;nbsp;-H"Content-Type:&amp;nbsp;image/png"&amp;nbsp;--data-binary&amp;nbsp;@myPicture.png 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    200&amp;nbsp;-&amp;nbsp;OK&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;updated&amp;nbsp;successfully!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;could&amp;nbsp;not&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed&amp;nbsp;at&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;URI!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Update Asset metadata</h3> 
  <p>Updates the Asset metadata properties.</p> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    PUT&amp;nbsp;/api/assets/myfolder/myAsset.png&amp;nbsp;-H"Content-Type:&amp;nbsp;application/json"&amp;nbsp;-d&amp;nbsp;'{"class":"asset",&amp;nbsp;"properties":{"dc:title":"My&amp;nbsp;Asset"}}' 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    200&amp;nbsp;-&amp;nbsp;OK&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;updated&amp;nbsp;successfully!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;could&amp;nbsp;not&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed&amp;nbsp;at&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;URI!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Create an Asset Rendition</h3> 
  <p>Creates a new asset rendition for an asset. If request parameter name is not provided the file name is used as rendition name.</p> 
  <p><strong>Parameters</strong></p> 
  <codeblock class="syntax js">
    name&amp;nbsp;-&amp;nbsp;Rendition&amp;nbsp;name!!discoiqbr!!file&amp;nbsp;-&amp;nbsp;File&amp;nbsp;reference 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myfolder/myasset.png/renditions/web-rendition&amp;nbsp;-H"Content-Type:&amp;nbsp;image/png"&amp;nbsp;--data-binary&amp;nbsp;"@myRendition.png" 
  </codeblock> 
  <p>or</p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myfolder/myasset.png/renditions/*&amp;nbsp;-F"name=web-rendition"&amp;nbsp;-F"file=@myRendition.png" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Rendition&amp;nbsp;has&amp;nbsp;been&amp;nbsp;created&amp;nbsp;successfully!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;could&amp;nbsp;not&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed&amp;nbsp;at&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;URI!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Update an Asset Rendition</h3> 
  <p>Updates respectively replaces an asset rendition with the new binary data.</p> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    PUT&amp;nbsp;/api/assets/myfolder/myasset.png/renditions/myRendition.png&amp;nbsp;-H"Content-Type:&amp;nbsp;image/png"&amp;nbsp;--data-binary&amp;nbsp;@myRendition.png 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    200&amp;nbsp;-&amp;nbsp;OK&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Rendition&amp;nbsp;has&amp;nbsp;been&amp;nbsp;updated&amp;nbsp;successfully!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;could&amp;nbsp;not&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed&amp;nbsp;at&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;URI!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Create an Asset Comment</h3> 
  <p>Creates a new asset comment.</p> 
  <p><strong>Parameters</strong></p> 
  <codeblock class="syntax js">
    message&amp;nbsp;-&amp;nbsp;Message!!discoiqbr!!annotationData&amp;nbsp;-&amp;nbsp;Annotation&amp;nbsp;data&amp;nbsp;(JSON) 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    POST&amp;nbsp;/api/assets/myfolder/myasset.png/comments/*&amp;nbsp;-F"message=Hello&amp;nbsp;World."&amp;nbsp;-F"annotationData={}" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Comment&amp;nbsp;has&amp;nbsp;been&amp;nbsp;created&amp;nbsp;successfully!!discoiqbr!!404&amp;nbsp;-&amp;nbsp;NOT&amp;nbsp;FOUND&amp;nbsp;-&amp;nbsp;if&amp;nbsp;Asset&amp;nbsp;could&amp;nbsp;not&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed&amp;nbsp;at&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;URI!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Copy a Folder or Asset</h3> 
  <p>Copies a folder or asset at the given path to a new destination.</p> 
  <p><strong>Request Headers</strong></p> 
  <codeblock class="syntax js">
    X-Destination&amp;nbsp;-&amp;nbsp;a&amp;nbsp;new&amp;nbsp;destination&amp;nbsp;URI&amp;nbsp;within&amp;nbsp;the&amp;nbsp;API&amp;nbsp;solution&amp;nbsp;scope&amp;nbsp;to&amp;nbsp;copy&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;to!!discoiqbr!!X-Depth&amp;nbsp;-&amp;nbsp;either&amp;nbsp;'infinity'&amp;nbsp;or&amp;nbsp;'0'.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;'0'&amp;nbsp;only&amp;nbsp;copies&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;and&amp;nbsp;its&amp;nbsp;properties,&amp;nbsp;no&amp;nbsp;children.!!discoiqbr!!X-Overwrite&amp;nbsp;-&amp;nbsp;'F'&amp;nbsp;to&amp;nbsp;prevent&amp;nbsp;overwriting&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;destination 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    COPY&amp;nbsp;/api/assets/myFolder&amp;nbsp;-H"X-Destination:&amp;nbsp;/api/assets/myFolder-copy" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;folder/asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;copied&amp;nbsp;to&amp;nbsp;a&amp;nbsp;non-existing&amp;nbsp;destination!!discoiqbr!!204&amp;nbsp;-&amp;nbsp;NO&amp;nbsp;CONTENT&amp;nbsp;-&amp;nbsp;if&amp;nbsp;the&amp;nbsp;folder/asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;copied&amp;nbsp;to&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;destination!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;a&amp;nbsp;request&amp;nbsp;header&amp;nbsp;is&amp;nbsp;missing&amp;nbsp;or!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Move a Folder or Asset</h3> 
  <p>Moves a folder or asset at the given path to a new destination.</p> 
  <p><strong>Request Headers</strong></p> 
  <codeblock class="syntax js">
    X-Destination&amp;nbsp;-&amp;nbsp;a&amp;nbsp;new&amp;nbsp;destination&amp;nbsp;URI&amp;nbsp;within&amp;nbsp;the&amp;nbsp;API&amp;nbsp;solution&amp;nbsp;scope&amp;nbsp;to&amp;nbsp;copy&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;to!!discoiqbr!!X-Depth&amp;nbsp;-&amp;nbsp;either&amp;nbsp;'infinity'&amp;nbsp;or&amp;nbsp;'0'.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;'0'&amp;nbsp;only&amp;nbsp;copies&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;and&amp;nbsp;its&amp;nbsp;properties,&amp;nbsp;no&amp;nbsp;children.!!discoiqbr!!X-Overwrite&amp;nbsp;-&amp;nbsp;either&amp;nbsp;'T'&amp;nbsp;to&amp;nbsp;force&amp;nbsp;deletion&amp;nbsp;of&amp;nbsp;existing&amp;nbsp;resources&amp;nbsp;or&amp;nbsp;'F'&amp;nbsp;to&amp;nbsp;prevent&amp;nbsp;overwriting&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;resource. 
  </codeblock> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    MOVE&amp;nbsp;/api/assets/myFolder&amp;nbsp;-H"X-Destination:&amp;nbsp;/api/assets/myFolder-moved" 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    201&amp;nbsp;-&amp;nbsp;CREATED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;folder/asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;copied&amp;nbsp;to&amp;nbsp;a&amp;nbsp;non-existing&amp;nbsp;destination!!discoiqbr!!204&amp;nbsp;-&amp;nbsp;NO&amp;nbsp;CONTENT&amp;nbsp;-&amp;nbsp;if&amp;nbsp;the&amp;nbsp;folder/asset&amp;nbsp;has&amp;nbsp;been&amp;nbsp;copied&amp;nbsp;to&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;destination!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;a&amp;nbsp;request&amp;nbsp;header&amp;nbsp;is&amp;nbsp;missing&amp;nbsp;or!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
  <h3>Delete a Folder, Asset, or Rendition</h3> 
  <p>Deletes a resource (-tree) at the given path.</p> 
  <p><strong>Request</strong></p> 
  <codeblock class="syntax js">
    DELETE&amp;nbsp;/api/assets/myFolder 
  </codeblock> 
  <p>or</p> 
  <codeblock class="syntax js">
    DELETE&amp;nbsp;/api/assets/myFolder/myAsset.png 
  </codeblock> 
  <p>or</p> 
  <codeblock class="syntax xml">
    DELETE&amp;nbsp;/api/assets/myFolder/myAsset.png/renditions/original 
  </codeblock> 
  <p><strong>Response codes</strong></p> 
  <codeblock class="syntax js">
    200&amp;nbsp;-&amp;nbsp;OK&amp;nbsp;-&amp;nbsp;if&amp;nbsp;folder&amp;nbsp;has&amp;nbsp;been&amp;nbsp;deleted&amp;nbsp;successfully!!discoiqbr!!412&amp;nbsp;-&amp;nbsp;PRECONDITION&amp;nbsp;FAILED&amp;nbsp;-&amp;nbsp;if&amp;nbsp;root&amp;nbsp;collection&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found&amp;nbsp;or&amp;nbsp;accessed!!discoiqbr!!500&amp;nbsp;-&amp;nbsp;INTERNAL&amp;nbsp;SERVER&amp;nbsp;ERROR&amp;nbsp;-&amp;nbsp;if&amp;nbsp;something&amp;nbsp;else&amp;nbsp;goes&amp;nbsp;wrong 
  </codeblock> 
 </body> 
</html>