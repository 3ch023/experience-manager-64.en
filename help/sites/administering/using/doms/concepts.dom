<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="General Concepts of eCommerce with AEM." name="seoDescription" /> 
  <meta content="Concepts" name="navTitle" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="f9b2487f-3e74-49bf-a9cd-9bcc71affbbc" name="jcr:uuid" /> 
  <meta content="2018-04-26T10:13:45.304-0400" name="locHandOffDate" /> 
  <meta content="2017-12-01T19:04:28.899-0500" name="jcr:created" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/administering/using/concepts.html" name="publishExternalURL" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="2018-10-27T23:45:05.055-0400" name="cq:lastReplicated" /> 
  <meta content="2018-04-03T07:02:17.498-0400" name="lastPublishExternalDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="2018-04-03T07:02:17.498-0400" name="publishExternalDate" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="audience:administering" name="primaryAudienceTag" /> 
  <meta content="518b0dab-4138-404f-95e5-fc528e185bac" name="jcr:predecessors" /> 
  <meta content="jsyal" name="cq:lastReplicatedBy" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:e-commerce;content_type:reference" name="cq:tags" /> 
  <meta content="2018-04-03T07:02:17.498-0400" name="topicBrowsingSortDate" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="Concepts" name="seoTitle" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2017-10-31T16:25:29.095-0400" name="firstPublishExternalDate" /> 
  <meta content="Concepts" name="jcr:title" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="/content/docs/en/aem/6-3/administer/ecommerce/concepts" name="qaNotes" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/administering/morehelp/e-commerce;/content/help/en/experience-manager/6-4/sites/administering/morehelp/e-commerce" name="moreHelpPaths" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2018-04-26T10:13:45.304-0400" name="cq:lastModified" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
 </head> 
 <body> 
  <p>The integration framework provides the mechanisms and components for:</p> 
  <ul> 
   <li>connection to an eCommerce engine</li> 
   <li>pulling data into AEM</li> 
   <li>displaying that data and collecting the shopper's responses</li> 
   <li>returning transaction details</li> 
   <li>search over the data from both systems</li> 
  </ul> 
  <p>This means that:<br /> </p> 
  <ul> 
   <li>Shoppers can register and shop without waiting.</li> 
   <li>Price changes will be seen by shoppers without delay.</li> 
   <li>Products can be added as required.</li> 
  </ul> 
  <note> 
   <p>The eCommerce framework can be used with any eCommerce solution; including:</p> 
   <ul> 
    <li><a href="http://www.hybris.com/">hybris</a> - see <a href="../../../sites/administering/using/hybris.md">AEM with hybris</a></li> 
    <li><a href="http://www.ibm.com/software/websphere">IBM</a> - see <a href="../../../sites/administering/using/ibm-websphere.md">AEM with IBM Websphere Commerce</a></li> 
    <li><a href="http://www.elasticpath.com/">Elastic Path</a> - see <a href="../../../sites/administering/using/elasticpath.md">AEM with Elastic Path</a></li> 
    <li><a href="http://www.intershop.com/">Intershop</a> - see <a href="../../../sites/administering/using/intershop.md">AEM with Intershop</a></li> 
    <li><a href="http://www.demandware.com/">Demandware</a> - see <a href="../../../sites/administering/using/demandware.md">AEM with Demandware</a></li> 
    <li><a href="http://www.agilitymultichannel.com">Agility Multichannel</a> - see <a href="http://www.agilitymultichannel.com/adobe">Agility PIM and AEM</a></li> 
    <li><a href="http://www.infielddesign.com/technology/adobe-experience-manager/">Infield Design</a> - see <a href="http://www.infielddesign.com/technology/adobe-experience-manager/magento">AEM eCommerce With Magento</a></li> 
   </ul> 
  </note> 
  <note> 
   <p>Some others are currently under development, for example <a href="http://inriver.com">inRiver</a> is developing an extension to AEM.</p> 
  </note> 
  <note> 
   <p>The <a href="http://www.adobe.com/solutions/web-experience-management/commerce.html">eCommerce integration framework</a> is an AEM Add-On.</p> 
   <p>Your Sales representative will be able to give full details, according to the appropriate engine.<br /> </p> 
  </note> 
  <note> 
   <p>The framework provides the basis requirements for your own project.</p> 
   <p>A certain amount of development work is always needed to adapt the framework to your specifications.<br /> </p> 
  </note>  
  <note> 
   <p>The standard AEM installation includes the generic AEM (JCR) eCommerce implementation.</p> 
   <p>This is currently intended for demonstration purposes, or as the basic foundation for a custom implementation according to your requirements.<br /> </p> 
  </note> 
  <p>To optimize operation, both AEM and the eCommerce engine concentrate on their own area of expertise. Information is transferred between the two in real time; for example:</p> 
  <ul> 
   <li>AEM can: 
    <ul> 
     <li>Request: 
      <ul> 
       <li>Product Information from the eCommerce engine.</li> 
      </ul> </li> 
     <li>Provide: 
      <ul> 
       <li>User views for product information, shopping cart and checkout.</li> 
       <li>Shopping cart and checkout information to the eCommerce engine.</li> 
       <li>Search Engine Optimization (SEO).</li> 
       <li>Community functionality.</li> 
       <li>Unstructured marketing interactions.</li> 
      </ul> </li> 
    </ul> </li> 
   <li>eCommerce engine can:<br /> 
    <ul> 
     <li>Provide: 
      <ul> 
       <li>Product information from the database.</li> 
       <li>Product variant management.</li> 
       <li>Order management.</li> 
       <li>ERP (Enterprise Resource Planning).<br /> </li> 
       <li>Search within the product information.</li> 
      </ul> </li> 
     <li>Process: 
      <ul> 
       <li>The shopping cart.</li> 
       <li>The checkout.</li> 
       <li>Order fulfillment.</li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
  <note> 
   <p>The exact details will depend on the eCommerce engine and the project implementation.</p> 
  </note>  
  <p>A number of out-of-the-box AEM components are provided to use the integration layer. Currently these include:</p> 
  <ul> 
   <li>Product information</li> 
   <li>Shopping cart</li> 
   <li>Check-out</li> 
   <li>My Account</li> 
  </ul> 
  <p>Various search options are also available.</p> 
  <h2>Architecture</h2> 
  <p>The integration framework provides the API, a range of components to illustrate functionality and several extensions to provide examples of connection methods:</p> 
  <img imageRotate="0" src="assets/chlimage_1-206.png" /> 
  <p>The framework gives you access to functionality such as:<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-207.png" /> 
  <h3>Implementations</h3> 
  <p>AEM eCommerce is implemented with an eCommerce engine:</p> 
  <ul> 
   <li>The eCommerce integration framework has been built to allow you to easily integrate an eCommerce engine with AEM. The purpose built eCommerce engine controls product data, shopping carts, checkout and order fulfillment, while AEM controls the data display and marketing campaigns.<br /> <a href="../../../sites/administering/using/hybris.md">A reference site has already been implemented using hybris</a>.</li> 
  </ul>  
  <note> 
   <p>The standard AEM installation includes the generic AEM (JCR) eCommerce implementation.</p> 
   <p>This is currently intended for demonstration purposes, or as the basic foundation for a custom implementation according to your requirements.</p> 
   <p>AEM eCommerce implemented within AEM using generic development based on JCR is:</p> 
   <ul> 
    <li>A standalone, AEM-native eCommerce example to illustrate use of the API. This can be used to control product data, shopping carts and checkout in conjunction with the existing data display and marketing campaigns. In this case the product database is stored in the repository native to AEM (Adobe's implementation of <a href="http://www.day.com/day/en/products/jcr.html">JCR</a>).<br /> The standard AEM installation contains the basics of the <a href="../../../sites/administering/using/generic.md">generic eCommerce implemention</a>. <br /> </li> 
   </ul> 
  </note> 
  <h3>Commerce Providers</h3> 
  <p>When importing data from a commerce engine into your AEM eCommerce site, a commerce provider is used to supply the importers with data. One commerce provider can support multiple importers.</p> 
  <p>A commerce provider is AEM code customized to either:</p> 
  <ul> 
   <li>interface to a back-end commerce engine</li> 
   <li>implement a commerce system on top of the JCR repository</li> 
  </ul> 
  <p>Two example commerce providers are currently available for AEM:</p> 
  <ul> 
   <li>one for geometrixx-hybris</li> 
   <li>another for geometrixx-generic (JCR)</li> 
  </ul> 
  <p>Though usually a project will need to develop their own, customized, commerce provider specific to their PIM and product data schema.</p> 
  <note> 
   <p>The geometrixx importers use CSV files; there is a description of the schema accepted (with custom properties allowed) in the comments above their implementation.</p> 
  </note> 
  <p>The <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/cq/commerce/pim/api/ProductServicesManager">ProductServicesManager</a></span> maintains (through <a href="../../../sites/deploying/using/configuring.md#osgiconfigurationsettings">OSGi</a>) a list of implementations of the <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/cq/commerce/pim/api/ProductImporter">ProductImporter</a></span> and <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/cq/commerce/pim/api/CatalogBlueprintImporter">CatalogBlueprintImporter</a></span> interfaces. These are listed in the <strong>Importer/Commerce Provider</strong> dropdown field of the importer wizard (using the <span class="code">commerceProvider</span> property as a name).</p> 
  <p>When a specific importer/commerce provider is available from the dropdown, any supplemental data it needs must be defined (depending on the importer type) in either:</p> 
  <ul> 
   <li><span class="code">/apps/commerce/gui/content/catalogs/importblueprintswizard/importers</span></li> 
   <li><span class="code">/apps/commerce/gui/content/products/importproductswizard/importers</span></li> 
  </ul> 
  <p>The folder under the appropriate <span class="code">importers</span> folder must match the importer name; for example:</p> 
  <ul> 
   <li><span class="code">.../importproductswizard/importers/geometrixx/.content.xml</span></li> 
  </ul> 
  <p>The format of the source import file is defined by the importer. Or the importer may establish a connection (e.g WebDAV or http) to the commerce engine.</p> 
  <h2>Roles</h2> 
  <p>The integrated system caters for the following roles to maintain the data:</p> 
  <ul> 
   <li>Product Information Management (PIM) User who maintains:<br /> 
    <ul> 
     <li>Product information.</li> 
     <li>Taxonomy, categorization, approval.</li> 
     <li>Interacts with digital asset management.</li> 
     <li>Pricing - often this comes from an ERP system and is not explicitly maintained in the commerce system.</li> 
    </ul> </li> 
   <li>Author / Marketing Manager who maintains: 
    <ul> 
     <li>Marketing content for all channels.</li> 
     <li>Promotions.</li> 
     <li>Vouchers.</li> 
     <li>Campaigns.</li> 
    </ul> </li> 
   <li>Surfer / Shopper who: 
    <ul> 
     <li>Views your product information.</li> 
     <li>Places items into the shopping cart.</li> 
     <li>Checks out their orders.</li> 
     <li>Expect order fulfillment.</li> 
    </ul> </li> 
  </ul> 
  <p>Though the actual location can depend on your implementation; for example, generic or with an eCommerce engine:</p> 
  <img imageRotate="0" src="assets/chlimage_1-208.png" /> 
  <h2>Products</h2> 
  <h3>Product Data versus Marketing Data</h3>  
  <h4>Structural versus Marketing Categories</h4> 
  <p>If the following two categories can be differentiated, then this allows you to make clear URLs with a meaningful structure (trees of <span class="code">cq:Page</span> nodes) and therefore, very close to classical AEM content management):</p> 
  <ul> 
   <li><i>Structural </i>categories<br /> The category tree defining <i>what is a product</i>; for example:<br /> <span class="code"> /products/mens/shoes/sneakers</span></li> 
   <li><i>Marketing </i>categories<br /> All other categories a <i>product can belong to</i>; for example:<br /> <span class="code"> /special-offers/christmas/shoes</span>)</li> 
  </ul> 
  <h3>Product Data</h3> 
  <p>To portray and manage your product you will want to hold a range of information about them.</p> 
  <p>Product data can be:</p> 
  <ul> 
   <li>maintained directly in AEM (generic).<br /> </li> 
   <li>maintained in the eCommerce engine and made available in AEM.<br /> Depending on the data type it is <a href="#datasynchronization">synchronized</a> as necessary, or accessed directly; for example, highly volatile and critial data such as product prices are retrieved from the ecommerce engine (e.g. hybris) on every page request to ensure they are always up-to-date.</li> 
  </ul>   
  <p>In either case, when the product data has been entered/imported into AEM it can be seen from the <strong>Products</strong> console. Here the card and list views of a product show information such as:</p> 
  <ul> 
   <li>the image</li> 
   <li>the SKU code</li> 
   <li>when last modified</li> 
  </ul> 
  <img imageRotate="0" src="assets/chlimage_1-209.png" /> 
  <h3>Product Variants</h3> 
  <p>For appropriate products information about variants can also be held. For example, for items of clothing the different colors available are held as variants:<br /> </p> 
  <img imageRotate="0" src="assets/ecommerceproductvariants.png" /> 
  <h3>Product Attributes</h3>   
  <p>The individual attributes held about each product may depend on the eCommerce engine being used and your AEM implementation. These are available (as appropriate) when viewing product pages and/or editing product information and can include:</p> 
  <ul> 
   <li><strong>Image</strong><br /> An image of the product.<br /> </li> 
   <li><strong>Title</strong><br /> The product name.<br /> </li> 
   <li><strong>Description</strong><br /> A textual description of the product.<br /> </li> 
   <li><strong>Tags</strong><br /> Tags used to group related products.</li> 
   <li><strong>Default Asset Category</strong><br /> A default category for assets.<br /> </li> 
   <li><strong>ERP Data</strong><br /> Enterprise resource planning (ERP) information.<br /> 
    <ul> 
     <li><strong>SKU</strong><br /> Stock-keeping unit (SKU) information.</li> 
     <li><strong>Color</strong><br /> </li> 
     <li><strong>Size</strong></li> 
     <li><strong>Price</strong><br /> The unit price of the product.</li> 
    </ul> </li> 
   <li><strong>Summary</strong><br /> A summary of the product features.<br /> </li> 
   <li><strong>Features</strong><br /> Fuller details of the product features.</li> 
  </ul> 
  <h3>Product Assets</h3>  
  <p>A selection of assets can be held for individual products. Commonly these include images and videos.<br /> </p> 
  <h2>Catalogs</h2> 
  <p>A catalog groups product data together for both ease of management and representation to the shopper. Often a catalog is structured according to attributes such as language, geographical area, brand, season, hobby, sport, amongst many others.</p> 
  <h3>Catalog Structure</h3> 
  <h4>Catalogs in Multiple Languages</h4> 
  <p>AEM supports product content in multiple languages. When requesting data, the integration framework retrieves the language from the current tree (for example, <span class="code">en_US</span> for pages under <span class="code">/content/geometrixx-outdoors/en_US</span>).</p> 
  <p>For a multi-lingual store, you can import your catalog for each language tree individually (or copy it by means of <a href="/content/docs/en/aem/6-3/administer/sites/multi-site-manager">MSM</a>).</p> 
  <h4>Catalogs for Multiple Brands</h4>  
  <p>As with languages, large multi-national companies can need to cater for multiple brands.<br /> </p> 
  <h4>Catalogs by Tags</h4>  
  <p>Tags can also be used to group products together into a catalog. These can be used for more dynamic catalogs such as seasonal offers.<br /> </p> 
  <h3>Catalog Setup (Initial Import)</h3>   
  <p>Depending on your implementation, you can import the product data required for your base catalog into AEM from:</p> 
  <ul> 
   <li>a CSV file (for the generic implementation)</li> 
   <li>the eCommerce engine</li> 
  </ul> 
  <h3>Catalog Maintenance (Data Synchronization)</h3> 
  <p>Further changes to the product data will be inevitable:</p> 
  <ul> 
   <li>for the generic implementation these can be managed with the <a href="../../../sites/administering/using/generic.md#editingproductinformation">product editor</a></li> 
   <li>when using an <a href="#datasynchronizationwithanecommerceengineongoing">eCommerce engine the changes must be synchronized</a><br /> </li> 
  </ul> 
  <h4>Data Synchronization with an eCommerce Engine (Ongoing)</h4> 
  <p>After the intial import, changes to your product data are inevitable.</p> 
  <p>When using an eCommerce engine the product data is maintained there and needs to be available in AEM. This product data needs to be synchronized when updates are made. </p> 
  <p>This can depend on the type of data:</p> 
  <ul> 
   <li>A <a href="../../../sites/developing/using/hybris.md#productsynchronizationandpublishing">periodic synchronization is used together with a data feed of changes</a>.<br /> In addition to this, you can select specific updates for an express update.</li> 
   <li>Highly volatile data, such as price information, is retrieved from the commerce engine for each page request, to ensure that it is always up to date.</li> 
  </ul> 
  <h3>Catalogs - Performance and Scaling</h3> 
  <p>Importing a large catalog with a high number of products (usually more than 100,000) from an eCommerce engine (PIM) can impact the system due to the large number of nodes. It can also slow down the authoring instance if the products have associated assets (eg product images). This is due to the fact that the post-processing of these assets is CPU and memory intensive.<br /> </p> 
  <p>There are various strategies you can choose to work around these issues:</p> 
  <ul> 
   <li><a href="#bucketing">Bucketing</a> - to cater for the large number of nodes<br /> </li> 
   <li><a href="#offloadassetpostprocessingtoadedicatedinstance">Offload asset post processing to a dedicated instance</a></li> 
   <li><a href="#onlyimportproductdata">Only import product data</a></li> 
   <li><a href="#importthrottlingandbatchsaves">Import Throttling and Batch Saves</a></li> 
   <li><a href="#performancetesting">Performance Testing</a></li> 
   <li><a href="#performancemiscellaneous">Performance - Miscellaneous</a></li> 
  </ul> 
  <h4>Bucketing</h4> 
  <p>If a JCR node has a lot of direct child nodes (e.g. 1000 and more), buckets (phantom folders) are required to ensure that performance is not affected. These are generated according to an algorithm when importing.</p> 
  <p>These buckets take the form of phantom folders that are introduced to your catalog structure, but can be configured so they are not apparent in public URLs.</p> 
  <h4>Offload asset post processing to a dedicated instance</h4> 
  <p>This scenario involves setting up two author instances:</p> 
  <ol> 
   <li>Master author instance<br /> Imports product data from PIM, on which post-processing for the asset paths is disabled.</li> 
   <li>Dedicated DAM author instance<br /> Imports and post-processes product assets from the PIM, then replicates these back to the master author instance for use.</li> 
  </ol> 
  <img alt="Architecture diagram" imageRotate="0" src="assets/chlimage_1-210.png" title="Architecture diagram" /> 
  <h4>Only import product data</h4> 
  <p>For cases when products do not contain assets (images) to be imported, you can import the product data without being affected by asset post-processing.</p> 
  <img alt="Architecture diagram" imageRotate="0" src="assets/chlimage_1-211.png" title="Architecture diagram" /> 
  <h4>Import Throttling and Batch Saves</h4> 
  <p><a href="../../../sites/deploying/using/scaling.md#importthrottling">Import throttling</a> and <a href="../../../sites/deploying/using/scaling.md#batchsaves">batch saves</a> are two general <a href="../../../sites/deploying/using/scaling.md">scaling</a> mechanisms that can help when importing large volumes of data.</p> 
  <h4>Performance Testing</h4> 
  <p>Performance testing must be taken into consideration on AEM eCommerce implementations:</p> 
  <ul> 
   <li>Author environment:<br /> Background (e.g. import) activity can occur at the same time as normal user activity (e.g. page editing) and even if front-end performance is (in general) given a higher priority, bad performance seen by online authors can lead to frustration capable of blocking a go-live decision.<br /> </li> 
   <li>Publication environment:<br /> Replication is a critical process to ensure that the content is published quickly and reliably. This can be impacted by how the author groups the content to be published.<br /> </li> 
   <li>Front-end:<br /> The mixture of front-end and cache invalidations can potentially lead to performance surprises. Testing helps avoid these.</li> 
  </ul> 
  <p>Please note that this performance testing requires knowledge and analysis of your target:</p> 
  <ul> 
   <li>Content volumes<br /> 
    <ul> 
     <li>Assets</li> 
     <li>Localized, I18ned products and SKUs</li> 
    </ul> </li> 
   <li>User activity: 
    <ul> 
     <li>Bulk edition</li> 
     <li>Bulk publication</li> 
     <li>Intense search requests</li> 
    </ul> </li> 
   <li>Background processes<br /> 
    <ul> 
     <li> Imports</li> 
     <li>Synchronization updates (e.g. pricing)</li> 
    </ul> </li> 
   <li>Maintenance requirements (backup, Tar PM optimization, datastore garbage collection, etc)</li> 
  </ul> 
  <h4>Performance - Miscellaneous</h4> 
  <p>For all implementations the following points can be kept in mind:</p> 
  <ul> 
   <li>As product, stock-keeping units and categories can be numerous, try to use the least number of nodes possible to model the content.<br /> The more nodes you have, the more flexible your content is (e.g. parsys). However, everything is a trade-off and do you need individual flexibility (by default) when manipulating (for example) 30K products?</li> 
   <li>Avoid duplication as much as you can (see localization), or when you do, think about how many nodes your duplication will lead to.</li> 
   <li>Try to tag your content as much as you can in order to prepare the query optimization.<br /> For example:<br /> <span class="code"> /content/products/france/fr/shoe/reebok/pump/46 SKU</span><br /> should have one tag per content level (i.e. country, language, category, brand, product). Searching for<br /> <span class="code"> //element(*,my:Sku)[@country=’france’ and @language=’fr’ </span><br /> and<br /> <span class="code"> @category=’shoe’ and @brand=’reebok’ and @product=’pump’]</span><br /> will be drastically quicker than searching for<br /> <span class="code"> /jcr:root/content/france/fr/shoe/reebok/pump/element(*,my:Sku)</span></li> 
   <li>In your technical stack, plan very factorized content access model and services. This is a general best practice, but is even more crucial her, as you can, in optimization phases, add application caches for data that is read very often (and that you do not want to fill the bundle cache with).<br /> For example, attributes management is very frequently a good candidate for caching as it concerns data that is updated through products import.</li> 
   <li>Consider use of <a href="../../../sites/administering/using/concepts.md#proxypages">proxy pages</a>.</li> 
  </ul> 
  <h3>Catalog Section Pages</h3>  
  <p>Catalog sections provide you with, for example:</p> 
  <ul> 
   <li>an introduction (image and/or text) to the category; this can also be used for banners and teasers to promote special offers<br /> </li> 
   <li>links to the individual products in that category</li> 
   <li>links to the other categories</li> 
  </ul> 
  <img imageRotate="0" src="assets/ecommerce_categoryrunning.png" /> 
  <h3>Product Pages</h3> 
  <p>Product pages provide comprehensive information about individual products. Dynamic updates from are also reflected; for example, price changes that are registered on the eCommerce engine.</p> 
  <p>Product pages are AEM pages that use the <strong>Product</strong> component; for example, within the <strong>Commerce Product</strong> template:</p> 
  <img imageRotate="0" src="assets/ecommerce_nairobirunnersgreen.png" /> 
  <p>The Product component provides:</p> 
  <ul> 
   <li>General product information; including text and images.<br /> </li> 
   <li>Pricing; this is usually retrieved from the eCommerce engine every time the page is shown/refreshed.<br /> </li> 
   <li>Product variant information; for example, color and size.</li> 
  </ul> 
  <p>This information allows the shopper to select the following when adding an item to their basket:<br /> </p> 
  <ul> 
   <li>Color and size variants</li> 
   <li>Quantity</li> 
  </ul> 
  <h4>Product Landing Pages</h4> 
  <p>These are AEM pages that provide primarily static information; for example, an introduction and overview with links to the underlying product pages.</p> 
  <h3>Product Component</h3> 
  <p>The <strong>Product</strong> component can be added to any page with a parent page that delivers the required metadata (i.e. the paths to <span class="code">cartPage</span> and <span class="code">cartObject</span>). In the demonstration site, Geometrixx Outdoors, this is supplied by <span class="code">UserInfo.jsp</span>.<br /> </p> 
  <p>The <strong>Product</strong> component can also be customized according to your individual requirements.</p> 
  <h3>Proxy Pages</h3> 
  <p>Proxy pages are used to simplify the structure of the repository and optimize storage for large catalogs.</p> 
  <p>Creating a catalog will use ten nodes per product as it provides individual components for each product that you can update and customise within AEM. This large number of nodes can become an issue if your catalog contains hundreds or even thousands of products. To avert any issues you can create your catalog using proxy pages. </p> 
  <p>Proxy pages use a two-node structure (<span class="code">cq:Page</span> and<span class="code"> jcr:content</span>) that does not contain any of the actual product content. The content is generated, at request time, by referencing the product data and the template page. </p> 
  <p>However, there is a trade-off. You will not be able to customize your product information within AEM, a standard template (defined for your site) will be used.</p> 
  <note> 
   <p>You will not experience any problems if you import a large catalog without proxy pages.</p> 
   <p>You can convert from one methodology to the other at any time. You can also convert a sub-section of your catalog.<br /> </p> 
  </note> 
  <h2>Promotions and Vouchers</h2> 
  <h3>Vouchers</h3> 
  <p>Vouchers are a tried and tested method of offering discounts to either attract shoppers into making a purchase and/or rewarding customer's loyalty.</p> 
  <ul> 
   <li>Vouchers supply: 
    <ul> 
     <li>A voucher code (to be typed into the cart by the shopper).</li> 
     <li>A voucher label (to be displayed after the shopper has entered it into the cart).</li> 
     <li>A promotion path (which defines the action the voucher applies).</li> 
    </ul> </li> 
   <li>External commerce engines can also supply vouchers.</li> 
  </ul> 
  <p>In AEM:</p> 
  <ul> 
   <li>A voucher is a page-based component that is created / edited with the Websites console.<br /> </li> 
   <li>The <strong>Voucher</strong> component provides: 
    <ul> 
     <li>A renderer for voucher administration; this shows any vouchers currently in the cart.<br /> </li> 
     <li>The edit dialogs (form) for administrating (adding/removing) the vouchers.</li> 
     <li>The actions required for adding/removing vouchers to/from the cart.</li> 
    </ul> </li> 
   <li>Vouchers do not have their own on and off date/times, but use those of their parent campaigns.</li> 
  </ul> 
  <note> 
   <p>AEM uses the term <strong>Voucher</strong>, this is synonymous with the term <strong>Coupon</strong>.<br /> </p> 
  </note> 
  <h3>Promotions</h3> 
  <p>Promotions, together with vouchers, allow you to realize scenarios such as:</p> 
  <ul> 
   <li>A company provides custom prices for employees, which is a handcrafted list of users.</li> 
   <li>Long-term customers receive discounts on all orders.</li> 
   <li>A sale price offered over a well-defined time period.</li> 
   <li>A customer receives a voucher when their previous order exceeded a specific amount.</li> 
   <li>A customer who buys <i>product-X</i> is offered a discount on <i>product-Y</i> (pair products).</li> 
  </ul> 
  <p>Promotions are not usually maintained by product information managers, but by marketing managers:</p> 
  <ul> 
   <li>A Promotion is a page-based component that is created / edited with the Websites console.<span class="code"></span></li> 
   <li>Promotions supply: 
    <ul> 
     <li>A priority</li> 
     <li>A promotion handler path</li> 
    </ul> </li> 
   <li>You can connect promotions to a campaign to define their on/off date/times.</li> 
   <li>You can connect promotions to an experience to define their segments.</li> 
   <li>Promotions not connected to an experience will not fire on its own, but can still be fired by a Voucher.</li> 
   <li>The Promotion component contains: 
    <ul> 
     <li>renderers and dialogs for promotion administration</li> 
     <li>sub-components for rendering and editing configuration parameters specific to the promotion handlers</li> 
    </ul> </li> 
  </ul> 
  <p>In AEM the promotions are also integrated into the <a href="../../../sites/authoring/using/campaigns.md">Campaign Management</a>:</p> 
  <ul> 
   <li>a <a href="../../../sites/authoring/using/campaigns.md#creatinganewcampaign">campaign</a> specifies the on/off times</li> 
   <li><a href="../../../sites/authoring/using/campaigns.md#creatinganewexperience">experiences</a> <i>within</i> the campaign are used to group assets (teaserpages, promotions, etc) according to the audience segment they correspond to</li> 
  </ul> 
  <p>A promotion can be held either in an experience or directly in the campaign:</p> 
  <ul> 
   <li>If a promotion is held in an experience, then it can be automatically applied to an audience segment.<br /> For example, in the geometrixx-outdoors sample site, the promotion:<br /> <span class="code">/content/campaigns/geometrixx-outdoors/big-spender/ordervalueover100/free-shipping</span><br /> is in an experience, and so fires automatically whenever the segment (<span class="code">ordervalueover100</span>) resolves.</li> 
   <li>If a promotion does not appear within an experience (only in the campaign), then it cannot be automatically applied to an audience. However, it can still be fired if the shopper enters a voucher into their cart and that voucher references the promotion.<br /> For example, the promotion:<br /> <span class="code">/content/campaigns/geometrixx-outdoors/article/10-bucks-off</span><br /> is outside an experience and so never fires automatically (ie: based on segmentation). It is, however, referenced by the vouchers which can be found in several of the experiences within the article campaign. Entering those voucher codes into the cart will result in the promotion firing.</li> 
  </ul> 
  <note> 
   <p><a href="http://www.hybris.com/modules/promotion">hybris promotions</a> and <a href="http://www.hybris.com/en/modules/voucher">hybris vouchers</a> cover everything that influences the shopping cart and is related to pricing. Promotion specific marketing content (such as banners, etc) is not part of the hybris promotion.</p> 
  </note> 
  <h2>Personalization</h2> 
  <h3>Customer Registration and Accounts</h3>    
  <p>When a shopper registers, the account details need to be synchronized between AEM and the eCommerce engine. Sensitive data is held independently, but profiles are shared:<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-212.png" /> 
  <p>The exact mechanism can depend on the scenario:</p> 
  <ol> 
   <li>The user accounts exists in both systems:<br /> 
    <ol> 
     <li>No action required.</li> 
    </ol> </li> 
   <li>The user account exists only in AEM: 
    <ol> 
     <li>User will be created in the eCommerce engine with same account ID and a random password which will be stored in AEM.</li> 
     <li>The random password is necessary, as AEM tries to log into the eCommerce engine on the first call (for example, when a product page is requested and the eCommerce engine is referenced for the price). Because this happens after the AEM login, the password is not available.</li> 
    </ol> </li> 
   <li>The user account only exists in the eCommerce engine: 
    <ol> 
     <li>The account will be created in AEM with same account ID and password.</li> 
    </ol> </li> 
  </ol> 
  <p>When using an eCommerce engine, AEM only stores the account ID and password (optionally a user group). All other information is stored in the eCommerce engine.<br /> </p>  
  <note> 
   <p>When using an eCommerce engine, you need to ensure that accounts created for users who log into an AEM instance are replicated (e.g. via workflows) to any other AEM instances that communicate with that engine.</p> 
   <p>Otherwise, these other AEM instances will also try to create accounts for the same users in the engine. These actions will fail with a <span class="code">DuplicateUidException</span> coming from the engine.</p> 
  </note> 
  <h3>Customer Sign-Up</h3> 
  <p>Often sign-up is required for the shopper to have access to the shopping cart. This requires registration (Create Account) so that a customer-specific account can be created.<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-213.png" /> 
  <note> 
   <p>An anonymous shopping cart and checkout is also supported.</p> 
  </note> 
  <h3>Customer Sign-In</h3> 
  <p>After sign-up the shopper can login with their account so that their actions can be tracked and their orders fulfilled.<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-214.png" /> 
  <h3>Single Sign-On</h3> 
  <p>Single-sign-on (SSO) is provided, so that authors are known in both AEM and the eCommerce system without having to login twice.</p> 
  <h3>myAccount</h3>  
  <p>Transaction data from the eCommerce engine is combined with personal information about the shopper. AEM uses some of this data as profile data. A form's action in AEM writes information back to the eCommerce engine.</p> 
  <p>There is a page which allows you to easily manage your account informations. You can access it by clicking <strong>My Account</strong> at the top of a geometrixx page, or by navigating to <span class="code">/content/geometrixx-outdoors/en/user/account.html</span>.</p> 
  <img imageRotate="0" src="assets/chlimage_1-215.png" /> 
  <h3>Address Book</h3>  
  <p>Your site will need to store a selection of addresses; including delivery, billing and alternative addresses. This can be implemented using forms based on your default address format or you can use the Address Book component provided by AEM.</p> 
  <p>This Address Book component allows you to:</p> 
  <ul> 
   <li>edit addresses in the book</li> 
   <li>select an address from the book for shipping address</li> 
   <li>select an address from the book for billing address</li> 
  </ul> 
  <p>You can choose which address you want as default. </p> 
  <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12.222222328186035px;">The address book component is reachable from the <strong>My Account</strong> page by clicking <strong>Address Book</strong> or by navigating to <span class="code">/content/geometrixx-outdoors/en/user/account/address-book.html</span>.<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-216.png" /> 
  <p>You can click<strong> Add new address...</strong> to add a new address in your address book. It opens a form that you can fill out and then click <strong>Add address</strong>.</p> 
  <note> 
   <p>You can enter several addresses in your Address Book.</p> 
  </note> 
  <p>The Address Book is used when you checkout your cart:</p> 
  <img imageRotate="0" src="assets/chlimage_1-217.png" /> 
  <p>Addresses are persisted below <span class="code">user_home/profile/addresses</span>.<br /> For example, for Alison Parker, it would be under /home/users/geometrixx/aparker@geometrixx.info/profile/addresses</p> 
  <p>You can choose which address you want as default, this information is persisted in the shopper's profile rather than with the address. The profile property <span class="code">address.default</span> is set with the path of the selected address for value.</p> 
  <h3>Customer-specific Pricing</h3> 
  <p>The eCommerce engine uses the context (essentially the shopper information) to determine the price it is holding, then provide the correct information back to AEM.</p>   
  <h2>Shopping Cart and Orders</h2> 
  <p>When shopping the shopper will browse the product pages and select items to place them in their shopping cart. When they proceed to checkout an order can be placed.<br /> </p> 
  <h3>Anonymous Shoppers</h3>   
  <p>An anonymous customer can:<br /> </p> 
  <ul> 
   <li>View products</li> 
   <li>Add products to their cart</li> 
   <li>Perform checkout to place their order</li> 
  </ul> 
  <note> 
   <p>Depending on the configuration of your instance address information, or customer registration, might be required prior to checkout.</p> 
  </note> 
  <h3>Registered Shoppers</h3> 
  <p>A registered customer can:<br /> </p> 
  <ul> 
   <li>Login to their account</li> 
   <li>View products</li> 
   <li>Add products to their cart</li> 
   <li>Perform checkout to place their order</li> 
   <li>View and track previous orders</li> 
  </ul> 
  <h3>Shopping Cart Content Overview</h3> 
  <p>The shopping cart provides:</p> 
  <ul> 
   <li>an overview of items selected</li> 
   <li>links to the product pages for the selected items<br /> </li> 
   <li>the capability to: 
    <ul> 
     <li>update the number/quantity of the individual items</li> 
     <li>remove individual items</li> 
    </ul> </li> 
  </ul> 
  <img imageRotate="0" src="assets/ecommerce_shoppingcart.png" /> 
  <p>The shopping cart is saved according to the engine being used:</p> 
  <ul> 
   <li>AEM generic stores the cart in a cookie.<br /> </li> 
   <li>Certain eCommerce engines can store the cart in a session.</li> 
  </ul> 
  <p>In either case, items stay in the cart (and can be restored) across log-in/log-out (but only on the same machine/browser). For example:</p> 
  <ul> 
   <li>browse as <span class="code">anonymous</span> and add products to the cart</li> 
   <li>sign in as <span class="code">Allison Parker</span> - her cart is empty</li> 
   <li>add products to her cart</li> 
   <li>sign out - the cart will show the products for <span class="code">anonymous</span><br /> </li> 
   <li>sign in again as <span class="code">Allison Parker</span> - her products are restored</li> 
  </ul> 
  <p> </p> 
  <note> 
   <p>An anonymous cart can only be restored on the same machine/browser.</p> 
  </note> 
  <note> 
   <p>It is not recommended to test restoring the cart contents with the <span class="code">admin</span> account, as this can conflict with the <span class="code">admin</span> account of the eCommerce engine (e.g. hybris).</p> 
  </note> 
  <note> 
   <p>hybris can be configured to remove pending carts after a defined period of time.</p> 
  </note> 
  <p>Prior to the checkout, price changes are reflected (in both systems) as they occur.</p> 
  <h3>Order Information</h3>  
  <p>Depending on your implementation information about an order is held either in the eCommerce engine or AEM, this information is rendered by AEM. </p> 
  <p>A variety of information is stored, which can include:</p>  
  <ul> 
   <li><strong>Order ID</strong><br /> The reference number for the order.<br /> </li> 
   <li><strong>Placed</strong><br /> The date the order was placed.<br /> </li> 
   <li><strong>Status</strong><br /> The status of the order; for example, Shipped.<br /> </li> 
   <li><strong>Currency</strong><br /> The currency of the order.<br /> </li> 
   <li><strong>Content Items</strong><br /> A list of items ordered.<br /> </li> 
   <li><strong>Subtotal</strong><br /> The total cost of the items ordered.<br /> </li> 
   <li><strong>Tax</strong><br /> The amount of any taxes due on the order.<br /> </li> 
   <li><strong>Shipping</strong><br /> Shipping costs.<br /> </li> 
   <li><strong>Total</strong><br /> The total value of the order; items ordered, taxes and shpping.<br /> </li> 
   <li><strong>Billing Address</strong><br /> The address to be which the invoice should be sent.<br /> </li> 
   <li><strong>Payment Token</strong><br /> The payment method.<br /> </li> 
   <li><strong>Payment Status</strong><br /> The status of the payment.<br /> </li> 
   <li><strong>Shipping Address</strong><br /> The address to which the goods should be shipped.<br /> </li> 
   <li><strong>Shipping Method<br /> </strong>The method of shipping; for example, land, sea or air.<br /> </li> 
   <li><strong>Tracking Number<br /> </strong>Any tracking number used by the shipping company.<br /> </li> 
   <li><strong>Tracking Link</strong><br /> The link used for tracking the order while being shipped.</li> 
  </ul> 
  <note> 
   <p>The fields used in the create order wizard are dependent on there being a touch-optimized scaffolding defined for the location. In the generic example, this can be found at:<br /> <span class="code">/etc/scaffolding/geometrixx-outdoors/order/jcr:content/cq:dialog</span></p> 
  </note> 
  <p>When the order is held within AEM the Order console shows the following for each order:</p> 
  <ul> 
   <li>the number of items in the cart<br /> </li> 
   <li>the total value of the order<br /> </li> 
   <li>when the order was placed</li> 
   <li>the status<br /> </li> 
  </ul> 
  <img imageRotate="0" src="assets/chlimage_1-218.png" /> 
  <h3>Order Tracking</h3>  
  <p>After placing an order, shoppers will often return to:</p> 
  <ul> 
   <li>Check the status of their order</li> 
   <li>Remove products from the order</li> 
   <li>Add products to the order</li> 
  </ul> 
  <p>After receiving the order delivery, shoppers may also want to view the history of orders made over a period of time.</p> 
  <p>Order fulfillment and tracking is usually managed by the eCommerce engine. Information can be displayed by AEM using the Order History component, which shows all relevant details, including the vouchers and promotions applied. For example:</p> 
  <img imageRotate="0" src="assets/chlimage_1-219.png" /> 
  <h2>Checkout</h2> 
  <p>Checkout is implemented with standard AEM forms. This allows the marketing manager to customize the experience with marketing content.</p> 
  <p>The eCommerce then manages the checkout process with input from the AEM forms.</p>  
  <h3>Payment Security</h3>  
  <p>Payment details, including credit card information, are often managed by the eCommerce engine. AEM forwards such transactional information to the engine (from where it is then forwarded to a payment processing service).<br /> </p> 
  <p>Payment Card Industry (PCI) complicance can be achieved.</p> 
  <h3>Confirmation of Order</h3>  
  <p>The order is confirmed on screen and can be tracked with the <a href="#ordertracking">order tracking</a>.<br /> </p> 
  <h2>Search</h2> 
  <img imageRotate="0" src="assets/chlimage_1-220.png" /> 
  <p>Since AEM uses standard pages for products, you can use the <a href="/content/docs/en/aem/6-3/author/page-authoring/default-components/editmode#Search">standard search component</a> to create a search page.</p> 
  <p>If you require a more thorough implementation, you can either:</p> 
  <ul> 
   <li>Extend the default search component with the functionality you need.</li> 
   <li>Implement the search method in your <span class="code">CommerceService</span> and then use the eCommerce search component on your search page.</li> 
  </ul> 
  <p>When using an eCommerce engine, the eCommerce search API can be fully implemented in the eCommerce engine solution (e.g. hybris), so you can use the eCommerce search component that is provided out-of-the-box. The faceted search allows you to search either JCR and/or the engine:<br /> </p> 
 </body> 
</html>