<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="2018-05-08T12:46:38.562-0400" name="locHandOffDate" /> 
  <meta content="2017-10-31T16:15:50.922-0400" name="firstPublishExternalDate" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="wmyersta@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="2017-10-31T16:15:50.922-0400" name="lastPublishExternalDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:components;content_type:reference" name="cq:tags" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="dist5" name="distType" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="/content/docs/en/aem/6-3/develop/components/widgets" name="qaNotes" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="cb5a18fd-bd54-4e33-b45e-0efcb6b7a2c3" name="jcr:predecessors" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2018-04-03T09:01:28.284-0400" name="cq:lastReplicated" /> 
  <meta content="7e785737-517b-4ac9-b1f8-8c81277fd894" name="jcr:uuid" /> 
  <meta content="Using and Extending Widgets (Classic UI)" name="seoTitle" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/widgets.html" name="publishExternalURL" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2017-12-01T19:02:47.185-0500" name="jcr:created" /> 
  <meta content="Using and Extending Widgets (Classic UI)" name="jcr:title" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="AEM's web-based interface uses AJAX and other modern browser technologies to enable WYSIWYG editing and formatting of content by authors right on the web page" name="seoDescription" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="2018-05-08T12:46:38.563-0400" name="cq:lastModified" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/components;/content/help/en/experience-manager/6-4/sites/developing/morehelp/components" name="moreHelpPaths" /> 
  <meta content="2017-10-31T16:15:50.922-0400" name="topicBrowsingSortDate" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="2017-10-31T16:15:50.922-0400" name="publishExternalDate" /> 
  <meta content="Using and Extending Widgets (Classic UI)" name="navTitle" /> 
  <meta content="light" name="gnavTheme" /> 
  <meta content="en_us" name="jcr:language" /> 
 </head> 
 <body>  
  <p>Adobe Experience Manager's web-based interface uses AJAX and other modern browser technologies to enable WYSIWYG editing and formatting of content by authors right on the web page.<br /> </p> 
  <p>Adobe Experience Manager (AEM) uses the <a href="http://www.sencha.com/">ExtJS</a> widgets library, which provides the highly polished user interface elements that work across all the most important browsers and allow the creation of desktop-grade UI experiences.</p> 
  <p>These widgets are included within AEM and, in addition to being used by AEM itself, can be used by any website built using AEM.</p> 
  <p>For a complete reference of all the available widgets in AEM you can refer to the <a href="/sites/developing/using/reference-materials/widgets-api/index">widget API documentation</a> or to the <a href="../../../sites/developing/using/xtypes.md">list of existing xtypes</a>. In addition, many examples showing how to use the ExtJS framework are available on the <a href="http://www.sencha.com/products/extjs/examples/">Sencha</a> site, the owner of the framework.<br /> </p> 
  <p>This page gives some insights about how to use and extend widgets. It first describes how to <a href="#includingtheclientsidedcodeinapage">include client-sided code in a page</a>. It then describes some sample components that have been created to illustrate some basic use and extension. Those components are available in the <strong>Using ExtJS Widgets</strong> package on <strong>Package Share</strong>.</p> 
  <p>The package includes examples of:</p> 
  <ul> 
   <li><a href="#basicdialogs">Basic dialogs</a> built with out-of-the-box widgets.</li> 
   <li><a href="#dynamicdialogs">Dynamic dialogs</a> built with out-of-the-box widgets and customized javascript logic.</li> 
   <li>Dialogs based on <a href="#customwidgets">custom widgets</a>.</li> 
   <li>A <a href="#treeoverview">tree panel</a> displaying a JCR tree below a given path.</li> 
   <li>A <a href="#gridoverview">grid panel</a> displaying data in a tabular format.</li> 
  </ul> 
  <note> 
   <p>The classic UI of Adobe Experience Manager is built upon <a href="http://extjs.cachefly.net/ext-3.4.0/docs/">ExtJS 3.4.0</a>.</p> 
  </note> 
  <note> 
   <p>This page describes the usage of widgets within the classic UI. Adobe recommends that you leverage the modern, <a href="../../../sites/developing/using/touch-ui-concepts.md">touch-enabled UI</a> based on <a href="../../../sites/developing/using/touch-ui-concepts.md#main-pars-title-0">Coral UI</a> and <a href="../../../sites/developing/using/touch-ui-concepts.md#main-pars-title-3">Granite UI</a>.</p> 
  </note>  
  <h3>Including the Client-Sided Code in a Page</h3>  
  <p>Client sided javascript and stylesheet code should be placed in a client library.</p> 
  <p>To create a client library:</p> 
  <ol> 
   <li>Create a node below <span class="code">/apps/&amp;lt;project&amp;gt;</span> with the following properties: 
    <ul> 
     <li>name="clientlib"</li> 
     <li>jcr:mixinTypes="[mix:lockable]"</li> 
     <li>jcr:primaryType="cq:ClientLibraryFolder"<br /> </li> 
     <li>sling:resourceType="widgets/clientlib"<br /> </li> 
     <li>categories="[&amp;lt;category-name&amp;gt;]"<br /> </li> 
     <li>dependencies="[cq.widgets]"<br /> </li> 
    </ul> <span>Note: &amp;lt;category-name&amp;gt; is the name of the custom library (e.g. "cq.extjstraining") and is used to include the library on the page.</span></li> 
   <li>Below <span class="code">clientlib</span> create the <span class="code">css</span> and <span class="code">js</span> folders (nt:folder).<br /> </li> 
   <li>Below <span class="code">clientlib</span> create the <span class="code">css.txt</span> and<span class="code"> js.txt</span> files (nt:files). Those .txt files list the files that are included in the library.<br /> </li> 
   <li>Edit <span class="code">js.txt</span>: it needs to start with '<span class="code">#base=js</span>' followed by the list of the files that will be aggregated by the CQ client library service, eg:<br /> <code class="code">#base=js
     <discoiqbr /> components.js
     <discoiqbr /> exercises.js
     <discoiqbr /> CustomWidget.js
     <discoiqbr /> CustomBrowseField.js
     <discoiqbr /> InsertTextPlugin.js</code></li> 
   <li>Edit <span class="code">css.txt</span>: it needs to start with '<span class="code">#base=css</span>' followed by the list of the files that will be aggregated by the CQ client library service, eg:<br /> <code class="code">#base=css
     <discoiqbr /> components.css</code></li> 
   <li>Below the <span class="code">js</span> folder, place the javascript files that belong to the library.<br /> </li> 
   <li>Below the <span class="code">css</span> folder, place the <span class="code">.css</span> files and the resources used by the css files (e.g. <span class="code">my_icon.png</span>).</li> 
  </ol> 
  <note> 
   <p>The handling of stylesheets described before is optional.</p> 
  </note> 
  <p>To include the client library in the page component jsp:<br /> </p> 
  <ul> 
   <li>to include both javascript code and stylesheets:<br /> <span class="code">&amp;lt;ui:includeClientLib categories="&amp;lt;category-name1&amp;gt;, &amp;lt;category-name2&amp;gt;, ..."/&amp;gt;</span><br /> where <span class="code">&amp;lt;category-nameX&amp;gt;</span> is the name of the client-sided library.</li> 
   <li>to only include javascript code:<br /> <span class="code">&amp;lt;ui:includeClientLib js="&amp;lt;category-name&amp;gt;"/&amp;gt;</span></li> 
  </ul> 
  <p>For more details refer to the description of the <a href="../../../sites/developing/using/taglib.md#main-pars-title-1565813984">&amp;lt;ui:includeClientLib&amp;gt;</a> tag.</p> 
  <p>In some cases a client library should only be available in author mode and should be excluded in publish mode. It can be achieved as follows:</p> 
  <codeblock gutter="true" class="syntax xml">
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(WCMMode.fromRequest(request)&amp;nbsp;!=&amp;nbsp;WCMMode.DISABLED)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%&gt;&lt;ui:includeClientLib&amp;nbsp;categories="cq.collab.blog"/&gt;&lt;%!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} 
  </codeblock> 
  <h3>Getting Started with the Samples</h3> 
  <p>To follow the tutorials on this page, install the package called <strong>Using ExtJS Widgets</strong> in a local AEM instance and create a sample page in which the components will be included. To do so:<br /> </p> 
  <ol> 
   <li>In your AEM instance download the package called <strong>Using ExtJS Widgets (v01)</strong> from Package Share and install the package. It creates the project <span class="code">extjstraining</span> below <span class="code">/apps</span> in the repository.</li> 
   <li>Include the client library containing the scripts (js) and the stylesheet (css) in the head tag of the geometrixx page jsp, as you will include the sample components in a new page of the <strong>Geometrixx</strong> branch:<br /> in <strong>CRXDE Lite</strong> open the file<span class="code"> /apps/geometrixx/components/page/headlibs.jsp</span> and add the <span class="code">cq.extjstraining</span> category to the existing <span class="code">&amp;lt;ui:includeClientLib&amp;gt;</span> tag as follows:<br /> <span class="code">%&amp;gt;&amp;lt;ui:includeClientLib categories="apps.geometrixx-main, cq.extjstraining"/&amp;gt;&amp;lt;%</span></li> 
   <li>Create a new page in the <strong>Geometrixx</strong> branch below <span class="code">/content/geometrixx/en/products</span> and call it <strong>Using ExtJS Widgets</strong>.<br /> </li> 
   <li>Go in design mode and add all the components of the group called <strong>Using ExtJS Widgets</strong> to the design of Geometrixx</li> 
   <li>Go back in edit mode: the components of the group <strong>Using ExtJS Widgets</strong> are available in the Sidekick.<br /> </li> 
  </ol> 
  <note> 
   <p>The examples on this page are based on the Geometrixx sample content, which is no longer shipped with AEM, having been replaced by We.Retail. See the document <a href="../../../sites/developing/using/we-retail.md#main-pars-title-2a55">We.Retail Reference Implementation</a> for how to download and install Geometrixx.</p> 
  </note> 
  <h3>Basic Dialogs</h3> 
  <p>Dialogs are typically used to edit content, but can also just display information. An easy way to view a complete dialog is to access its representation in json format. To do so, point your browser to:</p> 
  <p><span class="code">http://localhost:4502/&amp;lt;path-to-dialog&amp;gt;.-1.json</span><br /> </p> 
  <p>The first component of the <strong>Using ExtJS Widgets</strong> group in the Sidekick is called <strong>1. Dialog Basics</strong> and includes four basic dialogs that are built with out-of-the-box widgets and without customized javascript logic. The dialogs are stored below <span class="code">/apps/extjstraining/components/dialogbasics</span>. The basic dialogs are:</p> 
  <ul> 
   <li>the Full dialog (<span class="code">full</span> node): it displays a window with 3 tabs, each tab having 2 text fields.<br /> </li> 
   <li>the Single Panel dialog(<span class="code">singlepanel</span> node): it displays a window with 1 tab that has 2 text fields.</li> 
   <li>the Multi Panel dialog(<span class="code">multipanel</span> node): its display is the same as the Full dialog but it is built differently.</li> 
   <li>the Design dialog(<span class="code">design</span> node): it displays a window with 2 tabs. The first tab has a text field, a drop-down menu and a collapsible textarea. The second tab has a field set with 4 text fields and a collapsible field set with 2 text fields.</li> 
  </ul> 
  <p>Include the <strong>1. Dialog Basics</strong> component in the sample page:</p> 
  <ol> 
   <li>Add the <strong>1. Dialog Basics</strong> component to the sample page from the <strong>Using ExtJS Widgets</strong> tab in the <strong>Sidekick</strong>.</li> 
   <li>The component displays a title, some text and a <strong>PROPERTIES</strong> link: click the link to display the properties of the paragraph stored in the repository. Click again the link to hide the properties.</li> 
  </ol> 
  <p>The component displays as follows:</p> 
  <img imageRotate="0" src="assets/chlimage_1-146.png" /> 
  <h4>Example 1: Full Dialog</h4> 
  <p>The <strong>Full</strong> dialog displays a window with three tabs, each tab having two text fields. It is the default dialog of the <strong>Dialog Basics</strong> component. Its characteristics are:</p> 
  <ul> 
   <li>Is defined by a node: node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>.</li> 
   <li>Displays 3 tabs (node type = <span class="code">cq:Panel</span>).</li> 
   <li>Each tab has 2 textfields (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span>).<br /> </li> 
   <li>Is defined by the node:<br /> <span class="code">/apps/extjstraining/components/dialogbasics/full</span></li> 
   <li>Is rendered in JSON format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dialogbasics/full.-1.json</span></li> 
  </ul> 
  <p>The dialog displays as follows:<br /> </p> 
  <img imageRotate="0" src="assets/screen_shot_2012-01-31at45411pm.png" /> 
  <h4>Example 2: Single Panel Dialog</h4> 
  <p>The <strong>Single Panel</strong> dialog displays a window with one tab that has two text fields. Its characteristics are:<br /> </p> 
  <p></p> 
  <ul> 
   <li>Displays 1 tab (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#panel">panel</a></span>)</li> 
   <li>The tab has 2 textfields (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span>)<br /> </li> 
   <li>Is defined by the node:<br /> <span class="code">/apps/extjstraining/components/dialogbasics/singlepanel</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dialogbasics/singlepanel.-1.json</span></li> 
   <li>One advantage over the <strong>Full Dialog</strong> is that less configuration is needed.</li> 
   <li>Recommended use: for simple dialogs that display information or only have just a few fields.</li> 
  </ul> 
  <p>To use the Single Panel dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Dialog Basics</strong> component with the <strong>Single Panel</strong> dialog: 
    <ol> 
     <li>In <strong>CRXDE Lite</strong>, delete the node: <span class="code">/apps/extjstraining/components/dialogbasics/dialog</span></li> 
     <li>Click <strong>Save All</strong> to save the changes.</li> 
     <li>Copy the node: <span class="code">/apps/extjstraining/components/dialogbasics/singlepanel</span></li> 
     <li>Paste the copied node below: <span class="code">/apps/extjstraining/components/dialogbasics</span></li> 
     <li>Select the node: <span class="code">/apps/extjstraining/components/dialogbasics/Copy of singlepanel </span>and rename it <span class="code">dialog</span>.</li> 
    </ol> </li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol> 
  <img imageRotate="0" src="assets/screen_shot_2012-01-31at45952pm.png" /> 
  <h4>Example 3: Multi Panel Dialog</h4> 
  <p>The <strong>Multi Panel</strong> dialog has the same display as the <strong>Full</strong> dialog but it is built differently. Its characteristics are:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#tabpanel">tabpanel</a></span>).</li> 
   <li>Displays 3 tabs (node type = <span class="code">cq:Panel</span>).</li> 
   <li>Each tab has 2 textfields (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span>).</li> 
   <li>Is defined by the node:<br /> <span class="code">/apps/extjstraining/components/dialogbasics/multipanel</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dialogbasics/multipanel.-1.json</span></li> 
   <li>One advantage over the <strong>Full Dialog</strong> is that it has a simplified structure.<br /> </li> 
   <li>Recommended use: for multi-tab dialogs.<br /> </li> 
  </ul> 
  <p>To use the Multi Panel dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Dialog Basics</strong> component with the <strong>Multi Panel </strong>dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a><br /> </li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol> 
  <img imageRotate="0" src="assets/screen_shot_2012-01-31at50119pm.png" /> 
  <h4>Example 4: Rich Dialog</h4> 
  <p>The <strong>Rich</strong> dialog displays a window with two tabs. The first tab has a text field, a drop-down menu and a collapsible textarea. The second tab has a field set with four text fields and a collapsible field set with two text fields. Its characteristics are:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 2 tabs (node type = <span class="code">cq:Panel</span>).</li> 
   <li>The first tab has a <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialogfieldset">dialogfieldset</a></span> widget with a <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span> and a <span class="code"><a href="../../../sites/developing/using/xtypes.md#selection">selection</a></span> widget with 3 options, and a collapsible <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialogfieldset">dialogfieldset</a></span> with a <span class="code"><a href="../../../sites/developing/using/xtypes.md#textarea">textarea</a></span> widget.</li> 
   <li>The second tab has a <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialogfieldset">dialogfieldset</a></span> widget with 4 <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span> widgets, and a collapsible <span class="code">dialogfieldset</span> with 2 <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span> widgets.</li> 
   <li>Is defined by the node:<br /> <span class="code">/apps/extjstraining/components/dialogbasics/rich</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dialogbasics/rich.-1.json</span></li> 
  </ul> 
  <p>To use the <strong>Rich</strong> dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Dialog Basics</strong> component with the <strong>Rich</strong> dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a></li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol> 
  <img imageRotate="0" src="assets/screen_shot_2012-01-31at50429pm.png" /> 
  <img imageRotate="0" src="assets/screen_shot_2012-01-31at50519pm.png" /> 
  <h3>Dynamic Dialogs</h3> 
  <p>The second component of the <strong>Using ExtJS Widgets</strong> group in the Sidekick is called <strong>2. Dynamic Dialogs</strong> and includes three dynamic dialogs that are built with out-of-the-box widgets and <strong>with customized javascript logic</strong>. The dialogs are stored below <span class="code">/apps/extjstraining/components/dynamicdialogs</span>. The dynamic dialogs are:</p> 
  <ul> 
   <li>the Switch Tabs dialog (<span class="code">switchtabs</span> node): it displays a window with two tabs. The first tab has a radio selection with three options: when an option is selected, a tab that relates to the option is displayed. The second tab has two text fields.</li> 
   <li>the Arbitrary dialog (<span class="code">arbitrary</span> node): it displays a window with one tab. The tab has a field to drop or upload an asset and a field that displays some information about the containing page and about the asset if one is referenced.</li> 
   <li>the Toggle Fields dialog (<span class="code">togglefield</span> node): it displays a window with one tab. The tab has a checkbox: when it is checked a field set with two text fields is displayed.</li> 
  </ul> 
  <p>To include the <strong>2. Dynamic Dialogs</strong> component on the sample page:</p> 
  <ol> 
   <li>Add the <strong>2. Dynamic Dialogs</strong> component to the sample page from the <strong>Using ExtJS Widgets</strong> tab in the <strong>Sidekick</strong>.</li> 
   <li>The component displays a title, some text and a <strong>PROPERTIES</strong> link: click to display the properties of the paragraph stored in the repository. Click again to hide the properties.<br /> </li> 
  </ol> 
  <p>The component displays as follows:</p> 
  <img imageRotate="0" src="assets/chlimage_1-147.png" /> 
  <h4>Example 1: Switch Tabs Dialog</h4> 
  <p>The <strong>Switch Tabs</strong> dialog displays a window with two tabs. The first tab has a radio selection with three options: when an option is selected, a tab that relates to the option is displayed. The second tab has two text fields.</p> 
  <p>Its main characteristics are:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 2 tabs (node type = <span class="code">cq:Panel</span>): 1 selection tab, the 2nd tab depends on the selection in the 1st tab (3 options).</li> 
   <li>Has 3 optional tabs (node type = <span class="code">cq:Panel</span>), each one has 2 textfields (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span>). Only one optional tab is displayed at a time.<br /> </li> 
   <li>Is defined by the <span class="code">switchtabs</span> node at:<br /> <span class="code">/apps/extjstraining/components/dynamicdialogs/switchtabs</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dynamicdialogs/switchtabs.-1.json</span></li> 
  </ul> 
  <p>The logic is implemented through event listeners and javascript code as follows:<br /> </p> 
  <ul> 
   <li>The dialog node has a "<span class="code">beforeshow</span>" listener that hides all the optional tabs before the dialog is shown:<br /> <span class="code">beforeshow="function(dialog){Ejst.x2.manageTabs(dialog.items.get(0));}"</span><br /> <span class="code">dialog.items.get(0)</span> gets the tabpanel that contains the selection panel and the 3 optional panels.<br /> </li> 
   <li>The <span class="code">Ejst.x2</span> object is defined in the <span class="code">exercises.js</span> file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/exercises.js</span><br /> </li> 
   <li>In the <span class="code">Ejst.x2.manageTabs()</span> method, as the value of <span class="code">index</span> is -1, all the optional tabs are hidden (i goes from 1 to 3).</li> 
   <li>The selection tab has 2 listeners: one that shows the selected tab when the dialog is loaded ("<span class="code">loadcontent</span>" event) and one that shows the selected tab when the selection is changed ("<span class="code">selectionchanged</span>" event):<br /> <span class="code">loadcontent="function(field,rec,path){Ejst.x2.showTab(field);}"</span><br /> <span class="code">selectionchanged="function(field,value){Ejst.x2.showTab(field);}"</span><br /> </li> 
   <li>In the <span class="code">Ejst.x2.showTab()</span> method:<br /> <span class="code">field.findParentByType('tabpanel')</span> gets the tabpanel that contains all the tabs (<span class="code">field</span> represents the selection widget)<br /> <span class="code">field.getValue()</span> gets the value of the selection, e.g.: tab2<br /> <span class="code">Ejst.x2.manageTabs()</span> displays the selected tab.</li> 
   <li>Each optional tab has a listener that hides the tab on "<span class="code">render</span>" event:<br /> <span class="code">render="function(tab){Ejst.x2.hideTab(tab);}"</span><br /> </li> 
   <li>In the <span class="code">Ejst.x2.hideTab()</span> method:<br /> <span class="code">tabPanel</span> is the tabpanel that contains all the tabs<br /> <span class="code">index</span> is the index of the optional tab<br /> <span class="code">tabPanel.hideTabStripItem(index)</span> hides the tab</li> 
  </ul> 
  <p>It displays as follows:<br /> </p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at114745am.png" /> 
  <h4>Example 2: Arbitrary Dialog</h4> 
  <p>Very often a dialog displays content from the underlying component. The dialog described here, called <strong>Arbitrary</strong> dialog, pulls content from a different component.</p> 
  <p>The <strong>Arbitrary</strong> dialog displays a window with one tab. The tab has two fields: one to drop or upload an asset and one that displays some information about the containing page and about the asset if one has been referenced.</p> 
  <p>Its main characteristics are:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 1 tabpanel widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#tabpanel">tabpanel</a></span>) with 1 panel (node type = <span class="code">cq:Panel</span>)</li> 
   <li>The panel has a smartfile widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#smartfile">smartfile</a></span>) and an ownerdraw widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#ownerdraw">ownerdraw</a></span>)</li> 
   <li>Is defined by the <span class="code">arbitrary</span> node at:<br /> <span class="code">/apps/extjstraining/components/dynamicdialogs/arbitrary</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dynamicdialogs/arbitrary.-1.json</span></li> 
  </ul> 
  <p>The logic is implemented through event listeners and javascript code as follows:</p> 
  <ul> 
   <li>The ownerdraw widget has a "<span class="code">loadcontent</span>" listener that shows info about the page containing the component and the asset referenced by the smartfile widget when the content is loaded:<br /> <span class="code">loadcontent="function(field,rec,path){Ejst.x2.showInfo(field,rec,path);}"</span><br /> <span class="code">field</span> is set with the ownerdraw object<br /> <span class="code">path</span> is set with the content path of the component (e.g.: /content/geometrixx/en/products/triangle/ui-tutorial/jcr:content/par/dynamicdialogs)</li> 
   <li>The <span class="code">Ejst.x2</span> object is defined in the <span class="code">exercises.js</span> file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/exercises.js</span></li> 
   <li>In the <span class="code">Ejst.x2.showInfo()</span> method:<br /> <span class="code">pagePath</span> is the path of the page containing the component<br /> <span class="code">pageInfo</span> represents the page properties in json format<br /> <span class="code">reference</span> is the path of the referenced asset<br /> <span class="code">metadata</span> represents the metadata of the asset in json format<br /> <span class="code">ownerdraw.getEl().update(html);</span> displays the created html in the dialog<br /> </li> 
  </ul> 
  <p>To use the <strong>Arbitrary</strong> dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Dynamic Dialog</strong> component with the <strong>Arbitrary</strong> dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a></li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol>  
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at115300am.png" /> 
  <h4>Example 3: Toggle Fields Dialog</h4> 
  <p>The <strong>Toggle Fields</strong> dialog displays a window with one tab. The tab has a checkbox: when it is checked a field set with two text fields is displayed.</p> 
  <p>Its main characteristics are:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 1 tabpanel widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textpanel">tabpanel</a></span>) with 1 panel (node type = <span class="code">cq:Panel</span>).</li> 
   <li>The panel has a selection/checkbox widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#selection">selection</a></span>, type = <span class="code"><a href="../../../sites/developing/using/xtypes.md#checkbox">checkbox</a></span>) and a collapsible dialogfieldset widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialogfieldset">dialogfieldset</a></span>) that is hidden by default, with 2 textfield widgets (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#textfield">textfield</a></span>).</li> 
   <li>Is defined by the <span class="code">togglefields</span> node at:<br /> <span class="code">/apps/extjstraining/components/dynamicdialogs/togglefields</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/dynamicdialogs/togglefields.-1.json</span></li> 
  </ul> 
  <p>The logic is implemented through event listeners and javascript code as follows:</p> 
  <ul> 
   <li>the selection tab has 2 listeners: one that shows the dialogfieldset when the content is loaded ("<span class="code">loadcontent</span>" event) and one that shows the dialogfieldset when the selection is changed ("<span class="code">selectionchanged</span>" event):<br /> <span class="code">loadcontent="function(field,rec,path){Ejst.x2.toggleFieldSet(field);}"</span><br /> <span class="code">selectionchanged="function(field,value){Ejst.x2.toggleFieldSet(field);}"</span></li> 
   <li>The <span class="code">Ejst.x2</span> object is defined in the <span class="code">exercises.js</span> file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/exercises.js</span><br /> </li> 
   <li>In the <span class="code">Ejst.x2.toggleFieldSet()</span> method:<br /> <span class="code">box</span> is the selection object<br /> <span class="code">panel</span> is the panel containing the selection and the dialogfieldset widgets<br /> <span class="code">fieldSet</span> is the dialogfieldset object<br /> <span class="code">show</span> is the value of the selection (true or false)<br /> based on '<span class="code">show</span>' the dialogfieldset is displayed or not</li> 
  </ul> 
  <p>To use the <strong>Toggle Fields</strong> dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Dynamic Dialog</strong> component with the <strong>Toggle Fields</strong> dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a></li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol>  
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at115518am.png" /> 
  <h3>Custom Widgets</h3> 
  <p>The out-of-the-box widgets shipped with AEM should cover most use cases. However it might be sometimes necessary to create a custom widget to cover a project-specific requirement. Custom widgets can be created by extending existing ones. To help you get started with such customization, the <strong>Using ExtJS Widgets</strong> package includes three dialogs that use three different custom widgets:</p> 
  <ul> 
   <li>the Multi Field dialog (<span class="code">multifield</span> node) displays a window with one tab. The tab has a customized multifield widget that has two fields: a drop-down menu with two options and a text field. As it is based on the out-of-the-box <span class="code">multifield</span> widget (that only has a text field), it has all the features of the <span class="code">multifield</span> widget.</li> 
   <li>the Tree Browse dialog (<span class="code">treebrowse</span> node) displays a window with one tab containing a path browse widget: when you click the arrow, a window opens up in which you can browse a hierarchy and select an item. The path of the item is then added to the path field and is persisted when the dialog is closed.</li> 
   <li>a Rich Text Editor Plug-in based dialog (<span class="code">rteplugin</span> node) that adds a custom button to the Rich Text Editor to insert some custom text to the main text. It consists of a <span class="code">richtext</span> widget (RTE) and of a custom feature which is added through the RTE plug-in mechanism.</li> 
  </ul> 
  <p>The custom widgets and the plugin are included in the component called <strong>3. Custom Widgets</strong> of the <strong>Using ExtJS Widgets</strong> package. To include this component to the sample page:</p> 
  <ol> 
   <li>Add the <strong>3. Custom Widgets</strong> component to the sample page from the <strong>Using ExtJS Widgets</strong> tab in the <strong>Sidekick</strong>.</li> 
   <li>The component displays a title, some text and, when clicking the <strong>PROPERTIES</strong> link, the properties of the paragraph stored in the repository. Clicking again hides the properties.<br /> The component displays as follows:</li> 
  </ol> 
  <img imageRotate="0" src="assets/chlimage_1-148.png" /> 
  <h4>Example 1: Custom Multifield Widget</h4> 
  <p>The <strong>Custom Multifield</strong> widget based dialog displays a window with one tab. The tab has a customized multifield widget that, unlike the standard one which has one field, has two fields: a drop-down menu with two options and a text field.</p> 
  <p>The <strong>Custom Multifield</strong> widget based dialog:<br /> </p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 1 tabpanel widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#tabpanel">tabpanel</a></span>) containing a panel (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#panel">panel</a></span>).<br /> </li> 
   <li>The panel has a <span class="code">multifield</span> widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#multifield">multifield</a></span>).</li> 
   <li>The <span class="code">multifield</span> widget has a fieldconfig (node type = <span class="code">nt:unstructured</span>, xtype = <span class="code">ejstcustom</span>, optionsProvider = <span class="code">Ejst.x3.provideOptions</span>) that is based on the custom xtype '<span class="code">ejstcustom</span>':<br /> 
    <ul> 
     <li>'<span class="code">fieldconfig</span>' is a config option of the <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.MultiField">CQ.form.MultiField</a></span> object.<br /> </li> 
     <li>'<span class="code">optionsProvider</span>' is a configuration of the <span class="code">ejstcustom</span> widget. It is set with the <span class="code">Ejst.x3.provideOptions</span> method which is defined in <span class="code">exercises.js</span> at:<br /> <span class="code">/apps/extjstraining/clientlib/js/exercises.js</span><br /> and returns 2 options.<br /> </li> 
    </ul> </li> 
   <li>Is defined by the <span class="code">multifield</span> node at:<br /> <span class="code">/apps/extjstraining/components/customwidgets/multifield</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/customwidgets/multifield.-1.json</span></li> 
  </ul> 
  <p>The custom multifield widget (xtype = <span class="code">ejstcustom</span>):<br /> </p> 
  <ul> 
   <li>Is a javascript object called <span class="code">Ejst.CustomWidget</span>.<br /> </li> 
   <li>Is defined in the <span class="code">CustomWidget.js</span> javascript file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/CustomWidget.js</span></li> 
   <li>Extends the <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.CompositeField">CQ.form.CompositeField</a></span> widget.<br /> </li> 
   <li>Has 3 fields: <span class="code">hiddenField</span> (Textfield), <span class="code">allowField</span> (ComboBox) and <span class="code">otherField</span> (Textfield)</li> 
   <li>Overrides <span class="code">CQ.Ext.Component#initComponent</span> to add the 3 fields:<br /> 
    <ul> 
     <li><span class="code">allowField</span> is a <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.Selection">CQ.form.Selection</a> object of type 'select'. optionsProvider is a configuration of the Selection object that is instantiated with the optionsProvider configuration of the CustomWidget defined in the dialog</li> 
     <li><span class="code">otherField</span> is a <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.form.TextField">CQ.Ext.form.TextField</a> object</li> 
    </ul> </li> 
   <li>Overrides the methods <span class="code">setValue</span>, <span class="code">getValue</span> and <span class="code">getRawValue</span> of <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.CompositeField">CQ.form.CompositeField</a> in order to set and retrieve the value of CustomWidget with the format:<br /> <span class="code">&amp;lt;allowField value&amp;gt;/&amp;lt;otherField value&amp;gt;, e.g.: 'Bla1/hello'</span>.</li> 
   <li>Registers itself as '<span class="code">ejstcustom</span>' xtype:<br /> <span class="code">CQ.Ext.reg('ejstcustom', Ejst.CustomWidget);</span></li> 
  </ul> 
  <p>The <strong>Custom Multifield</strong> widget based dialog displays as follows:<br /> </p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at115840am.png" /> 
  <h4>Example 2: Custom Treebrowse Widget</h4> 
  <p>The custom <strong>Treebrowse</strong> widget based dialog displays a window with one tab containing a custom path browse widget: when you click the arrow, a window opens up in which you can browse a hierarchy and select an item. The path of the item is then added to the path field and is persisted when the dialog is closed.</p> 
  <p>The custom treebrowse dialog:</p> 
  <ul> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#dialog">dialog</a></span>).<br /> </li> 
   <li>Displays 1 tabpanel widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#tabpanel">tabpanel</a></span>) containing a panel (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#panel">panel</a></span>).<br /> </li> 
   <li>The panel has a custom widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code">ejstbrowse</span>)</li> 
   <li>Is defined by the <span class="code">treebrowse</span> node at:<br /> <span class="code">/apps/extjstraining/components/customwidgets/treebrowse</span></li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/customwidgets/treebrowse.-1.json</span></li> 
  </ul> 
  <p>The custom treebrowse widget (xtype = <span class="code">ejstbrowse</span>):</p> 
  <ul> 
   <li>Is a javascript object called <span class="code">Ejst.CustomWidget</span>.</li> 
   <li>Is defined in the <span class="code">CustomBrowseField.js</span> javascript file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/CustomBrowseField.js</span><br /> </li> 
   <li>Extends <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.form.TriggerField">CQ.Ext.form.TriggerField</a></span>.</li> 
   <li>Defines a browse window called <span class="code">browseWindow</span>.<br /> </li> 
   <li>Overrides <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.form.TriggerField">CQ.Ext.form.TriggerField</a>#onTriggerClick</span> to show the browse window when the arrow is clicked.</li> 
   <li>Defines a <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.tree.TreePanel">CQ.Ext.tree.TreePanel</a> object:<br /> 
    <ul> 
     <li>It gets its data by calling the servlet registered at<span class="code"> /bin/wcm/siteadmin/tree.json</span>.</li> 
     <li>Its root is "<span class="code">apps/extjstraining</span>".</li> 
    </ul> </li> 
   <li>Defines a <span class="code">window</span> object (<span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.Window">CQ.Ext.Window</a></span>): 
    <ul> 
     <li>Based on the pre-defined panel.</li> 
     <li>Has an <strong>OK</strong> button that sets the value of the selected path and hides the panel.<br /> </li> 
    </ul> </li> 
   <li>The window is anchored below the <strong>Path</strong> field.</li> 
   <li>The selected path is passed from the browse field to the window on <span class="code">show</span> event.<br /> </li> 
   <li>Registers itself as '<span class="code">ejstbrowse</span>' xtype:<br /> <span class="code">CQ.Ext.reg('ejstbrowse', Ejst.CustomBrowseField);</span><br /> </li> 
  </ul> 
  <p>To use the <strong>Custom Treebrowse</strong> widget based dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Custom Widgets</strong> component with the <strong>Custom Treebrowse</strong> dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a></li> 
   <li>Edit the component: the dialog displays as follows:</li> 
  </ol> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at120104pm.png" /> 
  <h4>Example 3: Rich Text Editor (RTE) Plug-In</h4> 
  <p>The <strong>Rich Text Editor (RTE) Plug-in</strong> based dialog is a Rich Text Editor based dialog that has a custom button to insert some custom text within square brackets. The custom text can be parsed by some server-side logic (not implemented in this example), for example to add some text that is defined at the given path:<br /> </p> 
  <p>The <strong>RTE plugin</strong> based dialog:</p> 
  <ul> 
   <li>Is defined by the rteplugin node at:<br /> <span class="code">/apps/extjstraining/components/customwidgets/rteplugin</span><br /> </li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/customwidgets/rteplugin.-1.json</span></li> 
   <li>The <span class="code">rtePlugins</span> node has a child node <span class="code">inserttext</span> (node type = <span class="code">nt:unstructured</span>) that is named after the plugin. It has a property called <span class="code">features</span>, that defines which of the plugin features are available to the RTE.</li> 
  </ul> 
  <p>The RTE plugin:</p> 
  <ul> 
   <li>Is a javascript object called <span class="code">Ejst.InsertTextPlugin</span>.<br /> </li> 
   <li>Is defined in the <span class="code">InsertTextPlugin.js</span> javascript file at:<br /> <span class="code">/apps/extjstraining/clientlib/js/InsertTextPlugin.js</span><br /> </li> 
   <li>Extends the <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.rte.plugins.Plugin">CQ.form.rte.plugins.Plugin</a></span> object.</li> 
   <li>The following methods define the <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.form.rte.plugins.Plugin">CQ.form.rte.plugins.Plugin</a></span> object and are overridden in the implementing plugin: 
    <ul> 
     <li><span class="code">getFeatures()</span> returns an array of all the features that the plugin makes available.</li> 
     <li><span class="code">initializeUI()</span> adds the new button to the RTE toolbar.</li> 
     <li><span class="code">notifyPluginConfig()</span> displays title and text when the button is hovered.</li> 
     <li><span class="code">execute()</span> is called when the button is clicked and performs the plugin action: it displays a window that is used to define the text to be included.<br /> </li> 
    </ul> </li> 
   <li><span class="code">insertText()</span> inserts a text using the corresponding dialog object <span class="code">Ejst.InsertTextPlugin.Dialog</span> (see afterwards).<br /> </li> 
   <li><span class="code">executeInsertText()</span> is called by the <span class="code">apply()</span> method of the dialog, which is triggered when the <strong>OK</strong> button is clicked.<br /> </li> 
   <li>Registers itself as '<span class="code">inserttext</span>' plugin:<br /> <span class="code">CQ.form.rte.plugins.PluginRegistry.register("inserttext", Ejst.InsertTextPlugin);</span></li> 
   <li>the <span class="code">Ejst.InsertTextPlugin.Dialog</span> object defines the dialog that is opened when the plugin button is clicked. The dialog consists of a panel, a form, a textfield and 2 buttons (<strong>OK</strong> and <strong>Cancel</strong>).<br /> </li> 
  </ul> 
  <p>To use the <strong>Rich Text Editor (RTE) Plug-in</strong> based dialog:</p> 
  <ol> 
   <li>Replace the dialog of the <strong>Custom Widgets</strong> component with the <strong>Rich Text Editor (RTE) Plug-in</strong> based dialog:<br /> follow the steps described for the <a href="#example2singlepaneldialog">Example 2: Single Panel Dialog</a></li> 
   <li>Edit the component.</li> 
   <li>Click the the last icon on the right (the one with four arrows). Enter a path and click <strong>OK</strong>:<br /> The path is displayed within brackets ([ ]).</li> 
   <li>Click <strong>OK</strong> to close the Rich Text Editor.</li> 
  </ol> 
  <p>The <strong>Rich Text Editor (RTE) Plug-in</strong> based dialog displays as follows:</p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at120254pm.png" /> 
  <note> 
   <p>This example only shows how to implement the client-side part of the logic: the placeholders (<i>[text]</i>) have then to be parsed on the server-side explicitly (e.g. in the component JSP).<br /> </p> 
  </note> 
  <h3>Tree Overview</h3> 
  <p>The out-of-the-box <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.tree.TreePanel">CQ.Ext.tree.TreePanel</a></span> object provides tree-structured UI representation of tree-structured data. The Tree Overview component included in the <strong>Using ExtJS Widgets</strong> package shows how to use the <span class="code">TreePanel</span> object to display a JCR tree below a given path. The window itself can be docked/undocked. In this example, the window logic is embedded in the component jsp between &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt; tags.<br /> </p> 
  <p>To include the <strong>Tree Overview</strong> component to the sample page:</p> 
  <ol> 
   <li>Add the <strong>4. Tree Overview</strong> component to the sample page from the <strong>Using ExtJS Widgets</strong> tab in the <strong>Sidekick</strong>.</li> 
   <li>The component displays: 
    <ul> 
     <li>a title, with some text</li> 
     <li>a <strong>PROPERTIES</strong> link: click to display the properties of the paragraph stored in the repository. Click again to hide the properties.</li> 
     <li>a floating window with a tree representation of the repository, that can be expanded.</li> 
    </ul> </li> 
  </ol> 
  <p>The component displays as follows:</p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at120639pm.png" /> 
  <p>The Tree Overview component:</p> 
  <ul> 
   <li>Is defined at:<br /> <span class="code">/apps/extjstraining/components/treeoverview</span></li> 
   <li>Its dialog enables to set the size of the window and to dock/undock the window (see details below).</li> 
  </ul> 
  <p>The component jsp:</p> 
  <ul> 
   <li>Retrieves the width, heigth and docked properties from the repository.</li> 
   <li>Displays some text about the tree overview data format.</li> 
   <li>Embeds the window logic in the component jsp between javascript tags.</li> 
   <li>Is defined at:<br /> <span class="code">apps/extjstraining/components/treeoverview/content.jsp</span></li> 
  </ul> 
  <p>The javascript code embedded in the component jsp:<br /> </p> 
  <ul> 
   <li>Defines a <span class="code">tree</span> object by trying to retrieve a tree window from the page.<br /> </li> 
   <li>If the window displaying the tree does not exist, <span class="code">treePanel</span> (<a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.tree.TreePanel">CQ.Ext.tree.TreePanel</a>) is created: 
    <ul> 
     <li><span class="code">treePanel</span> contains the data that is used to create the window.<br /> </li> 
     <li>The data are retrieved by calling the servlet registered at:<br /> <span class="code">/bin/wcm/siteadmin/tree.json</span><br /> </li> 
    </ul> </li> 
   <li>The <span class="code">beforeload</span> listener makes sure the clicked node is loaded.</li> 
   <li>The <span class="code">root</span> object sets the path <span class="code">apps/extjstraining</span> as the tree root.</li> 
   <li><span class="code">tree</span> (<span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.Window">CQ.Ext.Window</a></span>) is set based on the pre-defined <span class="code">treePanel</span>, and is displayed with:<br /> <span class="code">tree.show();</span></li> 
   <li>If the window already exists, it is displayed based on the width, heigth and docked properties retrieved from the repository.</li> 
  </ul> 
  <p>The component dialog:<br /> </p> 
  <ul> 
   <li>Displays 1 tab with 2 fields to set the size (width and heigth) of the tree overview window and 1 field to dock/undock the window</li> 
   <li>Is defined by a node (node type = <span class="code">cq:Dialog</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#panel">panel</a></span>).<br /> </li> 
   <li>The panel has a sizefield widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#sizefield">sizefield</a></span>) and a selection widget (node type = <span class="code">cq:Widget</span>, xtype = <span class="code"><a href="../../../sites/developing/using/xtypes.md#selection">selection</a></span>, type = <span class="code">radio</span>) with 2 options (true/false)<br /> </li> 
   <li>Is defined by the dialog node at:<br /> <span class="code">/apps/extjstraining/components/treeoverview/dialog</span><br /> </li> 
   <li>Is rendered in json format by requesting:<br /> <span class="code">http://localhost:4502/apps/extjstraining/components/treeoverview/dialog.-1.json</span></li> 
   <li><span class="code"></span>Displays as follows:<br /> </li> 
  </ul> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at120745pm.png" /> 
  <h3>Grid Overview</h3> 
  <p>A Grid Panel represents data in a tabular format of rows and columns. It is composed of the following:</p> 
  <ul> 
   <li>Store : the model holding the data records (rows).<br /> </li> 
   <li>Column model : the column makeup.<br /> </li> 
   <li>View : encapsulates the user interface.<br /> </li> 
   <li>Selection model : the selection behavior.</li> 
  </ul> 
  <p>The Grid Overview component included in the <strong>Using ExtJS Widgets</strong> package shows how to display data in a tabular format:</p> 
  <ul> 
   <li>The example 1 uses static data.<br /> </li> 
   <li>The example 2 uses data retrieved from the repository.</li> 
  </ul> 
  <p>To include the Grid Overview component to the sample page:</p> 
  <ol> 
   <li>Add the <strong>5. Grid Overview</strong> component to the sample page from the <strong>Using ExtJS Widgets</strong> tab in the <strong>Sidekick</strong>.</li> 
   <li>The component displays: 
    <ul> 
     <li> a title with some text<br /> </li> 
     <li>a <strong>PROPERTIES</strong> link: click to display the properties of the paragraph stored in the repository. Click again to hide the properties.</li> 
     <li>a floating window containing data in tabular format.</li> 
    </ul> </li> 
  </ol> 
  <p>The component displays as follows:</p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at121109pm.png" /> 
  <h4>Example 1: Default Grid</h4> 
  <p>In its out-of-the-box version, the <strong>Grid Overview</strong> component displays a window with static data in a tabular format. In this example, the logic is embedded in the component jsp in two ways:</p> 
  <ul> 
   <li>the generic logic is defined between &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt; tags</li> 
   <li>the specific logic is available in a separate .js file and is linked to in the jsp. This setup enables to easily switch between the two logic (static/dynamic) by commenting the desired &amp;lt;script&amp;gt; tags.<br /> </li> 
  </ul> 
  <p>The Grid Overview component:</p> 
  <ul> 
   <li>Is defined at:<br /> <span class="code">/apps/extjstraining/components/gridoverview</span></li> 
   <li>Its dialog enables to set the size of the window and to dock/undock the window.</li> 
  </ul> 
  <p>The component jsp:</p> 
  <ul> 
   <li>Retrieves the width, heigth and docked properties from the repository.</li> 
   <li>Displays some text as introduction to the grid overview data format.</li> 
   <li>References javascript code that defines the GridPanel object:<br /> <span class="code">&amp;lt;script type="text/javascript" src="/apps/extjstraining/components/gridoverview/defaultgrid.js"&amp;gt;&amp;lt;/script&amp;gt;</span><br /> <span class="code">defaultgrid.js</span> defines some static data as a base for the GridPanel object.<br /> </li> 
   <li>Embeds javascript code between javascript tags that defines the Window object consuming the GridPanel object.<br /> </li> 
   <li>Is defined at:<br /> <span class="code">apps/extjstraining/components/gridoverview/content.jsp</span></li> 
  </ul> 
  <p>The javascript code embedded in the component jsp:</p> 
  <ul> 
   <li>Defines the <span class="code">grid</span> object by trying to retrieve the window component from the page:<br /> <span class="code">var grid = CQ.Ext.getCmp("&amp;lt;%= node.getName() %&amp;gt;-grid");</span></li> 
   <li>If <span class="code">grid</span> does not exist, a <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.GridPanel">CQ.Ext.grid.GridPanel</a> object (<span class="code">gridPanel</span>) is defined by calling the <span class="code">getGridPanel()</span> method (see below). This method is defined in <span class="code">defaultgrid.js</span>.</li> 
   <li><span class="code">grid</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.Window">CQ.Ext.Window</a></span> object, based on the pre-defined GridPanel, and is displayed: <span class="code">grid.show();</span></li> 
   <li>If <span class="code">grid</span> already exists, it is displayed based on the width, heigth and docked properties retrieved from the repository.</li> 
  </ul> 
  <p> </p> 
  <p>The javascript file (<span class="code">defaultgrid.js</span>) referenced in the component jsp defines the <span class="code">getGridPanel()</span> method which is called by the script embedded in the JSP and returns a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.GridPanel">CQ.Ext.grid.GridPanel</a></span> object, based on static data. The logic is as follows:</p> 
  <ul> 
   <li><span class="code">myData</span> is an array of static data formatted as a table of 5 columns and 4 rows.</li> 
   <li><span class="code">store</span> is a <span class="code">CQ.Ext.data.Store</span> object that consumes <span class="code">myData</span>.</li> 
   <li><span class="code">store</span> is loaded in memory:<br /> <span class="code">store.load();</span></li> 
   <li><span class="code">gridPanel</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.GridPanel">CQ.Ext.grid.GridPanel</a></span> object that consumes <span class="code">store</span>: 
    <ul> 
     <li> the column widths are re-proportioned at all times:<br /> <span class="code">forceFit: true</span></li> 
     <li>only one row at a time can be selected:<br /> <span class="code">singleSelect:true</span><br /> </li> 
    </ul> </li> 
  </ul> 
  <p> </p> 
  <h4>Example 2: Reference Search Grid</h4> 
  <p>When you install the package, the <span class="code">content.jsp</span> of the <strong>Grid Overview</strong> component displays a grid that is based on static data. It is possible to modify the component to display a grid with the following characteristics:</p> 
  <ul> 
   <li>Has three columns.</li> 
   <li>Is based on data retrieved from the repository by calling a servlet.</li> 
   <li>The cells of the last column can be edited. The value is persisted in a <span class="code">test</span> property below the node defined by the path displayed in the first column.</li> 
  </ul> 
  <p>As explained in the section before, the window object gets its <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.GridPanel">CQ.Ext.grid.GridPanel</a></span> object by calling the <span class="code">getGridPanel()</span> method defined in the <span class="code">defaultgrid.js</span> file at <span class="code">/apps/extjstraining/components/gridoverview/defaultgrid.js</span>. The <strong>Grid Overview </strong>component provides a different implementation for the <span class="code">getGridPanel()</span> method, defined in the <span class="code">referencesearch.js</span> file at <span class="code">/apps/extjstraining/components/gridoverview/referencesearch.js</span>. By switching the .js file that is referenced in the component jsp, the grid will be based on data retrieved from the repository.<br /> </p> 
  <p>Switch the .js file that is referenced in the component jsp:<br /> </p> 
  <ol> 
   <li>In <strong>CRXDE Lite</strong>, in the <span class="code">content.jsp</span> file of the component, comment the line that includes the <span class="code">defaultgrid.js</span> file, so that it looks as follows:<br /> <span class="code">&amp;lt;!-- script type="text/javascript" src="/apps/extjstraining/components/gridoverview/defaultgrid.js"&amp;gt;&amp;lt;/script--&amp;gt;</span></li> 
   <li>Remove the comment from the line that includes the <span class="code">referencesearch.js</span> file, so that it looks as follows:<br /> <span class="code">&amp;lt;script type="text/javascript" src="/apps/extjstraining/components/gridoverview/referencesearch.js"&amp;gt;&amp;lt;/script&amp;gt;</span></li> 
   <li>Save the changes.</li> 
   <li>Refresh the sample page.</li> 
  </ol> 
  <p>The component displays as follows:</p> 
  <img imageRotate="0" src="assets/screen_shot_2012-02-01at121429pm.png" /> 
  <p>The javascript code referenced in the component jsp (<span class="code">referencesearch.js</span>) defines the <span class="code">getGridPanel()</span> method called from the component jsp and returns a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.GridPanel">CQ.Ext.grid.GridPanel</a></span> object, based on data that are dynamically retrieved from the repository. The logic in <span class="code">referencesearch.js</span> defines some dynamic data as a base for the GridPanel:</p> 
  <ul> 
   <li><span class="code">reader</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.data.JsonReader">CQ.Ext.data.JsonReader</a> </span>object that reads the servlet response in json format for 3 columns.</li> 
   <li><span class="code">cm</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.ColumnModel">CQ.Ext.grid.ColumnModel</a></span> object for 3 columns.<br /> The "Test" column cells can be edited as they are defined with an editor:<br /> <span class="code">editor: new <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.form.TextField">CQ.Ext.form.TextField</a>({})</span><br /> </li> 
   <li>the columns are sortable:<br /> <span class="code">cm.defaultSortable = true;</span></li> 
   <li><span class="code">store</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.data.GroupingStore">CQ.Ext.data.GroupingStore</a></span> object: 
    <ul> 
     <li>it gets its data by calling the servlet registered at "<span class="code">/bin/querybuilder.json</span>" with a few parameters used to filter the query</li> 
     <li>it is based on <span class="code">reader</span>, defined beforehand</li> 
     <li>the table is sorted according to the '<strong>jcr:path</strong>' column in ascending order</li> 
    </ul> </li> 
   <li><span class="code">gridPanel</span> is a <span class="code"><a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.EditorGridPanel">CQ.Ext.grid.EditorGridPanel</a></span> object that can be edited: 
    <ul> 
     <li>it is based on the pre-defined <span class="code">store</span> and on the column model <span class="code">cm</span><br /> </li> 
     <li>only one row at a time can be selected:<br /> <span class="code">sm: new <a href="/sites/developing/using/reference-materials/widgets-api/index.html?class=CQ.Ext.grid.RowSelectionModel">CQ.Ext.grid.RowSelectionModel</a>({singleSelect:true})</span><br /> </li> 
     <li>the <span class="code">afteredit</span> listener makes sure that after a cell in the "<strong>Test</strong>" column has been edited: 
      <ul> 
       <li>the property '<span class="code">test</span>' of the node at the path defined by the "<strong>jcr:path</strong>" column is set in the repository with the value of the cell</li> 
       <li>if the POST is successful, the value is added to the <span class="code">store</span> object, otherwise it is rejected</li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
 </body> 
</html>