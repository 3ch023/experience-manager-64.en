<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-01-18T09:24:26.116-0500" name="publishExternalDate" /> 
  <meta content="Page Templates - Editable " name="jcr:title" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="2018-01-19T19:03:42.438-0500" name="jcr:created" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:platform;content_type:reference" name="cq:tags" /> 
  <meta content="jsyal" name="cq:lastReplicatedBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="/content/docs/en/aem/6-3/develop/templates/page-templates-editable" name="qaNotes" /> 
  <meta content="2017-10-31T16:16:22.830-0400" name="firstPublishExternalDate" /> 
  <meta content="bohnert" name="cq:lastModifiedBy" /> 
  <meta content="2018-01-18T09:24:26.116-0500" name="topicBrowsingSortDate" /> 
  <meta content="2018-10-27T23:47:36.213-0400" name="cq:lastReplicated" /> 
  <meta content="2018-01-18T09:24:26.116-0500" name="lastPublishExternalDate" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/page-templates-editable.html" name="publishExternalURL" /> 
  <meta content="2018-05-08T12:44:41.776-0400" name="locHandOffDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="6e37ae2a-2e85-4849-916d-cdd973c3d281" name="jcr:uuid" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform;/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform" name="moreHelpPaths" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="Page Templates - Editable " name="seoTitle" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="Page Templates - Editable " name="navTitle" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2018-05-08T12:44:41.777-0400" name="cq:lastModified" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="f461eafd-a848-44ec-bd31-56b25e4f1a62" name="jcr:predecessors" /> 
  <meta content="Editable templates have been introduced to, allow non-developers to create and edit templates, provide templates that retain a dynamic connection to any pages created from them, and make the page component more generic" name="seoDescription" /> 
 </head> 
 <body> 
  <p>Editable templates have been introduced to:</p> 
  <ul> 
   <li>Allow specialized authors to <a href="../../../sites/authoring/using/templates.md">create and edit templates</a>. 
    <ul> 
     <li>Such specialized authors are called <strong>template authors</strong></li> 
     <li>Template authors must be members of the <span class="code">template-authors</span> group.</li> 
    </ul> </li> 
   <li>Provide templates that retain a dynamic connection to any pages created from them. This ensures that any changes to the template are reflected in the pages themselves.</li> 
   <li>Make the page component more generic so the core page component can be used without customization.</li> 
  </ul> 
  <p>With editable templates, the pieces that make a page are isolated within components. You can configure the necessary combinations of components in a UI, thereby eliminating the need for a new page component to be developed for each page variation.</p> 
  <note> 
   <p><a href="../../../sites/developing/using/page-templates-static.md">Static templates</a> are also available.</p> 
  </note> 
  <p>This document:</p> 
  <ul> 
   <li>Gives an overview of creating editable templates 
    <ul> 
     <li>For details see <a href="../../../sites/authoring/using/templates.md">Creating Page Templates</a></li> 
    </ul> </li> 
   <li>Describes the admin/developer tasks required to create editable templates</li> 
   <li>Describes the technical underpinnings of editable templates</li> 
  </ul> 
  <p>This document assumes that you are already familiar with creating and editing templates. See the authoring document <a href="../../../sites/authoring/using/templates.md">Creating Page Templates</a>, which details the capabilities of editable templates as exposed to the template author.<br /> </p> 
  <note> 
   <p>Following tutorial might also be of interest for setting up an editable page template in a new project:<br /> <a href="/content/help/en/experience-manager/kt/sites/using/getting-started-wknd-tutorial-develop/part2">Getting Started with AEM Sites Part 2 - Creating a Base Page and Template</a></p> 
  </note> 
  <h2>Creating a New Template</h2> 
  <p>Creating editable templates is primarily done with the <a href="../../../sites/authoring/using/templates.md">template console and template editor</a> by a template author. This section gives an overview of this process and follows with a description of what occurs at a technical level.</p> 
  <p>For information on how to use editable templates in an AEM project see <a href="/content/help/en/experience-manager/using/aem_lazybones">Creating an AEM project using Lazybones</a>.</p> 
  <p>When creating a new editable template you:</p> 
  <ol> 
   <li><p>Create a <a href="#templatefolders">folder for the templates</a>. This is not mandatory, but is recommended best practice.</p> </li> 
   <li><p>Select a <a href="#templatetype">template type</a>. This is copied to create the <a href="#templatedefinitions">template definition</a>.</p> 
    <note> 
     <p>A selection of template types are provided out-of-the-box. You can also <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-42ef">create your own site-specific template types</a> if required.</p> 
    </note></li> 
   <li><p>Configure the structure, content policies, initial content, and layout of the new template.</p>  
    <ul> 
     <li>The structure allows you define components and content for your template.</li> 
     <li>Components defined in the template structure cannot be moved on a resulting page nor deleted from any resulting pages. 
      <ul> 
       <li>If you are creating a template in a custom folder outside of the We.Retail sample content, you can choose Foundation Components or use <a href="/content/help/en/experience-manager/core-components/using/developing">Core Components</a>.</li> 
      </ul> </li> 
     <li>If you want page authors to be able to add and remove components, add a paragraph system to the template.</li> 
     <li>Components can be unlocked and locked again to allow you to define initial content.</li> 
    </ul> <p>For details on how a template author defines the structure, see <a href="../../../sites/authoring/using/templates.md#main-pars-title-1754153843">Creating Page Templates</a>.</p> <p>For technical deatils of the structure, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title">Structure</a> in this document. </p>  
    <ul> 
     <li>The content policies define the design properties of a component. 
      <ul> 
       <li>For example, the components available or minimum/maximum dimensions.</li> 
      </ul> </li> 
     <li>These are applicable to the template (and pages created with the template).</li> 
    </ul> <p>For details on how a template author defines policies, see <a href="../../../sites/authoring/using/templates.md#main-pars-title-1754153843">Creating Page Templates</a>.</p> <p>For technical deatil of policies, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1229629872">Content Policies</a> in this document.</p>  
    <ul> 
     <li>Initial Content defines content that will appear when a page is first created based on the template.</li> 
     <li>Initial content can then be edited by page authors.</li> 
    </ul> <p>For details on how a template author defines the structure, see <a href="../../../sites/authoring/using/templates.md#main-pars-title-1266227611">Creating Page Templates</a>.</p> <p>For technical details on initial content, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-2033911382">Initial Content</a> in this document.</p>  
    <ul> 
     <li>You can define the template layout for a range of devices.</li> 
     <li>Responsive layout for templates operates as it does for page authoring.</li> 
    </ul> <p>For details on how a template author defines the template layout, see <a href="../../../sites/authoring/using/templates.md#main-pars-title">Creating Page Templates</a>.</p> <p>For technical details on template layout, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-514933864">Layout</a> in this document.</p> </li> 
   <li><p>Enable the template, then allow it for specific content trees.</p> 
    <ul> 
     <li>A template can be enabled or disabled to make it available or unavailable to page authors.</li> 
     <li>A template can be made available or unavailable for certain page branches.</li> 
    </ul> <p>For details on how a template author enables a template, see <a href="../../../sites/authoring/using/templates.md#main-pars-title-663293913">Creating Page Templates</a>.</p> <p>For technical deatils on enabling a template, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1542123978">Enabling and Allowing a Template for Us</a>e in this document</p> </li> 
   <li><p>Use it to create content pages.</p> 
    <ul> 
     <li>When using a template to create a new page there is no visible difference and no indication between static and editable templates. </li> 
     <li>For the page author, the process is transparent.</li> 
    </ul> <p>For details on how a page author uses templates to create a page, see <a href="../../../sites/authoring/using/managing-pages.md#main-pars-title-1">Creating and Organizing Pages</a>.</p> <p>For technical details on creating pages with editable templates, see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1300723715">Resultant Content Pages</a> in this document.</p> </li> 
  </ol> 
  <note> 
   <p>The editor client library assumes the presence of the <span class="code">cq.shared</span> namespace in content pages, and if it is absent the JavaScript error <span class="code">Uncaught TypeError: Cannot read property 'shared' of undefined</span> will result.</p> 
   <p>All sample content pages contain <span class="code">cq.shared</span>, so any content based on them automatically includes <span class="code">cq.shared</span>. However, if you decide to create your own content pages from scratch without basing them on sample content, you must make sure to include the <span class="code">cq.shared</span> namespace.</p> 
   <p>See <a href="../../../sites/developing/using/clientlibs.md">Using Client-Side Libraries</a> for further information.</p> 
  </note> 
  <note> 
   <p>Never enter any information that needs to be <a href="../../../sites/developing/using/i18n.md">internationalized</a> into a template.</p> 
  </note> 
  <h2>Template Folders</h2> 
  <p>For organizing your templates you can use the following folders:</p> 
  <ul> 
   <li><strong>global</strong></li> 
   <li>Site-specific<br /> The site-specific folders that you create to organize your templates are created with an account holding admin priviliges.</li> 
  </ul> 
  <note> 
   <p>Even though you can nest your folders, when the user views them in the <strong>Templates</strong> console they are presented as a flat structure.</p> 
  </note> 
  <p>In a standard AEM instance the <strong>global</strong> folder already exists in the template console. This holds default templates and acts as a fallback if no policies and/or template-types are found in the current folder. You can add your default templates to this folder or create a new folder (recommended).</p> 
  <note> 
   <p>It is best practice to create a new folder to hold your customized templates and not to use the global folder.</p> 
  </note> 
  <note> 
   <p>Folders must be created by a user with <span class="code">admin</span> rights.</p> 
  </note> 
  <p>Template types and policies are inherited across all folders according to the following order of precedence:<br /> </p> 
  <ol> 
   <li>The current folder.</li> 
   <li>Parent(s) of the current folder.</li> 
   <li><span class="code">/conf/global</span></li> 
   <li><span class="code">/apps</span></li> 
   <li><span class="code">/libs</span></li> 
  </ol> 
  <p>A list of all allowed entries is created. If any configurations overlap (<span class="code">path</span>/<span class="code">label</span>), only the instance closest to the current folder is presented to the user.</p> 
  <p>To create a new folder, you can either do this:</p> 
  <ul> 
   <li>Programmatically or with CRXDE Lite</li> 
   <li>Using the Configuration Browser</li> 
  </ul> 
  <h4>Using CRXDE Lite</h4> 
  <ol> 
   <li><p>A new folder (under /conf) can be created for your instance either programmatically or with CRXDE Lite.</p> <p>The following structure must be used:</p> 
    <codeblock class="syntax xml">
      /conf!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;your-folder-name&gt;&amp;nbsp;[sling:Folder]!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;settings&amp;nbsp;[sling:Folder]!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wcm&amp;nbsp;[cq:Page]!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;templates&amp;nbsp;[cq:Page]!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;policies&amp;nbsp;[cq:Page] 
    </codeblock></li> 
   <li><p>You can then define the following properties on the folder root node:</p>  <p>Name: <span class="code">jcr:title</span><br /> </p> 
    <ul> 
     <li>Type: <span class="code">String</span><br /> </li> 
     <li>Value: The title (for the folder) you want to appear in the <strong>Templates</strong> console.</li> 
    </ul> </li> 
   <li><p>In <i>addition</i> to the standard authoring permissions and privileges (e.g. <span class="code">content-authors</span>) you now need to assign group(s) and define the required access rights (ACLs) for your authors to be able to create templates in the new folder. </p> <p>The <span class="code">template-authors</span> group is the default group that needs to be assigned. See the following section <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1739798510">ACLs and Groups</a> for details.</p> <p>See <a href="../../../sites/administering/using/user-group-ac-admin.md#accessrightmanagement">Access Right Management</a> for full details on managing and assigning access rights. </p> </li> 
  </ol> 
  <h4>Using the Configuration Browser</h4> 
  <ol> 
   <li><p>Go to <strong>Global Navigation</strong> -&amp;gt; <strong>Tools</strong> &amp;gt; <strong>Configuration Browser</strong>.</p> <p>The existing folders are listed to the left including the <strong>globa</strong>l folder.</p>  </li> 
   <li><p>Click <strong>Create</strong>.</p> </li> 
   <li><p>In the <strong>Create Configuration</strong> dialog the following fields need to be configured:</p> 
    <ul> 
     <li><strong>Title</strong>: Provide a title for the configuration folder</li> 
     <li><strong>Editable Templates</strong>: Tick to allow for editable templates within this folder</li> 
    </ul> </li> 
   <li><p>Click <strong>Create</strong></p> </li> 
  </ol> 
  <note> 
   <p>In the Configuration Browser, you can edit the global folder and activate the <strong>Editable Templates</strong> option if you wish to create templates within this folder, however this is not recommended best practice.</p> 
  </note> 
  <h3>ACLs and Groups</h3> 
  <p>Once your template folders are created (either via CRXDE or with the Configuration Browser), ACLs must defined for the appropriate groups for the template folders to ensure proper security.</p> 
  <p>The template folders for the <a href="../../../sites/developing/using/we-retail.md">We.Retail reference implementation</a> can be used as an example.</p> 
  <h4>The template-authors Group</h4> 
  <p>The <span class="code">template-authors</span> group is the group used to manage access to templates and comes standard with AEM, but is empty. Users must be added to the group for the project/site.</p> 
  <note> 
   <p>The <span class="code">template-authors</span> group is <i>only</i> for users that must be able to create new templates.</p> 
   <p>Editing templates is very powerful and if not done properly exiting templates can be broken. Therefore this role should be focused and only include qualified users.</p> 
  </note> 
  <p>The following table details the necessary permissions for template editing.</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th scope="row">Path</th> 
     <th>Role / Group</th> 
     <th>Permissions<br /> </th> 
     <th scope="col" width="150">Description</th> 
    </tr> 
    <tr> 
     <td rowspan="3"><span class="code">/conf/&lt;<i>your-folder</i>&gt;/settings/wcm/templates</span></td> 
     <td>Template Authors<br /> </td> 
     <td>read, write, replicate</td> 
     <td>Template authors that create, read, update, delete, and replicate templates in site specific <span class="code">/conf</span> space</td> 
    </tr> 
    <tr> 
     <td>Anonymous Web User</td> 
     <td>read</td> 
     <td>Anonymous Web User must read templates while rendering a page</td> 
    </tr> 
    <tr> 
     <td>Content Authors</td> 
     <td>replicate</td> 
     <td>replicateContent authors need to activate the templates of a page when activating a page</td> 
    </tr> 
    <tr> 
     <td rowspan="3"><span class="code">/conf/&lt;<i>your-folder</i>&gt;/settings/wcm/policies</span></td> 
     <td><span class="code">Template Author</span></td> 
     <td>read, write, replicate</td> 
     <td>Template authors that create, read, update, delete, and replicate templates in site specific <span class="code">/conf</span> space</td> 
    </tr> 
    <tr> 
     <td>Annonymous Web User</td> 
     <td>read</td> 
     <td>Anonymous Web User must read policies while rendering a page</td> 
    </tr> 
    <tr> 
     <td>Content Authors</td> 
     <td>replicate</td> 
     <td>Content authors need to activate the policies of a template of a page when activating a page</td> 
    </tr> 
    <tr> 
     <td rowspan="2"><span class="code">/conf/&lt;site&gt;/settings/template-types</span></td> 
     <td>Template Author</td> 
     <td>read</td> 
     <td>Template author creates a new template based on one of the predefined template types.</td> 
    </tr> 
    <tr> 
     <td>Anonymous Web User</td> 
     <td>none</td> 
     <td>Anonymous Web User must not access the template types</td> 
    </tr> 
   </tbody> 
  </table> 
  <p>This default <span class="code">template-authors</span> group only covers the project setups, where all <span class="code">template-authors</span> members are allowed to access and author all templates. For more complex setups, where multiple template authors groups are needed to separate access to templates, more custom template authors groups must be created. However the permissions for the template authors groups would still be the same.</p> 
  <h4>Legacy Templates under /conf/global</h4> 
  <p>Templates should no longer be stored in <span class="code">/conf/global</span>, however for some legacy installations there may still be templates in this location. ONLY in such legacy situations should the following <span class="code">/conf/global</span> paths be explicitly configured.</p> 
  <table border="1" cellpadding="1" cellspacing="0" width="100%"> 
   <tbody> 
    <tr> 
     <th scope="row">Path</th> 
     <th>Role / Group</th> 
     <th>Permissions<br /> </th> 
     <th scope="col" width="150">Description</th> 
    </tr> 
    <tr> 
     <td rowspan="3"><span class="code">/conf/global/settings/wcm/templates</span></td> 
     <td>Template Authors</td> 
     <td>read, write, replicate</td> 
     <td>Template authors that create, read, update, delete, and replicate templates in <span class="code">/conf/global</span></td> 
    </tr> 
    <tr> 
     <td>Anonymous Web User</td> 
     <td>read</td> 
     <td>Anonymous Web User must read templates while rendering a page</td> 
    </tr> 
    <tr> 
     <td>Content Authors</td> 
     <td>replicate</td> 
     <td>Content authors need to activate the templates of a page when activating a page</td> 
    </tr> 
    <tr> 
     <td rowspan="3"><span class="code">/conf/global/settings/wcm/policies</span></td> 
     <td><span class="code">Template Author</span></td> 
     <td>read, write, replicate</td> 
     <td>Template authors that create, read, update, delete, and replicate templates in <span class="code">/conf/global</span></td> 
    </tr> 
    <tr> 
     <td>Anonymous Web User</td> 
     <td>read</td> 
     <td>Anonymous Web User must read policies while rendering a page</td> 
    </tr> 
    <tr> 
     <td>Content Authors</td> 
     <td>replicate</td> 
     <td>Content authors need to activate the policies of a template of a page when activating a page</td> 
    </tr> 
    <tr> 
     <td rowspan="2"><span class="code">/conf/global/settings/wcm/template-types</span></td> 
     <td>Template Author</td> 
     <td>read</td> 
     <td>Template author creates a new template based on one of the predefined template types</td> 
    </tr> 
    <tr> 
     <td>Anonymous Web User</td> 
     <td>none</td> 
     <td>Anonymous Web User must not access the template types</td> 
    </tr> 
   </tbody> 
  </table> 
  <h2>Template Type</h2> 
  <p>When creating a new template you need to specify a template type:</p> 
  <ul> 
   <li>Template types effectively provide templates for a template. When creating a new template the structure and initial content of the selected template type is used to create to the new template. 
    <ul> 
     <li>The template type is copied to create the template.</li> 
     <li>Once the copy has occurred, the only connection between the template and the template type is a static reference for information purposes.</li> 
    </ul> </li> 
   <li>Template types allow you to define: 
    <ul> 
     <li>The resource type of the page component.</li> 
     <li>The policy of the root node, which defines the components allowed in the template editor.</li> 
     <li>It is recommended to define the breakpoints for the responsive grid and setup of the mobile emulator at on the template type. This is optional, because the configuration could also be defined on the individual template (see <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-header">Template Type and Mobile Device Groups</a>).</li> 
    </ul> </li> 
   <li>AEM provides a small selection of out-of-the-box template types such as HTML5 Page and Adaptive Form Page. 
    <ul> 
     <li>Additional examples are provided as a part of the <a href="../../../sites/developing/using/we-retail.md">We.Retail</a> sample content.</li> 
    </ul> </li> 
   <li>Template types are typically defined by developers.</li> 
  </ul> 
  <p>The out-of-the box template types are stored under:</p> 
  <ul> 
   <li><span class="code">/libs/settings/wcm/template-types</span></li> 
  </ul> 
  <note> 
   <p>You must not change anything in the <span class="code">/libs</span> path. This is because the content of <span class="code">/libs</span> is overwritten the next time you upgrade your instance (and may be overwritten when you apply either a hotfix or feature pack).</p> 
  </note>  
  <p>Your site-specific template types should be stored in the comparable location of:</p> 
  <ul> 
   <li><span class="code">/apps/settings/wcm/template-types</span></li> 
  </ul> 
  <p>Definitions for your customized templates types should be stored in user-defined folders (recommended) or alternatively in <span class="code">global</span>. For example:</p> 
  <ul> 
   <li><span class="code">/conf/&amp;lt;<i>my-folder-01</i>&amp;gt;/&amp;lt;<i>my-folder-02</i>&amp;gt;/settings/wcm/template-types</span></li> 
   <li><span class="code">/conf/&amp;lt;<i>my-folder</i>&amp;gt;/settings/wcm/template-types</span></li> 
   <li><span class="code">/conf/global/settings/wcm/template-types</span></li> 
  </ul> 
  <note> 
   <p>The template types have to respect the correct folder structure (i.e. <span class="code">/settings/wcm/...</span>), otherwise the template types will not be found.</p> 
  </note> 
  <h3>Template Type and Mobile Device Groups &lt;br&gt;</h3> 
  <p>The <a href="../../../sites/developing/using/mobile.md#main-pars-title-2">device groups</a> used for an editable template (set as relative path of the property <span class="code">cq:deviceGroups</span>) define which mobile devices are available as emulators in the <a href="../../../sites/authoring/using/responsive-layout.md">layout mode</a> of page authoring. This value can be set in two places:</p> 
  <ul> 
   <li>On the editable template type<br /> </li> 
   <li>On the editable template</li> 
  </ul> 
  <p>When creating a new editable template, the value is copied from the template type to the individual template. If the value is not set on the type, it can be set on the template. Once a template is created, there is no inheritance from the type to the template.<br /> </p> 
  <note> 
   <p>The value of <span class="code">cq:deviceGroups</span> must be set as a relative path such as <span class="code">mobile/groups/responsive</span> and not as an absolute path such as <span class="code">/etc/mobile/groups/responsive</span>.<br /> </p> 
  </note> 
  <note> 
   <p>With <a href="../../../sites/developing/using/page-templates-static.md">static templates</a>, the value of <span class="code">cq:deviceGroups</span> could be set at the root of the site.</p> 
   <p>With editable templates, this value is now stored at the template level and is not supported at the page root level.<br /> </p> 
  </note> 
  <h3>Creating Template Types</h3> 
  <p>If you have created a template that can serve as the basis of other templates, you can copy this template as a template type.</p> 
  <ol> 
   <li><p>Create a template as you would any editable template <a href="../../../sites/authoring/using/templates.md#main-pars-title-1665652500">as documented here</a>, which will serve as the basis of your template type.</p> </li> 
   <li><p>Using CRXDE Lite, copy the newly-created template from the <span class="code">templates</span> node to the <span class="code">template-types</span> node under the <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1575837874">template folder</a>.</p> </li> 
   <li><p>Delete the template from the <span class="code">templates</span> node under the <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1575837874">template folder</a>.</p> </li> 
   <li><p>In the copy of the template that is under the <span class="code">template-types</span> node, delete all <span class="code">cq:template</span> and <span class="code">cq:templateType</span> <span class="code">jcr:content</span> properties.</p> </li> 
  </ol> 
  <p>You can also develop your own template type using an example editable template as a basis, available on GitHub.</p> 
  <p>CODE ON GITHUB</p> 
  <p>You can find the code of this page on GitHub</p> 
  <ul> 
   <li><a href="https://github.com/Adobe-Marketing-Cloud/aem-sites-example-custom-template-type">Open aem-sites-example-custom-template-type project on GitHub</a></li> 
   <li>Download the project as <a href="https://github.com/Adobe-Marketing-Cloud/aem-sites-example-custom-template-type/archive/master.zip">a ZIP file</a></li> 
  </ul> 
  <h2>Template Definitions</h2> 
  <p>Definitions for editable templates are stored <a href="../../../sites/developing/using/page-templates-editable.md#main-pars-title-1575837874">user-defined folders</a> (recommended) or alternatively in <span class="code">global</span>. For example:</p> 
  <ul> 
   <li><span class="code">/conf/&amp;lt;<i>my-folder</i>&amp;gt;/settings/wcm/templates</span></li> 
   <li><span class="code">/conf/&amp;lt;<i>my-folder-01</i>&amp;gt;/&amp;lt;<i>my-folder-02</i>&amp;gt;/settings/wcm/templates</span></li> 
   <li><span class="code">/conf/global/settings/wcm/templates</span></li> 
  </ul> 
  <p>The root node of the template is of type <span class="code">cq:Template</span> with a skeleton structure of:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;template-name&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;initial!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:content!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;root!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;jcr:content!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@property&amp;nbsp;status!!discoiqbr!!&amp;nbsp;&amp;nbsp;policies!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:content!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;root!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@property&amp;nbsp;cq:policy!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@property&amp;nbsp;cq:policy!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@property&amp;nbsp;cq:policy!!discoiqbr!!&amp;nbsp;&amp;nbsp;structure!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:content!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;root!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;component&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cq:responsive!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;breakpoints!!discoiqbr!!&amp;nbsp;&amp;nbsp;thumbnail.png 
  </codeblock> 
  <p>The main elements are:</p> 
  <ul> 
   <li><span class="code">&amp;lt;<i>template-name</i>&amp;gt;</span> 
    <ul> 
     <li><span class="code"><a href="#initialcontent">initial</a></span></li> 
     <li><span class="code">jcr:content</span></li> 
     <li><span class="code"><a href="#structure">structure</a></span></li> 
     <li><span class="code"><a href="#policies">policies</a></span></li> 
     <li><span class="code">thumbnail.png</span></li> 
    </ul> </li> 
  </ul> 
  <h3>jcr:content</h3> 
  <p>This node holds properties for the template:</p> 
  <ul> 
   <li><strong>Name</strong>: <span class="code">jcr:title</span></li> 
   <li><strong>Name</strong>: <span class="code">status</span> 
    <ul> 
     <li><span class="code"></span><strong>Type</strong>: <span class="code">String</span><br /> </li> 
     <li><strong>Value</strong>: <span class="code">draft</span>, <span class="code">enabled</span> or <span class="code">disabled</span></li> 
    </ul> </li> 
  </ul> 
  <h3>Structure</h3> 
  <p>Defines the structure of the resultant page:</p> 
  <ul> 
   <li>Is merged with the initial content (<span class="code">/initial</span>) when creating a new page.</li> 
   <li>Changes made to the structure will be reflected in any pages created with the template.</li> 
   <li>The <span class="code">root</span> (<span class="code">structure/jcr:content/root</span>) node defines the list of components that will be available in the resulting page. 
    <ul> 
     <li>Components defined in the template structure cannot be moved on or deleted from any resultant pages.</li> 
     <li>Once a component is unlocked the <span class="code">editable</span> property is set to <span class="code">true</span>.<br /> </li> 
     <li>Once a component that already contains content is unlocked, this content will be moved to the <span class="code">initial</span> branch.</li> 
    </ul> </li> 
   <li>The <span class="code">cq:responsive</span> node holds definitions for the responsive layout.</li> 
  </ul> 
  <h3>Initial Content</h3> 
  <p>Defines the initial content that a new page will have upon creation:</p> 
  <ul> 
   <li>Contains a <span class="code">jcr:content</span> node that is copied to any new pages.</li> 
   <li>Is merged with the structure (<span class="code">/structure</span>) when creating a new page.</li> 
   <li>Any existing pages will not be updated if the initial content is changed after creation.</li> 
   <li>The <span class="code">root</span> node holds a list of components to define what will be available in the resulting page.</li> 
   <li>If content is added to a component in structure mode and that component is subsequently unlocked (or vice versa), then this content is used as initial content.</li> 
  </ul> 
  <h3>Layout</h3> 
  <p>When <a href="../../../sites/authoring/using/templates.md">editing a template you can define the layout</a>, this uses <a href="../../../sites/authoring/using/responsive-layout.md">standard responsive layout</a> that can also be <a href="../../../sites/administering/using/configuring-responsive-layout.md">configured</a>.</p> 
  <h3>Content Policies</h3> 
  <p>The content (or design) policies define the design properties of a component. For example, the components available or minimum/maximum dimensions. These are applicable to the template (and pages created with the template). Content policies can be created and selected in the template editor.</p> 
  <ul> 
   <li>The property <span class="code">cq:policy</span>, on the <span class="code">root</span> node<br /> <span class="code">/conf/&amp;lt;<em>your-folder</em>&amp;gt;/settings/wcm/templates/&amp;lt;<em>your-template</em>&amp;gt;/policies/jcr:content/root </span><br /> Provides a relative reference to the content policy for the page's paragraph system.<br /> </li> 
   <li>The property <span class="code">cq:policy</span>, on the component-explicit nodes under <span class="code">root</span>, provide links to the policies for the individual components.</li> 
   <li>The actual policy definitions are stored under:<br /> <span class="code">/conf/&amp;lt;<em>your-folder</em>&amp;gt;/settings/wcm/policies/wcm/foundation/components</span></li> 
  </ul> 
  <note> 
   <p>The paths of policy definitions depend on the path of the component. <span class="code">cq:policy</span> holds a relative reference to the configuration itself.</p> 
  </note> 
  <note> 
   <p>Pages created from editable templates do not offer a Design mode in the page editor.</p> 
   <p>The <span class="code">policies</span> tree of an editable template has the same hierarchy as the design mode configuration of a static template under:</p> 
   <p><span class="code"> /etc/designs/&amp;lt;my-site&amp;gt;/jcr:content/&amp;lt;component-name&amp;gt;</span></p> 
   <p>The design mode configuration of a static template was defined per page component.</p> 
  </note> 
  <h3>Page Policies</h3> 
  <p>Page policies allow you to define the <a href="#contentpolicies">content policy</a> for the page (main parsys), in either the template or resultant pages.</p> 
  <h3>Enabling and Allowing a Template for Use</h3> 
  <ol> 
   <li> <p>Before a template can be used it must be enabled by either:</p> 
    <ul> 
     <li><a href="../../../sites/authoring/using/templates.md#enablingatemplateauthor">Enabling the template</a> from the <strong>Templates</strong> console.</li> 
     <li>Setting the status property on the <span class="code">jcr:content</span> node. 
      <ul> 
       <li>For example, on:<br /> <span class="code">/conf/&amp;lt;<i>your-folder</i>&amp;gt;/settings/wcm/templates/&amp;lt;<i>your-template</i>&amp;gt;/jcr:content</span></li> 
       <li>Define the property: 
        <ul> 
         <li>Name: status</li> 
         <li>Type: String</li> 
         <li>Value: <span class="code">enabled</span></li> 
        </ul> </li> 
      </ul> </li> 
    </ul> </li> 
   <li> 
    <ul> 
     <li><a href="../../../sites/authoring/using/templates.md#allowingatemplateauthor">Define the Allowed Template path(s) on the <strong>Page Properties</strong></a> of the appropriate page or root page of a sub-branch.</li> 
     <li>Set the property:<br /> <span class="code"> cq:allowedTemplates</span><br /> On the <span class="code">jcr:content</span> node of the required branch.</li> 
    </ul> <p>For example, with a value of:</p>  </li> 
  </ol> 
  <h2>Resultant Content Pages</h2> 
  <p>Pages created from editable templates:</p> 
  <ul> 
   <li>Are created with a subtree that is merged from <span class="code">structure</span> and <span class="code">initial</span> in the template</li> 
   <li>Have references to information held in the template and template type. This is achieved with a <span class="code">jcr:content</span> node with the properties: 
    <ul> 
     <li><span class="code">cq:template</span><br /> Provides the dynamic reference to the actual template; enables changes to the template to be reflected on the actual pages.<br /> </li> 
     <li><span class="code">cq:templateType</span><br /> Provides a reference to the template type.<br /> </li> 
    </ul> </li> 
  </ul> 
  <img imageRotate="0" src="assets/chlimage_1-262.png" /> 
  <p>The above diagram shows how templates, content, and components interrelate:</p> 
  <ul> 
   <li>Controller - <span class="code">/content/&amp;lt;<i>my-site</i>&amp;gt;/&amp;lt;<i>my-page</i>&amp;gt;</span><br /> The resultant page that references the template. The content controls the entire process. According to the definitions it accesses the appropriate template and components.<br /> </li> 
   <li>Configuration - <span class="code">/conf/&amp;lt;<i>my-folder</i>&amp;gt;/settings/wcm/templates/&amp;lt;<i>my-template</i>&amp;gt;</span><br /> The <a href="#templatedefinitions">template and related content policies</a> define the page configuration.<br /> </li> 
   <li>Model - OSGi bundles<br /> The <a href="../../../sites/deploying/using/osgi-configuration-settings.md">OSGI bundles</a> implement the functionality.<br /> </li> 
   <li>View - <span class="code">/apps/&amp;lt;<i>my-site</i>&amp;gt;/components</span><br /> On both the author and publish environments the content is rendered by <a href="../../../sites/developing/using/components.md">components</a>.</li> 
  </ul> 
  <p>When rendering a page:</p> 
  <ul> 
   <li><p><strong>Templates</strong>:</p> 
    <ul> 
     <li>The <span class="code">cq:template</span> property of its <span class="code">jcr:content</span> node will be referenced to access the template that corresponds to that page.</li> 
    </ul> </li> 
   <li><p><strong>Components</strong>:</p> 
    <ul> 
     <li>The page component will merge the <span class="code">structure/jcr:content</span> tree of the template with the <span class="code">jcr:content</span> tree of the page.</li> 
     <li>The page component will only allow the author to edit the nodes of the template structure that have been flagged as editable (as well as any children).</li> 
     <li>When rendering a component on a page, the relative path of that component will be taken from the <span class="code">jcr:content</span> node; the same path under the <span class="code">policies/jcr:content</span> node of the template will then be searched.<br /> 
      <ul> 
       <li>The <span class="code">cq:policy</span> property of this node points to the actual content policy (i.e. it holds the design configuration for that component).<br /> </li> 
       <li>This allows you to have multiple templates that re-use the same content policy configurations.</li> 
      </ul> </li> 
    </ul> </li> 
  </ul> 
 </body> 
</html>