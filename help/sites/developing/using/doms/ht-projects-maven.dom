<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="mix:versionable;cq:ReplicationStatus" name="jcr:mixinTypes" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="2012-06-28T11:56:53.392-0400" name="jcr:created" /> 
  <meta content="2017-10-31T16:16:36.481-0400" name="firstPublishExternalDate" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:development-tools;content_type:reference" name="cq:tags" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="2018-05-18T09:19:18.992-0400" name="lastPublishExternalDate" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="/content/docs/en/aem/6-3/develop/dev-tools/ht-projects-maven" name="qaNotes" /> 
  <meta content="How to Build AEM Projects using Apache Maven" name="jcr:title" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2018-05-18T09:19:18.992-0400" name="topicBrowsingSortDate" /> 
  <meta content="This document describes how to set up an AEM project based on Apache Maven" name="seoDescription" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/development-tools;/content/help/en/experience-manager/6-4/sites/developing/morehelp/development-tools" name="moreHelpPaths" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="colligno@adobe.com" name="jcr:createdBy" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="How to Build AEM Projects using Apache Maven" name="navTitle" /> 
  <meta content="2018-05-18T09:19:19.009-0400" name="cq:lastModified" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/ht-projects-maven.html" name="publishExternalURL" /> 
  <meta content="How to Build AEM Projects using Apache Maven" name="seoTitle" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="2018-05-18T09:19:19.078-0400" name="cq:lastReplicated" /> 
  <meta content="2018-05-08T12:43:46.095-0400" name="locHandOffDate" /> 
  <meta content="3f2aa384-5824-4a5c-b4ee-96fd8b9e96c5" name="jcr:predecessors" /> 
  <meta content="2018-05-18T09:19:18.992-0400" name="publishExternalDate" /> 
  <meta content="92533570-5935-434d-834e-fe238e001b69" name="jcr:uuid" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
 </head> 
 <body> 
  <h2>Overview</h2> 
  <p>This document describes how to set up an AEM project based on <a href="http://maven.apache.org/">Apache Maven</a>. </p> 
  <p>Apache Maven is an open source tool for managing software projects by automating builds and providing quality project information. It is the recommended build management tool for AEM projects.<br /> </p> 
  <p>Building your AEM Project based on Maven offers you several benefits:</p> 
  <ul> 
   <li>An IDE-agnostic development environment</li> 
   <li>Usage of Maven Archetypes and Artifacts provided by Adobe</li> 
   <li>Usage of Apache Sling and Apache Felix tool sets for Maven based development setups</li> 
   <li>Ease of import into an IDE; for example, Eclipse and/or IntelliJ</li> 
   <li>Easy integration with Continuous Integration Systems<br /> </li> 
  </ul> 
  <h2>Experience Manager API Dependencies</h2> 
  <h3>What is the UberJar?</h3> 
  <p>The "UberJar" is the informal name given to a special Java Archive (JAR) file provided by Adobe. This JAR file contains all of the public Java APIs exposed by Adobe Experience Manager. It includes limited external libraries as well, specifically all public APIs available in AEM which come from the Apache Sling, Apache Jackrabbit, Apache Lucene, Google Guava, and two libraries used for image processing (Werner Randelshofer's CYMK JPEG ImageIO library and the TwelveMonkeys image library). The UberJar only contains API interfaces and classes, meaning that it only contains interfaces and classes which are exported by an OSGi bundle in AEM. It also contained a <i>MANIFEST.MF</i> file containing the correct package export versions for all of these exported packages, thus ensuring that projects built against the UberJar have the correct package import ranges.</p> 
  <h3>Why did Adobe create the UberJar?</h3> 
  <p>In the past, developers had to manage a relatively large number of individual dependencies to different AEM libraries and when each new API was used, one or more individual dependencies had to be added to the project. On one project, the introduction of the UberJar resulted in 30 separate dependencies being removed from the project.</p> 
  <h3>How to I use the UberJar?</h3> 
  <p>If you are using Apache Maven as a build system (which is the case for most AEM Java projects), you will need to add one or two elements to your <i>pom.xml</i> file. The first is a <i>dependency</i> element adding the actual dependency to your project:</p> 
  <codeblock class="syntax xml">
    &lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.adobe.aem&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;uber-jar&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;version&gt;6.4.0&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;classifier&gt;apis&lt;/classifier&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;scope&gt;provided&lt;/scope&gt;!!discoiqbr!!&lt;/dependency&gt; 
  </codeblock> 
  <p>If your company is already using a Maven Repository Manager such as Sonatype Nexus, Apache Archiva, or JFrog Artifactory, add the appropriate configuration to your project to reference this repository manager and add Adobe's Maven repository (<a href="https://repo.adobe.com/nexus/content/groups/public/">https://repo.adobe.com/nexus/content/groups/public/</a>) to your repository manager. </p> 
  <p>If you are not using a repository manager, then you will need to add a <em>repository</em> element to your <em>pom.xml</em> file:</p> 
  <codeblock class="syntax xml">
    &lt;repositories&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;repository&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;adobe-public-releases&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;name&gt;Adobe&amp;nbsp;Public&amp;nbsp;Repository&lt;/name&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;url&gt;https://repo.adobe.com/nexus/content/groups/public/&lt;/url&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;layout&gt;default&lt;/layout&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/repository&gt;!!discoiqbr!!&lt;/repositories&gt;!!discoiqbr!!&lt;pluginRepositories&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;pluginRepository&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;adobe-public-releases&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;name&gt;Adobe&amp;nbsp;Public&amp;nbsp;Repository&lt;/name&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;url&gt;https://repo.adobe.com/nexus/content/groups/public/&lt;/url&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;layout&gt;default&lt;/layout&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/pluginRepository&gt;!!discoiqbr!!&lt;/pluginRepositories&gt; 
  </codeblock> 
  <p>CODE ON GITHUB</p> 
  <p>You can find the code of this page on GitHub</p> 
  <ul> 
   <li><a href="https://github.com/justinedelson/aem-uberjar-demo">Open aem-uberjar-demo project on GitHub</a></li> 
   <li>Download the project as <a href="https://github.com/justinedelson/aem-uberjar-demo/archive/6.2-unobfuscated.zip">a ZIP file</a></li> 
  </ul> 
  <note> 
   <p>It is also possible to configure these repositories in your Maven <i>settings.xml</i> file.</p> 
  </note> 
  <p>Users of other build systems (for example, Apache Ant, Gradle) should follow similar steps, adapted to the specific syntax of their chosen tool.</p> 
  <h3>What can I do with the UberJar?</h3> 
  <p>With the UberJar, you can compile project code which depends upon AEM APIs (and the APIs used by the projects mentioned above). You can also generate OSGi Service Component Runtime (SCR) and OSGi Metatype information. With some limitations, you can also write and execute unit tests.</p> 
  <h3>What can't I do with the UberJar?</h3> 
  <p>Because the UberJar contains <strong>only</strong> APIs, it is not executable and cannot be used to <strong>run</strong> Adobe Experience Manager. To run AEM, you need the AEM Quickstart, either Standalone or Web Application Archive (WAR) form.</p> 
  <h3>You mentioned limitations on unit tests. Please explain further.</h3> 
  <p>Unit tests generally interact with product APIs in three different ways, each of which is impacted slightly differently by the UberJar.</p> 
  <h4>Use Case #1 - Custom Code which calls a API interface</h4> 
  <p>This case, which is the most common, involves some custom code which executes methods on a Java interface defined by the AEM API. The implementation of this interface may either be provided directly or be injected using the Dependency Injection pattern. <strong>This use case can be handled with the UberJar.</strong></p> 
  <p>An example of the former would be:</p> 
  <codeblock class="syntax java">
    public&amp;nbsp;class&amp;nbsp;ClassWhichHasAEMInterfacePassedIn&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Get&amp;nbsp;the&amp;nbsp;first&amp;nbsp;length&amp;nbsp;characters&amp;nbsp;of&amp;nbsp;the&amp;nbsp;page&amp;nbsp;title.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getTrimmedTitle(Page&amp;nbsp;page,&amp;nbsp;int&amp;nbsp;length)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;title&amp;nbsp;=&amp;nbsp;page.getTitle();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;StringUtils.left(title,&amp;nbsp;length);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>An example of the latter would be:</p> 
  <codeblock class="syntax java">
    @Component!!discoiqbr!!@Service!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;ComponentWhichHasAEMInterfaceInjected&amp;nbsp;implements&amp;nbsp;TitleTrimmer&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Reference!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;PageManagerFactory&amp;nbsp;pageManagerFactory;!!discoiqbr!!&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Get&amp;nbsp;the&amp;nbsp;first&amp;nbsp;length&amp;nbsp;characters&amp;nbsp;of&amp;nbsp;the&amp;nbsp;title&amp;nbsp;of&amp;nbsp;the&amp;nbsp;page&amp;nbsp;containing&amp;nbsp;the&amp;nbsp;provided&amp;nbsp;Resource.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getTrimmedTitle(Resource&amp;nbsp;resource,&amp;nbsp;int&amp;nbsp;length)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PageManager&amp;nbsp;pageManager&amp;nbsp;=&amp;nbsp;pageManagerFactory.getPageManager(resource.getResourceResolver());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Page&amp;nbsp;page&amp;nbsp;=&amp;nbsp;pageManager.getContainingPage(resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(page&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;null;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;title&amp;nbsp;=&amp;nbsp;page.getTitle();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;StringUtils.left(title,&amp;nbsp;length);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <p>To unit test either of these methods, a developer would use a mocking framework such as <a href="http://jmockit.org/">JMockit</a>, <a href="http://mockito.org/">Mockito</a>, <a href="http://www.jmock.org/">JMock</a>, or <a href="http://easymock.org/">Easymock</a> to create a mock object for the AEM API referenced. These samples use JMockit, but for this particular use case, the difference between these frameworks is largely syntatical.</p> 
  <codeblock class="syntax java">
    @RunWith(JMockit.class)!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;ClassWhichHasAEMInterfacePassedInTest&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Tested!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ClassWhichHasAEMInterfacePassedIn&amp;nbsp;instance;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Page&amp;nbsp;page;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test_that_long_string_is_trimmed()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Expectations()&amp;nbsp;{{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;page.getTitle();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;"a&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;long&amp;nbsp;string";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}};!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals("a&amp;nbsp;really",&amp;nbsp;instance.getTrimmedTitle(page,&amp;nbsp;8));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <codeblock class="syntax java">
    @RunWith(JMockit.class)!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;ComponentWhichHasAEMInterfaceInjectedTest&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Tested!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ComponentWhichHasAEMInterfaceInjected&amp;nbsp;instance;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Page&amp;nbsp;page;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;PageManager&amp;nbsp;pageManager;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Injectable!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;PageManagerFactory&amp;nbsp;pageManagerFactory;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Resource&amp;nbsp;resource;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ResourceResolver&amp;nbsp;resourceResolver;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test_that_long_string_is_trimmed()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Expectations()&amp;nbsp;{{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resource.getResourceResolver();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;resourceResolver;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pageManagerFactory.getPageManager(resourceResolver);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;pageManager;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pageManager.getContainingPage(resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;page;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;page.getTitle();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;"a&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;really&amp;nbsp;long&amp;nbsp;string";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}};!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals("a&amp;nbsp;really",&amp;nbsp;instance.getTrimmedTitle(resource,&amp;nbsp;8));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <h4>Use Case #2 - Custom Code which calls an API implementation class</h4> 
  <p>This use case involves calling into a static or instance method of an class in the AEM API where you are referencing a concrete class, as opposed an interface as in Use Case #1. </p> 
  <codeblock class="syntax java">
    public&amp;nbsp;class&amp;nbsp;ClassWhichUsesAStaticMethodFromAPI&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Get&amp;nbsp;a&amp;nbsp;map&amp;nbsp;of&amp;nbsp;asset&amp;nbsp;titles&amp;nbsp;to&amp;nbsp;asset&amp;nbsp;objects.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;resource&amp;nbsp;either&amp;nbsp;an&amp;nbsp;asset&amp;nbsp;resource&amp;nbsp;or&amp;nbsp;a&amp;nbsp;folder&amp;nbsp;containing&amp;nbsp;assets.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;an&amp;nbsp;map&amp;nbsp;of&amp;nbsp;titles&amp;nbsp;to&amp;nbsp;assets.&amp;nbsp;if&amp;nbsp;an&amp;nbsp;asset&amp;nbsp;doesn't&amp;nbsp;have&amp;nbsp;a&amp;nbsp;title,&amp;nbsp;the&amp;nbsp;name&amp;nbsp;is&amp;nbsp;used&amp;nbsp;instead.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Map&lt;String,&amp;nbsp;Asset&gt;&amp;nbsp;getAssetTitles(Resource&amp;nbsp;resource)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&lt;Asset&gt;&amp;nbsp;assets&amp;nbsp;=&amp;nbsp;DamUtil.getAssets(resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Asset&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;Asset&gt;();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(assets.hasNext())&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Asset&amp;nbsp;asset&amp;nbsp;=&amp;nbsp;assets.next();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;title&amp;nbsp;=&amp;nbsp;asset.getMetadataValue(DamConstants.DC_TITLE);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(title&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;title&amp;nbsp;=&amp;nbsp;asset.getName();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.put(title,&amp;nbsp;asset);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;result;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <codeblock class="syntax java">
    public&amp;nbsp;class&amp;nbsp;ClassWhichUsesAnInstanceMethodFromAPI&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Count&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;paragraphs&amp;nbsp;in&amp;nbsp;a&amp;nbsp;parsys.!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;resource&amp;nbsp;the&amp;nbsp;parsys&amp;nbsp;resource!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;the&amp;nbsp;count!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;countParagraphs(Resource&amp;nbsp;resource)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;ParagraphSystem(resource).paragraphs().size();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!}!!discoiqbr!! 
  </codeblock> 
  <p><strong>This use case can be handled with the UberJar</strong>. However, mocking the API where possible is still recommended for performant tests.</p> 
  <codeblock class="syntax java">
    @RunWith(JMockit.class)!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;ClassWhichUsesAStaticMethodFromAPITest&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Tested!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ClassWhichUsesAStaticMethodFromAPI&amp;nbsp;instance;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked(stubOutClassInitialization&amp;nbsp;=&amp;nbsp;true)!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;DamUtil&amp;nbsp;unusedDamUtil&amp;nbsp;=&amp;nbsp;null;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Resource&amp;nbsp;resource;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test_that_empty_iterator_produces_empty_map()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Expectations()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DamUtil.getAssets(resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;Collections.&lt;Asset&gt;&amp;nbsp;emptySet().iterator();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Asset&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ClassWhichUsesAStaticMethodFromAPI().getAssetTitles(resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertNotNull(result);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(0,&amp;nbsp;result.size());!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test_with_reference_search()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertTrue(true);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <codeblock class="syntax java">
    @RunWith(JMockit.class)!!discoiqbr!!public&amp;nbsp;class&amp;nbsp;ClassWhichUsesAnInstanceMethodFromAPITest&amp;nbsp;{!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Tested!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ClassWhichUsesAnInstanceMethodFromAPI&amp;nbsp;instance;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Resource&amp;nbsp;parsys;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Paragraph&amp;nbsp;firstPar;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mocked!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Paragraph&amp;nbsp;secondPar;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test_empty_parsys_returns_zero()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;MockUp&lt;ParagraphSystem&gt;()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mock!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;$init(Resource&amp;nbsp;resource)&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(parsys,&amp;nbsp;resource);!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Mock!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;List&lt;Paragraph&gt;&amp;nbsp;paragraphs()&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;Collections.&lt;Paragraph&gt;&amp;nbsp;emptyList();!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(0,&amp;nbsp;instance.countParagraphs(parsys));!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}!!discoiqbr!!} 
  </codeblock> 
  <h4>Use Case #3 - Custom code which extends a base class from the API</h4> 
  <p>As with SCR Generation, if your code extends a base class (abstract or concrete) from the AEM API, you <strong>must</strong> use the UberJar in order to test it.</p> 
  <h2>Common Development Tasks with Maven</h2> 
  <h3>How-To Add Paths to the content Module</h3> 
  <p>The content module contains a file src/main/content/META-INF/vault/filter.xml which defines the filters for the AEM package that is built by Maven. The file that is created by the Maven archetype looks like this:</p> 
  <h4>src/main/content/META-INF/vault/filter.xml</h4> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;workspaceFilter&amp;nbsp;version="1.0"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/apps/myproject"/&gt;!!discoiqbr!!&lt;/workspaceFilter&gt; 
  </codeblock> 
  <p>This file is used in a number of different ways:</p> 
  <ul> 
   <li>by the <span class="code">content-package-maven-plugin</span> to determine which content to include in the package</li> 
   <li>by the VLT tool to determine which paths to consider</li> 
   <li>if the package is re-built in AEM Package Manager, this also defines which paths to include</li> 
  </ul> 
  <p>Depending on your application's requirements, you may want to add to these paths to include more content, such as:</p> 
  <ul> 
   <li>Rollout Configurations</li> 
   <li>Blueprints</li> 
   <li>Workflow Models</li> 
   <li>Design Pages</li> 
   <li>Sample Content</li> 
  </ul> 
  <p>To add to the paths, add more <span class="code">&amp;lt;filter&amp;gt;</span> elements:</p> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;workspaceFilter&amp;nbsp;version="1.0"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/apps/myproject"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/etc/msm/rolloutconfigs/myrolloutconfig"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/etc/blueprints/mysite/globalsite"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/etc/workflow/models/myproject"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/etc/designs/myproject"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/content/myproject/sample-content"/&gt;!!discoiqbr!!&lt;/workspaceFilter&gt; 
  </codeblock> 
  <h4>Adding Paths to the Package Without Syncing Them</h4> 
  <p>If you have files that should be added to the package that is built by the content-package-maven-plugin but that should not be synchronized between the file system and the repository, you can use <span class="code">.vltignore</span> files. These files have the same syntax as <a href="https://www.kernel.org/pub/software/scm/git/docs/gitignore.html">.gitignore</a> files.</p> 
  <p>For example, the archetype uses a <span class="code">.vltignore</span> file to prevent the JAR file that is installed as part of the bundle from being synced back to the file system:</p> 
  <h4>src/main/content/jcr_root/apps/myproject/install/.vltignore</h4> 
  <codeblock class="syntax xml">
    *.jar 
  </codeblock> 
  <h4>Syncing Paths Without Adding Them to the Package</h4> 
  <p>In some cases, you may want to keep particular paths synchronized between the file system and the repository, but not have them included in the package that is built to be installed into AEM.</p> 
  <p>A typical case is the <span class="code">/libs/foundation</span> path. For development purposes, you may want to have the contents of this path available in your file system, so that e.g. your IDE can resolve JSP inclusions that include JSPs in <span class="code">/libs</span>. However, you don't want to include that part in the package you build, as the <span class="code">/libs</span> part contains product code that must not be modified by custom implementations.</p> 
  <p>To achieve this, you can provide a file <span class="code">src/main/content/META-INF/vault/filter-vlt.xml</span>. If this file exists, it will be used by the VLT tool, e.g. when you perform <span class="code">vlt up</span> and <span class="code">vlt ci</span>, or when you have set<span class="code"> vlt sync</span> set up. The content-package-maven-plugin will continue to use the file <span class="code">src/main/content/META-INF/vault/filter.xml</span> when creating the package.</p> 
  <p>For example, to make <span class="code">/libs/foundation</span> available locally for development, but only include <span class="code">/apps/myproject</span> in the package, use the following two files.</p> 
  <h4>src/main/content/META-INF/vault/filter.xml</h4> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;workspaceFilter&amp;nbsp;version="1.0"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/apps/myproject"/&gt;!!discoiqbr!!&lt;/workspaceFilter&gt; 
  </codeblock> 
  <h4>src/main/content/META-INF/vault/filter-vlt.xml</h4> 
  <codeblock class="syntax xml">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="UTF-8"?&gt;!!discoiqbr!!&lt;workspaceFilter&amp;nbsp;version="1.0"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/libs/foundation"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filter&amp;nbsp;root="/apps/myproject"/&gt;!!discoiqbr!!&lt;/workspaceFilter&gt; 
  </codeblock> 
  <p>You will also need to reconfigure the maven-resources-plugin to not include these files in the package: the filter.xml file is not applied when the package is installed but only when the package is built again using package manager.</p> 
  <p>Change the <span class="code">&amp;lt;resources&amp;gt;</span> section in the content pom accoringly:</p> 
  <h4>src/main/content/pom.xml</h4> 
  <codeblock class="syntax xml">
    &lt;!--&amp;nbsp;...&amp;nbsp;--&gt;!!discoiqbr!!&lt;resources&gt;!!discoiqbr!!&amp;nbsp;&lt;resource&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;directory&gt;src/main/content/jcr_root&lt;/directory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;filtering&gt;false&lt;/filtering&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;excludes&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;exclude&gt;**/.vlt&lt;/exclude&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;exclude&gt;**/.vltignore&lt;/exclude&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;exclude&gt;libs/&lt;/exclude&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/excludes&gt;!!discoiqbr!!&amp;nbsp;&lt;/resource&gt;!!discoiqbr!!&lt;/resources&gt;!!discoiqbr!!&lt;!--&amp;nbsp;...&amp;nbsp;--&gt; 
  </codeblock> 
  <h3>How-To Work with JSPs</h3> 
  <p>The Maven setup described so far creates a content package that can also include components and their corresponding JSPs. However, Maven treats them as any other file that is part of the content package and does not even recognize them as JSPs.</p> 
  <p>The resulting components work in AEM all the same, but making Maven aware of the JSPs has two major benefits</p> 
  <ul> 
   <li>it allows Maven to fail if the JSPs contain errors, so that these are surfaced at build time and not when they are first compiled in AEM</li> 
   <li>For IDEs that can import Maven projects, this also enables code completion and tag library support in the JSPs</li> 
  </ul> 
  <p>Two things are required to enable this setup:</p> 
  <ol> 
   <li>add tag library dependencies</li> 
   <li>compile the JSPs as part of the Maven compile process</li> 
  </ol> 
  <h4>Adding Tag Library Dependencies</h4> 
  <p>Below dependencies need to be added to the <span class="code">content</span> modules's POM.</p> 
  <note> 
   <p>Unless you are importing the product dependencies as described in <a href="#importingaemproductdependencies">Importing AEM Product Dependencies</a> above, they also need to be added to the parent POM along with the version matching your AEM setup as described in <a href="#addingdependencies">Adding Dependencies</a> above. The comments in each entry below show the package to search for in the Dependency Finder.</p> 
  </note> 
  <note> 
   <p>The <span class="code">com.adobe.granite.xssprotection</span> artifact is not included in the cq-quickstart-product-dependencies POM and requires full Maven coordinates as obtained from the Dependency Finder.</p> 
  </note> 
  <h4>myproject/content/pom.xml</h4> 
  <codeblock class="syntax xml">
    &lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;org.apache.sling.jcr.jcr-wrapper&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;javax.jcr&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;org.apache.sling.api&lt;/artifactId&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-commons&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.day.cq.commons&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.wcm&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-wcm-commons&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.day.cq.wcm.commons&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.wcm&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-wcm-api&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.day.cq.wcm.api&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.commons&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;day-commons-jstl&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;javax.servlet.jsp.jstl.core&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.wcm&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-wcm-taglib&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.day.cq.wcm.tags&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;org.apache.sling.scripting.jsp.taglib&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;org.apache.sling.scripting.jsp.taglib&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.adobe.granite&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;com.adobe.granite.xssprotection&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.adobe.granite.xss&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;com.day.cq.wcm&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;cq-wcm-core&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;com.day.cq.wcm.core.components&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;org.apache.commons.lang3&amp;nbsp;--&gt;!!discoiqbr!!&lt;/dependency&gt;!!discoiqbr!!&lt;dependency&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;!!discoiqbr!!&lt;/dependency&gt; 
  </codeblock> 
  <h4>Compiling JSPs as part of the Maven Compile Phase</h4> 
  <p>To compile JSPs in Maven's <span class="code">compile</span> phase, we use Apache Sling's <a href="http://sling.apache.org/documentation/development/jspc.html">Maven JspC Plugin</a> as shown below:</p> 
  <ul> 
   <li>we set up an execution for the <span class="code">jspc</span> goal (which by default binds to the <span class="code">compile</span> phase, so we don't need to specify the phase explicitly)</li> 
   <li>we tell it to compile any JSPs in <span class="code">${project.build.directory}/jsps-to-compile</span></li> 
   <li>and output the result to <span class="code">${project.build.directory}/ignoredjspc</span> (which translates to <span class="code">myproject/content/target/ignoredjspc</span>)</li> 
   <li>we set up maven-resources-plugin to copy the JSPs to <span class="code">${project.build.directory}/jsps-to-compile</span> in the generate-sources phase and configure it to not copy the <span class="code">libs/</span> folder (because that is AEM product code and we neither want to incur the dependencies for compilation for our project, nor do we need to validate that it compiles.</li> 
  </ul> 
  <p>Our primary goal, as stated above, is to validate the JSPs and make sure that the build process fails if they contain errors. This is why we compile them to a separate directory that is ignored (and in fact immediately deleted afterwards, as you will see in a minute).</p> 
  <p>The result of the Maven JspC Plugin can also be bundled and deployed as part of an OSGi Bundle, but this has other implications and side effects and goes beyond our goal of validating the JSPs.</p> 
  <p>To achieve deletion of the classes compiled from the JSPs, we set up the Maven Clean Plugin as shown below. If you want to inspect the result of the Maven JspC Plugin, run <span class="code">mvn compile</span> in <span class="code">myproject/content</span> -- after that, you will find the result in <span class="code">myproject/content/target/ignoredjspc</span>).</p> 
  <h4>myproject/content/pom.xml</h4> 
  <codeblock class="syntax xml">
    &lt;build&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;...&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;plugins&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;...&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;copy-resources&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;phase&gt;generate-sources&lt;/phase&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goal&gt;copy-resources&lt;/goal&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;outputDirectory&gt;${project.build.directory}/jsps-to-compile&lt;/outputDirectory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;resources&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;resource&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;directory&gt;src/main/content/jcr_root&lt;/directory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;excludes&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;exclude&gt;libs/**&lt;/exclude&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/excludes&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/resource&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/resources&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;groupId&gt;org.apache.sling&lt;/groupId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-jspc-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;version&gt;2.0.6&lt;/version&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;compile-jsp&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goal&gt;jspc&lt;/goal&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;jasperClassDebugInfo&gt;false&lt;/jasperClassDebugInfo&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;sourceDirectory&gt;${project.build.directory}/jsps-to-compile&lt;/sourceDirectory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;outputDirectory&gt;${project.build.directory}/ignoredjspc&lt;/outputDirectory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;remove-compiled-jsps&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;goal&gt;clean&lt;/goal&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/goals&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;phase&gt;process-classes&lt;/phase&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;excludeDefaultDirectories&gt;true&lt;/excludeDefaultDirectories&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;filesets&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;fileset&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;directory&gt;${project.build.directory}/jsps-to-compile&lt;/directory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;directory&gt;${project.build.directory}/ignoredjspc&lt;/directory&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/fileset&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/filesets&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/configuration&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/execution&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/executions&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/plugin&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/plugins&gt;!!discoiqbr!!&lt;/build&gt; 
  </codeblock> 
  <note> 
   <p>Depending on whether you actually make use of JSP code in <span class="code">/libs</span> (i.e. include JSPs from there), you will need to refine which JSPs are copied for compilation.</p> 
   <p>E.g. if you include <span class="code">/libs/foundation/global.jsp</span>, you can use the following configuration for the <span class="code">maven-resources-plugin</span> instead of the configuration above which completely skips over <span class="code">/libs</span>.</p> 
   <pre> &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/content/jcr_root&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;apps/**&amp;lt;/include&amp;gt; &amp;lt;include&amp;gt;libs/foundation/global.jsp&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; </pre> 
  </note> 
  <h3>How-To Work with SCM Systems</h3> 
  <p>When working with Source Configuration Management (SCM), you want to make sure that</p> 
  <ul> 
   <li>The VCS ignores non-source artifacts in the file system</li> 
   <li>VLT ignores artifacts of the VCS and does not check them in to the repository</li> 
  </ul> 
  <note> 
   <p>This description does not cover how to configure Maven to work with your SCM, which is described exhaustively in the <a href="http://maven.apache.org/pom.html#SCM">Maven POM reference</a> and the <a href="http://maven.apache.org/scm/">Maven SCM Plugin's documentation</a>.</p> 
  </note> 
  <h4>Patterns to Exclude from SCM</h4> 
  <p>The following is a typical list of patterns to include from SCM. E.g., if you are using git, you can add these to your project's <span class="code">.gitignore</span> file.</p> 
  <h4>sample .gitignore</h4> 
  <codeblock class="syntax shell">
    #&amp;nbsp;Ignore&amp;nbsp;VLT&amp;nbsp;files!!discoiqbr!!.vlt!!discoiqbr!!.vlt-sync.log!!discoiqbr!!.vlt-sync-config.properties!!discoiqbr!!!!discoiqbr!!#&amp;nbsp;Ignore&amp;nbsp;Quickstart&amp;nbsp;launches&amp;nbsp;in&amp;nbsp;the&amp;nbsp;source&amp;nbsp;tree!!discoiqbr!!license.properties!!discoiqbr!!crx-quickstart!!discoiqbr!!!!discoiqbr!!#&amp;nbsp;Ignore&amp;nbsp;compilation&amp;nbsp;results!!discoiqbr!!target!!discoiqbr!!!!discoiqbr!!#&amp;nbsp;Ignore&amp;nbsp;IDE&amp;nbsp;and&amp;nbsp;Operating&amp;nbsp;System&amp;nbsp;artifacts!!discoiqbr!!.idea!!discoiqbr!!.classpath!!discoiqbr!!.metadata!!discoiqbr!!.project!!discoiqbr!!.settings!!discoiqbr!!maven-eclipse.xml!!discoiqbr!!*.iml!!discoiqbr!!*.ipr!!discoiqbr!!*.iws!!discoiqbr!!.DS_Store 
  </codeblock> 
  <h4>Ignoring SCM control files in VLT</h4> 
  <p>In some cases, you may have SCM control files in the content source tree that you do not want to be checked in to the repository.</p> 
  <p>Think of the following situation:</p> 
  <p>The archetype already created a .vltignore file to prevent the installed bundle jar file from being synced back to the file system:</p> 
  <h4>src/main/content/jcr_root/apps/myproject/install/.vltignore</h4> 
  <codeblock class="syntax shell">
    *.jar 
  </codeblock> 
  <p>Obviously, you do not want this file in your SCM either, so if e.g. you are using git, you would add a corresponding .<span class="code">gitignore</span> file:</p> 
  <h4>src/main/content/jcr_root/apps/myproject/install/.gitignore</h4> 
  <codeblock class="syntax shell">
    *.jar 
  </codeblock> 
  <p>As the .<span class="code">gitignore</span> file should not go into the repository either, the .<span class="code">vltignore</span> file needs to be extended to include the .<span class="code">gitignore</span> file:</p> 
  <h4>src/main/content/jcr_root/apps/myproject/install/.vltignore</h4> 
  <codeblock class="syntax shell">
    *.jar!!discoiqbr!!.gitignore 
  </codeblock> 
  <h3>How-To Work with Deployment Profiles</h3> 
  <p>If your build process is part of a larger development lifecycle management setup, such as a continous integration process, you often need to deploy to other machines than just the developer's local instance.</p> 
  <p>For such scenarios, you can easily add new <a href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html">Maven Build Profiles</a> to the project's POM.</p> 
  <p>The example below adds a profile <span class="code">integrationServer</span>, which redefines the host names and ports for the author and publish instances. You can deploy to these servers by running maven from the project root as shown below.</p> 
  <codeblock class="syntax shell">
    #&amp;nbsp;install&amp;nbsp;on&amp;nbsp;integration&amp;nbsp;test&amp;nbsp;author!!discoiqbr!!$&amp;nbsp;mvn&amp;nbsp;-PautoInstallPackage&amp;nbsp;-PintegrationServer&amp;nbsp;install!!discoiqbr!!!!discoiqbr!!#&amp;nbsp;install&amp;nbsp;on&amp;nbsp;integration&amp;nbsp;test&amp;nbsp;publisher!!discoiqbr!!$&amp;nbsp;mvn&amp;nbsp;-PautoInstallPackagePublish&amp;nbsp;-PintegrationServer&amp;nbsp;install 
  </codeblock> 
  <h4>myproject/pom.xml</h4> 
  <codeblock class="syntax xml">
    &lt;profiles&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;!--&amp;nbsp;...&amp;nbsp;--&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;profile&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;id&gt;integrationServer&lt;/id&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;properties&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;crx.host&gt;dev-author.intranet&lt;/crx.host&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;crx.port&gt;5502&lt;/crx.port&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;publish.crx.host&gt;dev-publish.intranet&lt;/publish.crx.host&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;publish.crx.port&gt;5503&lt;/publish.crx.port&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/properties&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/profile&gt;!!discoiqbr!!&lt;/profiles&gt; 
  </codeblock> 
  <h3>How-To Work with AEM Communities</h3> 
  <p>When licensed for the AEM Communities capability, an additional API jar is necessary.</p> 
  <p>For details, see <a href="../../../communities/using/maven.md">Using Maven for Communities</a></p> 
 </body> 
</html>