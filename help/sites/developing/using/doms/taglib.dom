<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="45903442-3b7c-40b7-a420-25ad0c4114b3" name="jcr:uuid" /> 
  <meta content="2017-12-05T06:02:43.521-0500" name="lastPublishExternalDate" /> 
  <meta content="2018-05-08T12:45:20.857-0400" name="locHandOffDate" /> 
  <meta content="2017-12-05T06:02:43.521-0500" name="topicBrowsingSortDate" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="2017-12-05T06:02:43.521-0500" name="publishExternalDate" /> 
  <meta content="Tag Libraries" name="jcr:title" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="Tag Libraries" name="navTitle" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2018-05-08T12:45:20.859-0400" name="cq:lastModified" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="Tag Libraries" name="seoTitle" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="bohnert@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/taglib.html" name="publishExternalURL" /> 
  <meta content="99b55af8-3194-43f7-bc32-1834f24dadff" name="jcr:predecessors" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform;/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform" name="moreHelpPaths" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2017-12-06T19:03:40.529-0500" name="jcr:created" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="2017-10-31T16:16:17.258-0400" name="firstPublishExternalDate" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:platform;content_type:reference" name="cq:tags" /> 
  <meta content="/content/docs/en/aem/6-3/develop/platform/taglib" name="qaNotes" /> 
  <meta content="2018-04-03T09:01:15.861-0400" name="cq:lastReplicated" /> 
  <meta content="The Granite, CQ, and Sling tag libraries give you access to specific functions for use in the JSP script of your templates and components" name="seoDescription" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
 </head> 
 <body> 
  <p>The Granite, CQ, and Sling tag libraries give you access to specific functions for use in the JSP script of your templates and components.</p> 
  <h2>Granite Tag Library</h2> 
  <p>The Granite tag library contains helpful functions.</p> 
  <p>When you develop the jsp script of a Granite UI component, it is recommended to include following code at the top of the script:</p> 
  <codeblock class="syntax xml">
    &lt;%@include&amp;nbsp;file="/libs/granite/ui/global.jsp"%&gt; 
  </codeblock> 
  <p>The global also declares the <a href="../../../sites/developing/using/taglib.md#main-pars-par13">Sling library</a>.</p> 
  <codeblock class="syntax xml">
    &lt;%@taglib&amp;nbsp;prefix="sling"&amp;nbsp;uri="http://sling.apache.org/taglibs/sling"&amp;nbsp;%&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;ui:includeClientLib&gt;</h3> 
  <p>The <span class="code">&amp;lt;ui:includeClientLib&amp;gt;</span> tag Includes a AEM html client library, which can be a js, a css, or a theme library. For multiple inclusions of different types, for example js and css, this tag needs to be used multiple times in the jsp. This tag is a convenience wrapper around the <span class="code"><a href="/sites/developing/using/reference-materials/javadoc/com/adobe/granite/ui/clientlibs/HtmlLibraryManager">com.adobe.granite.ui.clientlibs.HtmlLibraryManager</a></span> service interface.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>categories</strong> A list of comma-separated client lib categories. This will include all Javascript and CSS libraries for the given categories. The theme name is extracted from the request.</p> 
  <p>Equivalent to: <span class="code">com.adobe.granite.ui.clientlibs.HtmlLibraryManager#writeIncludes</span><br /> </p> 
  <p><strong>theme</strong> A list of comma-separated client lib categories. This will include all theme related libraries (both CSS and JS) for the given categories. The theme name is extracted from the request.</p> 
  <p>Equivalent to: <span class="code">com.adobe.granite.ui.clientlibs.HtmlLibraryManager#writeThemeInclude</span></p> 
  <p><strong>js</strong> A list of comma-separated client lib categories. This will include all Javascript libraries for the given categories.</p> 
  <p>Equivalent to: <span class="code">com.adobe.granite.ui.clientlibs.HtmlLibraryManager#writeJsInclude</span></p> 
  <p><strong>css</strong> A list of comma-separated client lib categories. This will include all CSS libraries for the given categories.</p> 
  <p>Equivalent to: <span class="code">com.adobe.granite.ui.clientlibs.HtmlLibraryManager#writeCssInclude</span></p> 
  <p><strong>themed</strong> A flag that indicates of only themed or non themed libraries should be included. If omitted, both sets are included. Only applies to pure JS or CSS includes (not for categories or theme includes).</p> 
  <p>The <span class="code">&amp;lt;ui:includeClientLib&amp;gt;</span> tag can be used as follows in a jsp:<br /> </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%--&amp;nbsp;all:&amp;nbsp;js&amp;nbsp;+&amp;nbsp;theme&amp;nbsp;(theme-js&amp;nbsp;+&amp;nbsp;css)&amp;nbsp;--%&gt;!!discoiqbr!!&lt;ui:includeClientLib&amp;nbsp;categories="cq.wcm.edit"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;only&amp;nbsp;js&amp;nbsp;libs&amp;nbsp;--%&gt;!!discoiqbr!!&lt;ui:includeClientLib&amp;nbsp;js="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;theme&amp;nbsp;only&amp;nbsp;(theme-js&amp;nbsp;+&amp;nbsp;css)&amp;nbsp;--%&gt;!!discoiqbr!!&lt;ui:includeClientLib&amp;nbsp;theme="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;css&amp;nbsp;only&amp;nbsp;--%&gt;!!discoiqbr!!&lt;ui:includeClientLib&amp;nbsp;css="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt; 
  </codeblock> 
  <h2>CQ Tag Library</h2> 
  <p>The CQ tag library contains helpful functions.</p> 
  <p>To use the CQ Tag Library in your script, the script must start with the following code:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@taglib&amp;nbsp;prefix="cq"&amp;nbsp;uri="http://www.day.com/taglibs/cq/1.0"&amp;nbsp;%&gt; 
  </codeblock> 
  <note> 
   <p>When the <span class="code">/libs/foundation/global.jsp</span> file is included in the script, the taglib is automatically declared.</p> 
  </note> 
  <p>When you develop the jsp script of a AEM component, it is recommended to include following code at the top of the script:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@include&amp;nbsp;file="/libs/foundation/global.jsp"%&gt; 
  </codeblock> 
  <p>It declares the sling, CQ, and jstl taglibs and exposes the regularly used scripting objects defined by the <a href="#cqdefineobjects"><span class="code">&amp;lt;cq:defineObjects /&amp;gt;</span></a> tag. This shortens and simplifies the jsp code of your component.</p> 
  <h3>&amp;amp;lt;cq:text&gt;</h3> 
  <p>The <span class="code">&amp;lt;cq:text&amp;gt;</span> tag is a convenience tag that outputs component text in a JSP.</p> 
  <p>It has the following optional attributes:</p> 
  <p><strong>property</strong> Name of the property to use. The name is relative to the current resource.</p> 
  <p><strong>value</strong> Value to use for output. If this attribute is present, it overwrites the use of the property attribute.</p> 
  <p><strong>oldValue</strong> Value to use for diff output. If this attribute is present, it overwrites the use of the property attribute.</p> 
  <p><strong>escapeXml</strong> Defines whether the characters &lt;, &gt;, &amp;, ' and " in the resulting string should be converted to their corresponding character entity codes. Default value is false. Note that the escaping is applied after the optional formatting.</p> 
  <p><strong>format</strong> Optional java.text.Format to use for formatting the text.</p> 
  <p><strong>noDiff</strong> Suppresses the calculation of a diff output, even if a diff info is present.</p> 
  <p><strong>tagClass</strong> CSS class name of an element that will surround a non-empty output. If empty, no element is added.</p> 
  <p><strong>tagName</strong> Name of the element that will surround a non-empty output. It defaults to DIV.</p> 
  <p><strong>placeholder</strong> Default value to use for null or empty text in edit mode, i.e. the placeholder. Please note that the default check is performed after the optional formatting and escaping, i.e. it is written as-is to the output. It defaults to:</p> 
  <p><span class="code">&lt;div&gt;&lt;span class="cq-text-placeholder"&gt;&amp;para;&lt;/span&gt;&lt;/div&gt;</span></p> 
  <p><strong>default</strong> Default value to use for null or empty text. Note that the default check is performed after the optional formatting and escaping i.e. it is written as-is to the output.</p> 
  <p>Some examples how the <span class="code">&amp;lt;cq:text&amp;gt;</span> tag can be used in a JSP:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;cq:text&amp;nbsp;property="jcr:title"&amp;nbsp;tagName="h2"/&gt;!!discoiqbr!!&lt;cq:text&amp;nbsp;property="jcr:description"&amp;nbsp;tagName="p"/&gt;!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;value="&lt;%=&amp;nbsp;listItem.getTitle()&amp;nbsp;%&gt;"&amp;nbsp;tagName="h4"&amp;nbsp;placeholder=""&amp;nbsp;/&gt;!!discoiqbr!!&lt;cq:text&amp;nbsp;value="&lt;%=&amp;nbsp;listItem.getDescription()&amp;nbsp;%&gt;"&amp;nbsp;tagName="p"&amp;nbsp;placeholder=""/&gt;!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;property="jcr:title"&amp;nbsp;value="&lt;%=&amp;nbsp;title&amp;nbsp;%&gt;"&amp;nbsp;tagName="h3"/&gt;&lt;%!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if&amp;nbsp;(type.equals("link"))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%&gt;&lt;cq:text&amp;nbsp;property="jcr:title"&amp;nbsp;value="&lt;%=&amp;nbsp;"\u00bb&amp;nbsp;"&amp;nbsp;+&amp;nbsp;title&amp;nbsp;%&gt;"&amp;nbsp;tagName="p"&amp;nbsp;tagClass="link"/&gt;&lt;%!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if&amp;nbsp;(type.equals("extralarge"))&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%&gt;&lt;cq:text&amp;nbsp;property="jcr:title"&amp;nbsp;value="&lt;%=&amp;nbsp;title&amp;nbsp;%&gt;"&amp;nbsp;tagName="h1"/&gt;&lt;%!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%&gt;&lt;cq:text&amp;nbsp;property="jcr:title"&amp;nbsp;value="&lt;%=&amp;nbsp;title&amp;nbsp;%&gt;"&amp;nbsp;tagName="h2"/&gt;&lt;%!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;property="jcr:description"&amp;nbsp;placeholder=""&amp;nbsp;tagName="small"/&gt;!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;property="tableData"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;escapeXml="false"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;placeholder="&lt;img&amp;nbsp;src=\"/libs/cq/ui/resources/0.gif\"&amp;nbsp;class=\"cq-table-placeholder\"&amp;nbsp;alt=\"\"&gt;"!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;property="text"/&gt;!!discoiqbr!!!!discoiqbr!!&lt;cq:text&amp;nbsp;property="image/jcr:description"&amp;nbsp;placeholder=""&amp;nbsp;tagName="small"/&gt;!!discoiqbr!!&lt;cq:text&amp;nbsp;property="text"&amp;nbsp;tagClass="text"/&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;cq:setContentBundle&gt;</h3> 
  <p>The <span class="code">&amp;lt;cq:setContentBundle&amp;gt;</span> tag creates an i18n localization context and stores it in the <span class="code">javax.servlet.jsp.jstl.fmt.localizationContext</span> configuration variable.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>language</strong> The language of the locale for which to retrieve the resource bundle.</p> 
  <p><strong>source</strong> The source where the locale should be taken from. It can be set to one of the following values:</p> 
  <ul> 
   <li><strong>static</strong>: the locale is taken from the <span class="code">language</span> attribute if available, otherwise from the server default locale.</li> 
   <li><strong>page</strong>: the locale is taken from the language of the current page or resource if available, otherwise from the <span class="code">language</span> attribute if available, otherwise from the server default locale.<br /> </li> 
   <li><strong>request</strong>: the locale is taken from the request locale (<span class="code">request.getLocale()</span>).<br /> </li> 
   <li><strong>auto</strong>: the locale is taken from the <span class="code">language</span> attribute if available, otherwise from the language of the current page or resource if available, otherwise from the request.</li> 
  </ul> 
  <p>If the <span class="code">source</span> attribute is not set:</p> 
  <ul> 
   <li>If the <span class="code">language</span> attribute is set, the <span class="code">source</span> attribute defaults to<span class="code"></span> <span class="code">static</span>.<br /> </li> 
   <li>If the <span class="code">language</span> attribute is not set, the <span class="code">source</span> attribute defaults to <span class="code">auto</span>.<br /> </li> 
  </ul> 
  <p>The "content bundle" can be simply used by standard JSTL <span class="code">&amp;lt;fmt:message&amp;gt;</span> tags. The lookup of messages by keys is two-fold:</p> 
  <ol> 
   <li>First, the JCR properties of the underlying resource that is currently rendered are searched for translations. This allows you to define a simple component dialog to edit those values.</li> 
   <li>If the node does not contain a property named exactly like the key, the fallback is to load a resource bundle from the sling request (<span class="code">SlingHttpServletRequest.getResourceBundle(Locale)</span>). The language or locale for this bundle is defined by the language and source attributes of the <span class="code">&amp;lt;cq:setContentBundle&amp;gt;</span> tag.<br /> </li> 
  </ol> 
  <p> </p> 
  <p>The <span class="code">&amp;lt;cq:setContentBundle&amp;gt;</span> tag can be used as follows in a jsp.</p> 
  <p>For pages that define their language:<br /> </p> 
  <codeblock gutter="true" class="syntax xml">
    ...&amp;nbsp;%&gt;&lt;cq:setContentBundle&amp;nbsp;source="page"/&gt;&lt;%&amp;nbsp;&amp;nbsp;%&gt;!!discoiqbr!!&lt;div&amp;nbsp;class="error"&gt;&lt;fmt:message&amp;nbsp;key="Hello"/&gt;!!discoiqbr!!&lt;/div&gt;&amp;nbsp;... 
  </codeblock> 
  <p>For user personalized pages:</p> 
  <codeblock gutter="true" class="syntax xml">
    ...&amp;nbsp;%&gt;&lt;cq:setContentBundle&amp;nbsp;scope="request"/&gt;&lt;%&amp;nbsp;%&gt;!!discoiqbr!!&lt;div&amp;nbsp;class="error"&gt;&lt;fmt:message&amp;nbsp;key="Hello"/&gt;!!discoiqbr!!&lt;/div&gt;&amp;nbsp;... 
  </codeblock> 
  <h3>&amp;amp;lt;cq:include&gt;</h3> 
  <p></p> 
  <p>The &amp;lt;cq:include&amp;gt; tag includes a resource into the current page.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>flush</strong></p> 
  <ul> 
   <li>A boolean defining whether to flush the output before including the target.<strong></strong></li> 
  </ul> 
  <p><strong>path</strong></p> 
  <ul> 
   <li>The path to the resource object to be included in the current request processing. If this path is relative it is appended to the path of the current resource whose script is including the given resource. Either path and resourceType, or script must be specified.</li> 
  </ul> 
  <p><strong>resourceType</strong></p> 
  <ul> 
   <li>The resource type of the resource to be included. If the resource type is set, the path must be the exact path to a resource object: in this case, adding parameters, selectors and extensions to the path is not supported.</li> 
   <li>If the resource to be included is specified with the path attribute that cannot be resolved to a resource, the tag may create a synthetic resource object out of the path and this resource type.</li> 
   <li>Either path and resourceType, or script must be specified.<strong></strong></li> 
  </ul> 
  <p><strong>script</strong></p> 
  <ul> 
   <li>The jsp script to include. Either path and resourceType, or script must be specified.<strong></strong></li> 
  </ul> 
  <p><strong>ignoreComponentHierarchy</strong></p> 
  <ul> 
   <li>A boolean controlling whether the component hierarchy should be ignored for script resolution. If true, only the search paths are respected.</li> 
  </ul> 
  <p><strong>Example:</strong></p> 
  <p></p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@taglib&amp;nbsp;prefix="cq"&amp;nbsp;uri="http://www.day.com/taglibs/cq/1.0"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;div&amp;nbsp;class="center"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:include&amp;nbsp;path="trail"&amp;nbsp;resourceType="foundation/components/breadcrumb"&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:include&amp;nbsp;path="title"&amp;nbsp;resourceType="foundation/components/title"&amp;nbsp;/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:include&amp;nbsp;script="redirect.jsp"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;cq:include&amp;nbsp;path="par"&amp;nbsp;resourceType="foundation/components/parsys"&amp;nbsp;/&gt;!!discoiqbr!!&lt;/div&gt; 
  </codeblock> 
  <p> Should you use <span class="code">&amp;lt;%@ include file="myScript.jsp" %&amp;gt;</span> or <span class="code">&amp;lt;cq:include script="myScript.jsp" %&amp;gt;</span> to include a script?</p> 
  <ul> 
   <li><p>The <span class="code">&amp;lt;%@ include file="myScript.jsp" %&amp;gt;</span> directive informs the JSP compiler to include a complete file into the current file. It is as if the contents of the included file were pasted directly into the original file.</p> </li> 
   <li><p>With the <span class="code">&amp;lt;cq:include script="myScript.jsp"&amp;gt;</span> tag, the file is included at runtime.</p> </li> 
  </ul> 
  <p> </p> 
  <p>Should you use <span class="code">&amp;lt;cq:include&amp;gt;</span> or <span class="code">&amp;lt;sling:include&amp;gt;</span>?</p> 
  <ul> 
   <li><p>When developing AEM components, Adobe recommends that you use <span class="code">&amp;lt;cq:include&amp;gt;</span>.</p> </li> 
   <li><p><span class="code">&amp;lt;cq:include&amp;gt;</span> allows you to directly include script files by their name when using the script attribute. This takes component and resource type inheritance into account, and is often simpler than strict adherence to Sling's script resolution using selectors and extensions.</p> </li> 
  </ul> 
  <p> </p> 
  <h3>&amp;amp;lt;cq:includeClientLib&gt;</h3> 
  <note> 
   <p><span class="code">&amp;lt;cq:includeClientLib&amp;gt;</span> has been deprecated since AEM 5.6. <a href="../../../sites/developing/using/taglib.md#main-pars-title-1565813984"><span class="code">&amp;lt;ui:includeClientLib&amp;gt;</span></a> should be used instead.<span class="code"></span></p> 
  </note> 
  <p>The <span class="code">&amp;lt;cq:includeClientLib&amp;gt;</span> tag Includes a AEM html client library, which can be a js, a css or a theme library. For multiple inclusions of different types, for example js and css, this tag needs to be used multiple times in the jsp. This tag is a convenience wrapper around the <span class="code">com.day.cq.widget.HtmlLibraryManager</span> service interface.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>categories</strong> A list of comma-separated client lib categories. This will include all Javascript and CSS libraries for the given categories. The theme name is extracted from the request.</p> 
  <p>Equivalent to: <span class="code">com.day.cq.widget.HtmlLibraryManager#writeIncludes</span><br /> </p>  
  <p><strong>theme</strong> A list of comma-separated client lib categories. This will include all theme related libraries (both CSS and JS) for the given categories. The theme name is extracted from the request.</p> 
  <p>Equivalent to: <span class="code">com.day.cq.widget.HtmlLibraryManager#</span>writeThemeInclude</p> 
  <p><strong>js</strong> A list of comma-separated client lib categories. This will include all Javascript libraries for the given categories.</p> 
  <p>Equivalent to: <span class="code">com.day.cq.widget.HtmlLibraryManager#writeJsInclude</span></p> 
  <p><strong>css</strong> A list of comma-separated client lib categories. This will include all CSS libraries for the given categories.</p> 
  <p>Equivalent to: <span class="code">com.day.cq.widget.HtmlLibraryManager#writeCssInclude</span></p> 
  <p><strong>themed</strong> A flag that indicates of only themed or non themed libraries should be included. If omitted, both sets are included. Only applies to pure JS or CSS includes (not for categories or theme includes).</p> 
  <p>The <span class="code">&amp;lt;cq:includeClientLib&amp;gt;</span> tag can be used as follows in a jsp:<br /> </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%--&amp;nbsp;all:&amp;nbsp;js&amp;nbsp;+&amp;nbsp;theme&amp;nbsp;(theme-js&amp;nbsp;+&amp;nbsp;css)&amp;nbsp;--%&gt;!!discoiqbr!!&lt;cq:includeClientLib&amp;nbsp;categories="cq.wcm.edit"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;only&amp;nbsp;js&amp;nbsp;libs&amp;nbsp;--%&gt;!!discoiqbr!!&lt;cq:includeClientLib&amp;nbsp;js="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;theme&amp;nbsp;only&amp;nbsp;(theme-js&amp;nbsp;+&amp;nbsp;css)&amp;nbsp;--%&gt;!!discoiqbr!!&lt;cq:includeClientLib&amp;nbsp;theme="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt;!!discoiqbr!!!!discoiqbr!!&lt;%--&amp;nbsp;css&amp;nbsp;only&amp;nbsp;--%&gt;!!discoiqbr!!&lt;cq:includeClientLib&amp;nbsp;css="cq.collab.calendar,&amp;nbsp;cq.security"&amp;nbsp;/&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;cq:defineObjects&gt;</h3> 
  <p> </p> 
  <p>The <span class="code">&amp;lt;cq:defineObjects&amp;gt;</span> tag exposes the following, regularly used, scripting objects which can be referenced by the developer. It also exposes the objects defined by the <a href="#slingdefineobjects"><span class="code">&amp;lt;sling:defineObjects&amp;gt;</span></a> tag.</p> 
  <p><strong>componentContext</strong></p> 
  <ul> 
   <li>the current component context object of the request (com.day.cq.wcm.api.components.ComponentContext interface).</li> 
  </ul> 
  <p><strong>component</strong></p> 
  <ul> 
   <li>the current AEM component object of the current resource (com.day.cq.wcm.api.components.Component interface).</li> 
  </ul> 
  <p><strong>currentDesign</strong></p> 
  <ul> 
   <li>the current design object of the current page (com.day.cq.wcm.api.designer.Design interface).</li> 
  </ul> 
  <p><strong>currentPage</strong></p> 
  <ul> 
   <li>the current AEM WCM page object (com.day.cq.wcm.api.Page interface).</li> 
  </ul> 
  <p><strong>currentStyle</strong></p> 
  <ul> 
   <li>the current style object of the current cell (com.day.cq.wcm.api.designer.Style interface).<strong></strong></li> 
  </ul> 
  <p><strong>designer</strong></p> 
  <ul> 
   <li>the designer object used to access design information (com.day.cq.wcm.api.designer.Designer interface).</li> 
  </ul> 
  <p><strong>editContext</strong></p> 
  <ul> 
   <li>the edit context object of the AEM component (com.day.cq.wcm.api.components.EditContext interface).<strong></strong></li> 
  </ul> 
  <p><strong>pageManager</strong></p> 
  <ul> 
   <li>the page manager object for page level operations (com.day.cq.wcm.api.PageManager interface).<strong></strong></li> 
  </ul> 
  <p><strong>pageProperties</strong></p> 
  <ul> 
   <li>the page properties object of the current page (org.apache.sling.api.resource.ValueMap).<strong></strong></li> 
  </ul> 
  <p><strong>properties</strong></p> 
  <ul> 
   <li>the properties object of the current resource (org.apache.sling.api.resource.ValueMap).</li> 
  </ul> 
  <p><strong>resourceDesign</strong></p> 
  <ul> 
   <li>the design object of the resource page (com.day.cq.wcm.api.designer.Design interface).</li> 
  </ul> 
  <p><strong>resourcePage</strong></p> 
  <ul> 
   <li>the resource page object (com.day.cq.wcm.api.Page interface).</li> 
   <li>It has the following attributes:</li> 
  </ul> 
  <p><strong>requestName</strong></p> 
  <ul> 
   <li>inherited from sling</li> 
  </ul> 
  <p><strong>responseName</strong></p> 
  <ul> 
   <li>inherited from sling<strong></strong></li> 
  </ul> 
  <p><strong>resourceName</strong></p> 
  <ul> 
   <li>inherited from sling<strong></strong></li> 
  </ul> 
  <p><strong>nodeName</strong></p> 
  <ul> 
   <li>inherited from sling</li> 
  </ul> 
  <p><strong>logName</strong></p> 
  <ul> 
   <li>inherited from sling<strong></strong></li> 
  </ul> 
  <p><strong>resourceResolverName</strong></p> 
  <ul> 
   <li>inherited from sling</li> 
  </ul> 
  <p><strong>slingName</strong></p> 
  <ul> 
   <li>inherited from sling</li> 
  </ul> 
  <p><strong>componentContextName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>editContextName</strong></p> 
  <ul> 
   <li>specific to wcm<strong></strong></li> 
  </ul> 
  <p><strong>propertiesName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>pageManagerName</strong></p> 
  <ul> 
   <li>specific to wcm<strong></strong></li> 
  </ul> 
  <p><strong>currentPageName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>resourcePageName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>pagePropertiesName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>componentName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>designerName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>currentDesignName</strong></p> 
  <ul> 
   <li>specific to wcm<strong></strong></li> 
  </ul> 
  <p><strong>resourceDesignName</strong></p> 
  <ul> 
   <li>specific to wcm<strong></strong></li> 
  </ul> 
  <p><strong>currentStyleName</strong></p> 
  <ul> 
   <li>specific to wcm</li> 
  </ul> 
  <p><strong>Example</strong></p> 
  <p> </p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@page&amp;nbsp;session="false"&amp;nbsp;contentType="text/html;&amp;nbsp;charset=utf-8"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;%@&amp;nbsp;page&amp;nbsp;import="com.day.cq.wcm.api.WCMMode"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;%@taglib&amp;nbsp;prefix="cq"&amp;nbsp;uri="http://www.day.com/taglibs/cq/1.0"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;cq:defineObjects/&gt; 
  </codeblock> 
  <note> 
   <p>When the <span class="code">/libs/foundation/global.jsp</span> file is included in the script, the <span class="code">&amp;lt;cq:defineObjects /&amp;gt;</span> tag is automatically included.</p> 
  </note> 
  <h3>&amp;amp;lt;cq:requestURL&gt;</h3> 
  <p>The <span class="code">&amp;lt;cq:requestURL&amp;gt;</span> tag writes the current request URL to the JspWriter. The two tags <a href="#cqaddparam"><span class="code">&amp;lt;cq:addParam&amp;gt;</span></a> and <a href="#cqremoveparam"><span class="code">&amp;lt;cq:removeParam&amp;gt;</span></a> and may be used inside the body of this tag to modify the current request URL before it is written.</p> 
  <p>It allows you to create links to the current page with varying parameters. For example, it enables you to transform the request:</p> 
  <p><span class="code">mypage.html?mode=view&amp;query=something</span> into <span class="code">mypage.html?query=something</span>.</p> 
  <p>The use of <span class="code">addParam</span> or <span class="code">removeParam</span> only changes the occurrence of the given parameter, all other parameters are unaffected.</p> 
  <p><span class="code">&amp;lt;cq:requestURL&amp;gt;</span> does not have any attribute.</p> 
  <p>Examples:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;href="&lt;cq:requestURL&gt;&lt;cq:removeParam&amp;nbsp;name="language"/&gt;&lt;/cq:requestURL&gt;"&gt;remove&amp;nbsp;filter&lt;/a&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;title="filter&amp;nbsp;results"&amp;nbsp;href="&lt;cq:requestURL&gt;&lt;cq:addParam&amp;nbsp;name="language"&amp;nbsp;value="${bucket.value}"/&gt;&lt;/cq:requestURL&gt;"&gt;${label}&amp;nbsp;(${bucket.count})&lt;/a&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;cq:addParam&gt;</h3> 
  <p>The <span class="code">&amp;lt;cq:addParam&amp;gt;</span> tag adds a request parameter with the given name and value to the enclosing <a href="#cqrequesturl"><span class="code">&amp;lt;cq:requestURL&amp;gt;</span></a> tag.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>name</strong></p> 
  <p> </p> 
  <ul> 
   <li>name of the parameter to be added</li> 
  </ul> 
  <p><strong>value</strong></p> 
  <ul> 
   <li>value of the parameter to be added</li> 
  </ul> 
  <p> </p> 
  <p> </p> 
  <p><strong>Example:</strong></p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;title="filter&amp;nbsp;results"&amp;nbsp;href="&lt;cq:requestURL&gt;&lt;cq:addParam&amp;nbsp;name="language"&amp;nbsp;value="${bucket.value}"/&gt;&lt;/cq:requestURL&gt;"&gt;${label}&amp;nbsp;(${bucket.count})&lt;/a&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;cq:removeParam&gt;</h3> 
  <p>The <span class="code">&amp;lt;cq:removeParam&amp;gt;</span> tag removes a request parameter with the given name and value from the enclosing <a href="#cqrequesturl"><span class="code">&amp;lt;cq:requestURL&amp;gt;</span></a> tag. If no value is provided all parameters with the given name are removed.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>name</strong></p> 
  <ul> 
   <li>name of the parameter to be removed</li> 
  </ul> 
  <p>Example:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;a&amp;nbsp;href="&lt;cq:requestURL&gt;&lt;cq:removeParam&amp;nbsp;name="language"/&gt;&lt;/cq:requestURL&gt;"&gt;remove&amp;nbsp;filter&lt;/a&gt; 
  </codeblock> 
  <h2>Sling Tag Library</h2> 
  <p>The Sling tag library contains helpful Sling functions.</p> 
  <p>When you use the Sling Tag Library in your script, the script must start with the following code:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@&amp;nbsp;taglib&amp;nbsp;prefix="sling"&amp;nbsp;uri="http://sling.apache.org/taglibs/sling/1.0"&amp;nbsp;%&gt; 
  </codeblock> 
  <note> 
   <p>When the <span class="code">/libs/foundation/global.jsp</span> file is included in the script, the sling taglib is automatically declared.</p> 
  </note> 
  <h3>&amp;amp;lt;sling:include&gt;</h3> 
  <p>The <span class="code">&amp;lt;sling:include&amp;gt;</span> tag includes a resource into the current page.</p> 
  <p>It has the following attributes:</p> 
  <p><strong>flush</strong></p> 
  <ul> 
   <li>A boolean defining whether to flush the output before including the target.</li> 
  </ul> 
  <p><strong>resource</strong></p> 
  <ul> 
   <li>The resource object to be included in the current request processing. Either resource or path must be specified. If both are specified, the resource takes precedence.</li> 
  </ul> 
  <p><strong>path</strong></p> 
  <ul> 
   <li>The path to the resource object to be included in the current request processing. If this path is relative it is appended to the path of the current resource whose script is including the given resource. Either resource or path must be specified. If both are specified, the resource takes precedence.</li> 
  </ul> 
  <p><strong>resourceType</strong></p> 
  <ul> 
   <li>The resource type of the resource to be included. If the resource type is set, the path must be the exact path to a resource object: in this case, adding parameters, selectors and extensions to the path is not supported.</li> 
   <li>If the resource to be included is specified with the path attribute that cannot be resolved to a resource, the tag may create a synthetic resource object out of the path and this resource type.</li> 
  </ul> 
  <p><strong>replaceSelectors</strong></p> 
  <ul> 
   <li>When dispatching, the selectors are replaced with the value of this attribute.</li> 
  </ul> 
  <p><strong>addSelectors</strong></p> 
  <ul> 
   <li>When dispatching, the value of this attribute is added to the selectors.</li> 
  </ul> 
  <p><strong>replaceSuffix</strong></p> 
  <ul> 
   <li>When dispatching, the suffix is replaced by the value of this attribute.</li> 
  </ul> 
  <p> </p> 
  <note> 
   <p>The resolution of the resource and the script that are included with the <span class="code">&amp;lt;sling:include&amp;gt;</span> tag is the same as for a normal sling URL resolution. By default, the selectors, extension, etc. from the current request are used for the included script as well. They can be modified through the tag attributes: for example <span class="code">replaceSelectors="foo.bar"</span> allows you to overwrite the selectors.</p> 
  </note> 
  <p>Examples:</p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;div&amp;nbsp;class="item"&gt;&lt;sling:include&amp;nbsp;path="&lt;%=&amp;nbsp;pathtoinclude&amp;nbsp;%&gt;"/&gt;&lt;/div&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;sling:include&amp;nbsp;resource="&lt;%=&amp;nbsp;par&amp;nbsp;%&gt;"/&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;sling:include&amp;nbsp;addSelectors="spool"/&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;sling:include&amp;nbsp;resource="&lt;%=&amp;nbsp;par&amp;nbsp;%&gt;"&amp;nbsp;resourceType="&lt;%=&amp;nbsp;newType&amp;nbsp;%&gt;"/&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;sling:include&amp;nbsp;resource="&lt;%=&amp;nbsp;par&amp;nbsp;%&gt;"&amp;nbsp;resourceType="&lt;%=&amp;nbsp;newType&amp;nbsp;%&gt;"/&gt; 
  </codeblock> 
  <codeblock gutter="true" class="syntax xml">
    &lt;sling:include&amp;nbsp;replaceSelectors="content"&amp;nbsp;/&gt; 
  </codeblock> 
  <h3>&amp;amp;lt;sling:defineObjects&gt;</h3> 
  <p>The <span class="code">&amp;lt;sling:defineObjects&amp;gt;</span> tag exposes the following, regularly used, scripting objects which can be referenced by the developer:</p> 
  <p><strong>slingRequest</strong></p> 
  <ul> 
   <li>SlingHttpServletRequest object, providing access to the HTTP request header information - extends the standard HttpServletRequest - and provides access to Sling-specific things like resource, path info, selector, etc.</li> 
  </ul> 
  <p><strong>slingResponse</strong></p> 
  <ul> 
   <li>SlingHttpServletResponse object, providing access for the HTTP response that is created by the server. This is currently the same as the HttpServletResponse from which it extends.<strong>request</strong></li> 
   <li>The standard JSP request object which is a pure HttpServletRequest.<strong>response</strong></li> 
   <li>The standard JSP response object which is a pure HttpServletResponse.<strong></strong></li> 
  </ul> 
  <p><strong>resourceResolver</strong></p> 
  <ul> 
   <li>The current ResourceResolver object. It is the same as slingRequest.getResourceResolver()</li> 
  </ul> 
  <p>.<strong>sling</strong></p> 
  <ul> 
   <li>A SlingScriptHelper object, containing convenience methods for scripts, mainly sling.include('/some/other/resource') for including the responses of other resources inside this response (eg. embedding header html snippets) and sling.getService(foo.bar.Service.class) to retrieve OSGi services available in Sling (Class notation depending on scripting language).<strong></strong></li> 
  </ul> 
  <p><strong>resource</strong></p> 
  <ul> 
   <li>the current Resource object to handle, depending on the URL of the request. It is the same as slingRequest.getResource().</li> 
  </ul> 
  <p><strong>currentNode</strong></p> 
  <ul> 
   <li>If the current resource points to a JCR node (which is typically the case in Sling), this gives direct access to the Node object. Otherwise this object is not defined.</li> 
  </ul> 
  <p><strong>log</strong></p> 
  <ul> 
   <li>Provides an SLF4J Logger for logging to the Sling log system from within scripts, eg. log.info("Executing my script").</li> 
  </ul> 
  <p> </p> 
  <ul> 
   <li>It has the following attributes:</li> 
  </ul> 
  <p><strong>requestName</strong></p> 
  <p><strong>responseName</strong></p> 
  <p> </p> 
  <p><strong>nodeName</strong></p> 
  <p>l<strong>ogName resourceResolverName</strong></p> 
  <p><strong>slingName</strong></p> 
  <p> </p> 
  <p><strong>Example:</strong></p> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@page&amp;nbsp;session="false"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;%@page&amp;nbsp;import="com.day.cq.wcm.foundation.forms.ValidationHelper"%&gt;&lt;%!!discoiqbr!!%&gt;&lt;%@taglib&amp;nbsp;prefix="sling"&amp;nbsp;uri="http://sling.apache.org/taglibs/sling/1.0"&amp;nbsp;%&gt;&lt;%!!discoiqbr!!%&gt;&lt;sling:defineObjects/&gt; 
  </codeblock> 
  <h2>JSTL Tag library</h2> 
  <p>The <a href="http://www.oracle.com/technetwork/java/index-jsp-135995.html">JavaServer Pages Standard Tag Library</a> contains a lot of useful and standard tags. The core, formatting and functions taglibs are defined by the <span class="code">/libs/foundation/global.jsp</span> as shown in the following snippet.<br /> </p> 
  <h4>Extract of /libs/foundation/global.jsp</h4> 
  <codeblock gutter="true" class="syntax xml">
    &lt;%@taglib&amp;nbsp;prefix="c"&amp;nbsp;uri="http://java.sun.com/jsp/jstl/core"&amp;nbsp;%&gt;!!discoiqbr!!&lt;%@taglib&amp;nbsp;prefix="fmt"&amp;nbsp;uri="http://java.sun.com/jsp/jstl/fmt"&amp;nbsp;%&gt;!!discoiqbr!!&lt;%@taglib&amp;nbsp;prefix="fn"&amp;nbsp;uri="http://java.sun.com/jsp/jstl/functions"&amp;nbsp;%&gt; 
  </codeblock> 
  <p>After importing the <span class="code">/libs/foundation/global.jsp</span> file as described before, you can use the <span class="code">c</span>, <span class="code">fmt</span> and <span class="code">fn</span> prefixes to access to those taglibs. The official documentation of the JSTL is available at <a href="http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html">The Java EE 5 Tutorial - JavaServer Pages Standard Tag Library</a>.</p> 
 </body> 
</html>