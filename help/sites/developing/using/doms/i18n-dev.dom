<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2018-05-08T12:44:02.492-0400" name="locHandOffDate" /> 
  <meta content="Internationalizing UI Strings " name="navTitle" /> 
  <meta content="wmyersta@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="2018-04-03T09:00:57.759-0400" name="cq:lastReplicated" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="2017-10-31T16:16:33.880-0400" name="topicBrowsingSortDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="/content/docs/en/aem/6-3/develop/components/i18n/i18n-dev" name="qaNotes" /> 
  <meta content="2017-10-31T16:16:33.880-0400" name="firstPublishExternalDate" /> 
  <meta content="92fadbb2-9d2c-4832-9a09-94237b503e3d" name="jcr:predecessors" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;content_type:reference;topic_tags:components" name="cq:tags" /> 
  <meta content="2017-12-01T19:03:59.557-0500" name="jcr:created" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="2017-10-31T16:16:33.880-0400" name="lastPublishExternalDate" /> 
  <meta content="2018-05-08T12:44:02.493-0400" name="cq:lastModified" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/components;/content/help/en/experience-manager/6-4/sites/developing/morehelp/components" name="moreHelpPaths" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="Internationalizing UI Strings " name="seoTitle" /> 
  <meta content="Internationalizing UI Strings " name="jcr:title" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/i18n-dev.html" name="publishExternalURL" /> 
  <meta content="Java and Javascript APIs enable you to internationalize strings" name="seoDescription" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="114389d7-833b-4b0d-ae57-1558a483a3bc" name="jcr:uuid" /> 
  <meta content="2017-10-31T16:16:33.880-0400" name="publishExternalDate" /> 
  <meta content="2017-10-12T21:46:00.000-0400" name="qaDate" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="carlino" name="cq:lastReplicatedBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="carlino" name="cq:lastModifiedBy" /> 
 </head> 
 <body>  
  <p>Java and Javascript APIs enable you to internationalize strings in the following types of resources:</p> 
  <ul> 
   <li>Java source files.</li> 
   <li>JSP scripts.</li> 
   <li>Javascript in client-side libraries or in page source.</li> 
   <li>JCR node property values used in dialogs and component configuration properties.</li> 
  </ul> 
  <div>
    For an overview of the internationalization and localization process, see 
   <a href="../../../sites/developing/using/i18n.md">Internationalizing Components</a>. 
  </div> 
  <h3>Internationalizing Strings in Java and JSP Code</h3> 
  <p>The <span class="code">com.day.cq.i18n</span> Java package enables you to display localized strings in your UI. The <span class="code">I18n</span> class provides the <span class="code">get</span> method that retrieves localized strings from the AEM dictionary. The only required parameter of the <span class="code">get</span> method is the string literal in the English language. English is the default langauge for the UI. The following example localizes the word <span class="code">Search</span>:</p> 
  <p><span class="code">i18n.get("Search"); </span></p> 
  <p>Identifying the string in the English language differs from typical internationalization frameworks where an ID identifies a string and is used to reference the string at runtime. Using the English string literal provides the following benefits:</p> 
  <ul> 
   <li>Code is easy to understand.</li> 
   <li>The string in the default language is always available.</li> 
  </ul> 
  <h4>Determining the User's Language</h4> 
  <p>There are two ways to determine the language that the user prefers:</p> 
  <ul> 
   <li>For authenticated users, determine the language from the preferences in the user account.</li> 
   <li>The locale of the requested page.</li> 
  </ul> 
  <div>
    The language property of the user account is the preferred method because it is more reliable. However, the user must be logged in to use this method. 
  </div> 
  <h4>Creating the I18n Java object</h4> 
  <p>The I18n class provides two constructors. How you determine the user's preferred language determines the constructor to use.</p> 
  <p>To present the string in the language that is specified in the user account, use the following constructor (after importing <span class="code">com.day.cq.i18n.I18n)</span>:</p> 
  <codeblock class="syntax java">
    I18n&amp;nbsp;i18n&amp;nbsp;=&amp;nbsp;new&amp;nbsp;I18n(slingRequest); 
  </codeblock> 
  <p>The constructor uses the <span class="code">SlingHTTPRequest</span> to retrieve the user's language setting.</p> 
  <p>To use the page locale to determine the language, you first need to obtain the ResourceBundle for the language of the requested page:</p> 
  <codeblock class="syntax java">
    Locale&amp;nbsp;pageLang&amp;nbsp;=&amp;nbsp;currentPage.getLanguage(false);!!discoiqbr!!ResourceBundle&amp;nbsp;resourceBundle&amp;nbsp;=&amp;nbsp;slingRequest.getResourceBundle(pageLang);!!discoiqbr!!I18n&amp;nbsp;i18n&amp;nbsp;=&amp;nbsp;new&amp;nbsp;I18n(resourceBundle);&amp;nbsp; 
  </codeblock> 
  <h4>Internationalizing a String</h4> 
  <p>Use the <span class="code">get</span> method of the <span class="code">I18n</span> object to internationalize a string. The only required parameter of the <span class="code">get</span> method is the string to internationalize. The string corresponds with a string in a Translator dictionary. The get method looks up the string in the dictionary and returns the translation for the current language.</p> 
  <p>The first argument of the <span class="code">get</span> method must comply with the following rules:</p> 
  <ul> 
   <li>The value must be a string literal. A variable of type <span class="code">String</span> is not acceptable.</li> 
   <li>The string literal must be expresse on a single line.</li> 
   <li>The string is case-sensitive.</li> 
  </ul> 
  <codeblock class="syntax xml">
    i18n.get("Enter&amp;nbsp;a&amp;nbsp;search&amp;nbsp;keyword"); 
  </codeblock> 
  <h4>Using Translation Hints</h4>  
  <p>Specify the <a href="../../../sites/developing/using/i18n-translator.md#main-pars-title-5">translation hint</a> of the internationalized string to distinguish between duplicate strings in the dictionary. Use the second, optional parameter of the <span class="code">get</span> method to provide the translation hint. The translation hint must exactly match the Comment property of the item in the dictionary.</p> 
  <p>For example, the dicationary contains the string <span class="code">Request</span> twice: once as a verb and once as a noun. The following code includes the translation hint as an argument in the <span class="code">get</span> method:</p> 
  <p> </p> 
  <codeblock class="syntax java">
    i18n.get("Request","A&amp;nbsp;noun,&amp;nbsp;as&amp;nbsp;in&amp;nbsp;a&amp;nbsp;request&amp;nbsp;for&amp;nbsp;a&amp;nbsp;web&amp;nbsp;page"); 
  </codeblock> 
  <h4>Including Variables in Localized Sentences</h4> 
  <p>Include variables in the localized string to build contextual meaning into a sentence. For example, after logging into a web application, the home page displays the message "Welcome back Administrator. You have 2 messages in your inbox." The page context determines the user name and the number of messages.</p> 
  <p><a href="../../../sites/developing/using/i18n-translator.md#main-pars-title-5">In the dictionary</a>, the variables are represented in strings as bracketed indexes. Specify the values of the variables as arguments of the <span class="code">get</span> method. The arguments are placed following the translation hint, and the indexes correspond with the order of the arguments:</p> 
  <codeblock class="syntax xml">
    i18n.get("Welcome&amp;nbsp;back&amp;nbsp;{0}.&amp;nbsp;You&amp;nbsp;have&amp;nbsp;{1}&amp;nbsp;messages.",&amp;nbsp;"user&amp;nbsp;name,&amp;nbsp;number&amp;nbsp;of&amp;nbsp;messages",&amp;nbsp;user.getDisplayName(),&amp;nbsp;numItems);&amp;nbsp; 
  </codeblock> 
  <p>The internationalized string and the translation hint must exactly match the string and comment in the dictionary. You can omit the localization hint by providing a <span class="code">null</span> value as the second argument.</p> 
  <h4>Using the Static Get Method</h4> 
  <p>The <span class="code">I18N</span> class defines a static <span class="code">get</span> method that is useful when you need to localize a small number of strings. In addition to the parameters of an object's <span class="code">get</span> method, the static method requires the <span class="code">SlingHttpRequest</span> object or the <span class="code">ResourceBundle</span> that you are using, according to how you are determining the user's preferred language:</p> 
  <ul> 
   <li>Use the user's language preference: Provide the SlingHttpRequest as the first parameter. </li> 
   <li>Use the page language: Provide the ResourceBundle as the first parameter. </li> 
  </ul> 
  <h3>Internationalizing Strings in Javascript Code</h3> 
  <p>The Javascript API enables you to localize strings on the client. As with <a href="../../../sites/developing/using/i18n.md#main-pars-title-0">Java and JSP</a> code, the Javascript API enables you to identify strings to localize, priovide localization hints, and include variables in the localized strings.</p> 
  <p>The <span class="code">granite.utils</span> <a href="../../../sites/developing/using/clientlibs.md">client library folder</a> provides the Javascript API. To use the API, include this client library folder on your page. Localization functions use the <span class="code">Granite.I18n</span> namespace.</p> 
  <p>Before you present localized strings, you need to set the locale using the <span class="code">Granite.I18n.setLocale</span> function. The function requires the language code of the locale as an argument:</p> 
  <codeblock class="syntax js">
    Granite.I18n.setLocale("fr"); 
  </codeblock> 
  <p>To present a localized string, use the <span class="code">Granite.I18n.get</span> function:</p> 
  <codeblock class="syntax js">
    Granite.I18n.get("string&amp;nbsp;to&amp;nbsp;localize"); 
  </codeblock> 
  <p>The following example internationalizes the string "Welcome back":</p> 
  <codeblock class="syntax js">
    Granite.I18n.setLocale("fr");!!discoiqbr!!Granite.I18n.get("string&amp;nbsp;to&amp;nbsp;localize",&amp;nbsp;[variables],&amp;nbsp;"localization&amp;nbsp;hint"); 
  </codeblock> 
  <p>The function parameters are different than the Java I18n.get method:</p> 
  <ul> 
   <li>The first parameter is the string literal to localize.</li> 
   <li>The second parameter is an array of values to inject into the string literal.</li> 
   <li>The third parameter is the localization hint.</li> 
  </ul> 
  <div>
    The following example uses Javascript to localize the "Welcome back Administrator. You have 2 messages in your inbox." sentence: 
  </div> 
  <codeblock class="syntax js">
    Granite.I18n.setLocale("fr");!!discoiqbr!!Granite.I18n.get("Welcome&amp;nbsp;back&amp;nbsp;{0}.&amp;nbsp;You&amp;nbsp;have&amp;nbsp;{1}&amp;nbsp;new&amp;nbsp;messages&amp;nbsp;in&amp;nbsp;your&amp;nbsp;inbox.",&amp;nbsp;[username,&amp;nbsp;numMsg],&amp;nbsp;"user&amp;nbsp;name,&amp;nbsp;number&amp;nbsp;of&amp;nbsp;messages"); 
  </codeblock> 
  <h3>Internationalizing Strings from JCR Nodes</h3> 
  <p>UI strings are often based on JCR node properties. For example, the <span class="code">jcr:title</span> property of a page is typically used as the content of the <span class="code">h1</span> element in the page code. The <span class="code">I18n</span> class provides the <span class="code">getVar</span> method for localizing these strings.</p> 
  <p>The following example JSP script retrieves the <span class="code">jcr:title</span> property from the repository and displays the localized string on the page:</p> 
  <codeblock class="syntax java">
    &lt;%&amp;nbsp;title&amp;nbsp;=&amp;nbsp;properties.get("jcr:title",&amp;nbsp;String.class);%&gt;!!discoiqbr!!&lt;h1&gt;&lt;%=i18n.getVar(title)&amp;nbsp;%&gt;&lt;/h1&gt; 
  </codeblock>  
  <h4>Specifying Translation Hints for JCR Nodes</h4> 
  <p>Similar to <a href="../../../sites/developing/using/i18n.md#main-pars-title-12">translation hints in the Java API</a>, you can provide translation hints to distinguish duplicate strings in the dictionary. Provide the translation hint as a property of the node that contains the internationalized property. The name of the hint property is comprised of the name of the internationalized property name with the <span class="code">_commentI18n</span> suffix:</p> 
  <p><span class="code">${prop}_commentI18n</span></p> 
  <p>For example, a <span class="code">cq:page</span> node includes the jcr:title property which is being localized. The hint is provided as the value of the property named jcr:title_commentI18n.</p> 
  <h3>Testing Internationalization Coverage</h3> 
  <p>Test whether you have internationalized all of the strings in your UI. To see which strings are covered, set the user languge to zz_ZZ and open the UI in the web browser. The internationalized strings appear with a stub tranlsation in the folloiwng format:</p> 
  <p><span class="code">USR_<i>Default-String</i>_尠</span></p> 
  <p>The following image shows the stub translation for the AEM home page:</p> 
  <img imageRotate="0" src="assets/chlimage_1.jpeg" /> 
  <p>To set the language for the user, configure the language property of the preferences node for the user account.</p> 
  <p>The preferences node of a user has a path like this:</p> 
  <p><span class="code">/home/users/&amp;lt;letter&amp;gt;/&amp;lt;hash&amp;gt;/preferences</span></p> 
  <img imageRotate="0" src="assets/chlimage_1-1.jpeg" /> 
 </body> 
</html>