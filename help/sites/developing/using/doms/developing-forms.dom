<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2017-10-31T16:16:59.591-0400" name="firstPublishExternalDate" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="Developing Forms (Classic UI)" name="jcr:title" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-3/sites/developing/using/developing-forms.html" name="publishExternalURL" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="2018-01-19T19:05:37.711-0500" name="jcr:created" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
  <meta content="2018-01-18T11:19:05.930-0500" name="lastPublishExternalDate" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="25346e25-d334-4c3a-ab80-7bbeef602bab" name="jcr:uuid" /> 
  <meta content="carlino@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="jsyal" name="cq:lastReplicatedBy" /> 
  <meta content="2018-01-18T11:19:05.930-0500" name="publishExternalDate" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:components;content_type:reference" name="cq:tags" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="Developing Forms (Classic UI)" name="navTitle" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="msm-service" name="cq:lastModifiedBy" /> 
  <meta content="/content/docs/en/aem/6-3/develop/components/developing-forms" name="qaNotes" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/components;/content/help/en/experience-manager/6-4/sites/developing/morehelp/components" name="moreHelpPaths" /> 
  <meta content="2018-10-27T23:47:27.083-0400" name="cq:lastReplicated" /> 
  <meta content="2018-05-08T12:42:15.197-0400" name="locHandOffDate" /> 
  <meta content="b5240517-9bca-4084-ab97-25ea4e914376" name="jcr:predecessors" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Learn how to develop forms" name="seoDescription" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="2018-05-08T12:42:15.198-0400" name="cq:lastModified" /> 
  <meta content="2018-01-18T11:19:05.930-0500" name="topicBrowsingSortDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="Developing Forms (Classic UI)" name="seoTitle" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="dist5" name="distType" /> 
  <meta content="light" name="gnavTheme" /> 
 </head> 
 <body> 
  <p>The basic structure of a form is:</p> 
  <ul> 
   <li>Form start</li> 
   <li>Form elements</li> 
   <li>Form end</li> 
  </ul> 
  <p>All of these are realised with a series of default <a href="../../../sites/authoring/using/default-components.md#form">Form components</a>, available in a standard AEM installation.<br /> </p> 
  <p>In addition to <a href="../../../sites/developing/using/developing-components-samples.md">developing new components</a> for use on your forms you can also:</p> 
  <ul> 
   <li><a href="#preloadingformvalues">Preload your form with values</a></li> 
   <li><a href="#preloadingformfieldswithmultiplevalues">Preload (certain) fields with multiple values <br /> </a></li> 
   <li><a href="#developingyourownformactions">Develop new actions</a></li> 
   <li><a href="#developingyourownformconstraints">Develop new constraints</a></li> 
   <li><a href="#showingandhidingformcomponents">Show or hide specific form fields</a></li> 
  </ul> 
  <p><a href="#developingscriptsforusewithforms">Using scripts</a> to extend functionality where necessary.<br /> </p> 
  <note> 
   <p>This document focuses on developing forms using the <a href="../../../sites/authoring/using/default-components-foundation.md">Foundation Components</a> in the classic UI. Adobe recommends leveraging the new <a href="/content/help/en/experience-manager/core-components/user-guide">Core Components</a> and <a href="../../../sites/developing/using/hide-conditions.md">Hide Conditions</a> for form development in the touch-enabled UI.</p> 
  </note> 
  <h3>Preloading Form Values</h3> 
  <p>The form start component provides a field for the <strong>Load Path</strong>, an optional path that points to a node in the repository.</p> 
  <p>The Load Path is the path to node properties that is used to load predefined values into multiple fields on the form.</p> 
  <p>This is an optional field that specifies the path to a node in the repository. When this node has properties that match the field names, then the appropriate fields on the form are preloaded with the value of those properties. If no match exists, then the field contains the default value.</p> 
  <note> 
   <p>A <a href="#developingyourownformactions">form action</a> can also set the resource from which to load the initial values. This is done using <span class="code">FormsHelper#setFormLoadResource</span> inside <span class="code">init.jsp</span>.</p> 
   <p>Only if that is not set, will the form be populated from the path set in the start form component by the author.</p> 
  </note> 
  <h3>Preloading Form Fields with Multiple Values</h3> 
  <p>Various form fields also have the <strong>Items Load Path</strong>, again an optional path that points to a node in the repository.</p> 
  <p>The <strong>Items Load Path</strong> is the path to node properties that is used to load predefined values into that specific field on the form, for example, a <a href="../../../sites/authoring/using/default-components-foundation.md#main-pars-title-25">drop down list</a>, <a href="../../../sites/authoring/using/default-components-foundation.md#main-pars-title-57">check box group</a> or <a href="../../../sites/authoring/using/default-components-foundation.md#main-pars-title-30">radio group</a>.<br /> </p> 
  <h4>Example - Preloading A Dropdown List with Multiple Values</h4> 
  <p>A drop down list can be configured with your range of values for selection.</p> 
  <p>The <strong>Items Load Path</strong> can be used to access a list from a folder in the repository and preload these into the field:</p> 
  <ol> 
   <li>Create a new sling folder (<span class="code">sling:Folder</span>)<br /> for example, <span class="code">/etc/designs/&amp;lt;myDesign&amp;gt;/formlistvalues</span><br /> </li> 
   <li>Add a new property (for example, <span class="code">myList</span>) of type multi-value string (<span class="code">String[]</span>) to contain the list of drop down items. Content can also be imported using a script, such as with either a JSP script or cURL in a shell script.</li> 
   <li>Use the full path in the <strong>Items Load Path</strong> field:<br /> for example, <span class="code">/etc/designs/geometrixx/formlistvalues/myList</span><br /> </li> 
  </ol> 
  <p>Note that if the values in the<span class="code"> String[]</span> are of the formatted like this:</p> 
  <ul> 
   <li><span class="code">AL=Alabama</span></li> 
   <li><span class="code">AK=Alaska</span></li> 
   <li><i>etc.</i></li> 
  </ul> 
  <p>then AEM will generate the list as:</p> 
  <ul> 
   <li><span class="code">&amp;lt;option value="AL"&amp;gt;Alabama&amp;lt;/option&amp;gt;</span></li> 
   <li><span class="code">&amp;lt;option value="AK"&amp;gt;Alaska&amp;lt;/option&amp;gt;</span></li> 
  </ul> 
  <p>This feature can, for example, be put to good use in a multi-language setting.</p> 
  <h3>Developing your own Form Actions</h3> 
  <p>A form needs an action. An action defines the operation that is executed when the form is submitted with the user data.</p> 
  <p>A range of actions are provided with a standard AEM installation, these can be seen under:</p> 
  <p><span class="code"> /libs/foundation/components/form/actions</span></p> 
  <p>and in the <strong>Action Type</strong> list of the <strong>Form</strong> component:<br /> </p> 
  <img imageRotate="0" src="assets/chlimage_1-238.png" /> 
  <p>This section covers how you can develop your own form action for inclusion in this list. </p> 
  <p>You can add your own action under <span class="code">/apps</span> as follows:<br /> </p> 
  <ol> 
   <li><p>Create a node of type <span class="code">sling:Folder</span>. Specify a name that reflects the action to be implemented.<br /> </p> <p>For example:</p>  </li> 
   <li><p>On this node define the following properties, then click <strong>Save All</strong> to persist your changes:</p> 
    <ul> 
     <li><span class="code">sling:resourceType</span> - set as <span class="code">foundation/components/form/action</span></li> 
     <li><span class="code">componentGroup</span> - define as <span class="code">.hidden</span></li> 
     <li>Optionally: 
      <ul> 
       <li><span class="code">jcr:title</span> - specify a title of your choice, this will show in the drop-down selection list. If not set then the node name is shown<br /> </li> 
       <li><span class="code">jcr:description</span> - enter a description of your choice<br /> </li> 
      </ul> </li> 
    </ul> </li> 
   <li><p>In the folder create a dialog node:</p> 
    <ol> 
     <li>Add fields so that the author can edit the forms dialog once the action is chosen.</li> 
    </ol> </li> 
   <li><p>In the folder create either:</p> 
    <ol> 
     <li>A post script.<br /> The name of the script is <span class="code">post.POST.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">post.POST.jsp</span><br /> The post script is invoked when a form is submitted to process the form, it contains the code that handles the data arriving from the form <span class="code">POST</span>.</li> 
     <li>Add a forward script which is invoked when the form is submitted.<br /> The name of the script is <span class="code">forward.&amp;lt;<i>extension</i></span>&amp;gt;, e.g. <span class="code">forward.jsp</span><br /> This script can define a path. The current request is then forwarded to the specified path.<br /> </li> 
    </ol> <p>The necessary call is <span class="code">FormsHelper#setForwardPath</span> (2 variants). A typical case is to perform some validation, or logic, to find the target path and then forward to that path, letting the default Sling POST servlet do the actual storage in JCR.</p> <p>There could also be another servlet that does the actual processing, in such a case the form action and the <span class="code">forward.jsp</span> would only act as the "glue" code. An example of this is the mail action at <span class="code">/libs/foundation/components/form/actions/mail</span>, which forwards details to <span class="code">&amp;lt;currentpath&amp;gt;.mail.html </span>where a mail servlet sits.</p> <p>So:</p> 
    <ul> 
     <li>a <span class="code">post.POST.jsp</span> is useful for small operations that are fully done by the action itself</li> 
     <li>while the <span class="code">forward.jsp</span> is useful when only delegation is required.<br /> </li> 
    </ul> <p>The order of execution for the scripts is:</p> 
    <ul> 
     <li>Upon rendering the form (<span class="code">GET</span>):<br /> 
      <ol> 
       <li><span class="code">init.jsp</span></li> 
       <li>for all field's constraints: <span class="code">clientvalidation.jsp</span></li> 
       <li>form's validationRT: <span class="code">clientvalidation.jsp</span></li> 
       <li>form is loaded via load resource if set</li> 
       <li><span class="code">addfields.jsp</span> while inside rendering <span class="code">&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;</span></li> 
      </ol> </li> 
     <li>upon handling a form <span class="code">POST</span>:<br /> 
      <ol> 
       <li><span class="code">init.jsp</span></li> 
       <li>for all field's constraints: <span class="code">servervalidation.jsp</span></li> 
       <li>form's validationRT: <span class="code">servervalidation.jsp</span></li> 
       <li><span class="code">forward.jsp</span></li> 
       <li>if a forward path was set (<span class="code">FormsHelper.setForwardPath</span>), forward the request, then call <span class="code">cleanup.jsp</span></li> 
       <li>if no forward path was set, call <span class="code">post.POST.jsp</span> (ends here, no <span class="code">cleanup.jsp</span> called)</li> 
      </ol> </li> 
    </ul> </li> 
   <li><p>Again in the folder optionally add:</p> 
    <ol> 
     <li>A script for adding fields.<br /> The name of the script is <span class="code">addfields.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">addfields.jsp</span><br /> An addfields script is invoked immediately after the HTML for the form start is written. This allows the action to add custom input fields or other such HTML inside the form.<br /> </li> 
     <li>An initialization script.<br /> The name of the script is <span class="code">init.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">init.jsp</span><br /> This script is invoked when the form is rendered. It can be used to initialize action specifics. <span class="code"></span></li> 
     <li>A cleanup script.<br /> The name of the script is <span class="code">cleanup.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">cleanup.jsp</span><br /> This script can be used to perform cleanup.<br /> </li> 
    </ol> </li> 
   <li><p>Use the <strong>Forms</strong> component in a parsys. The <strong>Action Type</strong> drop down will now include your new action.</p> 
    <note> 
     <p>To see default actions that are part of the product: </p> 
     <p><span class="code"> /libs/foundation/components/form/actions</span></p> 
    </note></li> 
  </ol> 
  <h3>Developing your own Form Constraints</h3> 
  <p>Constraints can be imposed at two levels:</p> 
  <ul> 
   <li>For <a href="#constraintsforindividualfields">individual fields (see the following procedure)</a></li> 
   <li>As <a href="#formglobalconstraints">form-global validation</a></li> 
  </ul> 
  <h4>Constraints for Individual Fields</h4> 
  <p>You can add your own constraints for an individual field (under <span class="code">/apps</span>) as follows:<br /> </p> 
  <ol> 
   <li><p>Create a node of type <span class="code">sling:Folder</span>. Specify a name that reflects the constraint to be implemented.<br /> </p> <p>For example:</p>   </li> 
   <li><p>On this node define the following properties, then click <strong>Save All</strong> to persist your changes:</p> 
    <ul> 
     <li><span class="code">sling:resourceType</span> - set to <span class="code">foundation/components/form/constraint</span></li> 
     <li><span class="code">constraintMessage</span> - a customized message that will be shown if the field is not valid, according to the constraint, when the form is submitted<br /> </li> 
     <li>Optionally: 
      <ul> 
       <li><span class="code">jcr:title</span> - specify a title of your choice, this will show in the selection list. If not set then the node name is shown</li> 
       <li><span class="code">hint</span> - additional information, for the user, on how to use the field<br /> </li> 
      </ul> </li> 
    </ul> </li> 
   <li><p>Inside this folder, you can need the following scripts:</p> 
    <ul> 
     <li>A client validation script:<br /> The name of the script is <span class="code">clientvalidation.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">clientvalidation.jsp</span><br /> This is invoked when the form field is rendered. It can be used to create client javascript to validate the field on the client.</li> 
     <li>A server validation script:<br /> The name of the script is <span class="code">servervalidation.&amp;lt;<i>extension</i>&amp;gt;</span>, e.g. <span class="code">servervalidation.jsp</span><br /> This is invoked when the form is submitted. It can be used to validate the field on the server after it is submitted.</li> 
    </ul> </li> 
  </ol> 
  <note> 
   <p>Sample constraints can be seen under:</p> 
   <p><span class="code"> /libs/foundation/components/form/constraints </span><br /> </p> 
  </note> 
  <h4>Form-Global Constraints</h4> 
  <p>The form-global validation is specified by configuring a resource type in the start form component (<span class="code">validationRT</span>). For example:</p> 
  <p><span class="code"> apps/myProject/components/form/validation</span></p> 
  <p>You can then define:</p> 
  <ul> 
   <li>a <span class="code">clientvalidation.jsp</span> - injected after the field's client validation scripts</li> 
   <li>and a <span class="code">servervalidation.jsp</span> - also called after the individual field server validations upon a <span class="code">POST</span>.</li> 
  </ul> 
  <h3>Showing and Hiding Form Components</h3> 
  <p>You can configure your form to show or hide form components according to the value of other fields in the form. </p> 
  <p>Changing the visibility of a form field is useful when the field is needed only under specific conditions. For example, on a feedback form a question asks customers if they want product information sent to them in email. Upon selecting yes, a text field appears to enable the customer to type their email address.</p> 
  <p>Use the <strong>Edit Show/Hide Rules</strong> dialog box to specify the conditions under which a form component is shown or hidden.<br /> </p> 
  <img imageRotate="0" src="assets/showhideeditor.png" /> 
  <p>Use the fields at the top of the dialog box to specify the following information:</p> 
  <ul> 
   <li>Whether you are specifying conditions for hiding or showing the component.</li> 
   <li>Whether any or all of the conditions need to be true to show or hide the component.</li> 
  </ul> 
  <p>One or more conditions appear below these fields. A condition compares the value of another form component (on the same form) to a value. If the actual value in the field satisfies the condition, the condition evaluates to true. Conditions include the following information:</p> 
  <ul> 
   <li>The Title of the form field that is tested.<br /> </li> 
   <li>An operator.</li> 
   <li>A value against with the field value is compared.</li> 
  </ul> 
  <p>For example, a Radio Group component with the title <span class="code">Receive email notifications?</span><i> </i> contains <span class="code">Yes</span> and <span class="code">No</span> radio buttons. A Text Field component with the title of <span class="code">Email Address</span> uses the following condition so that it is visible if <span class="code">Yes</span> is selected:<br /> </p> 
  <img imageRotate="0" src="assets/showhidecondition.png" /> 
  <p>In Javascript, conditions use the value of the Element Name property to refer to fields. In the previous example, the Element Name property of the Radio Group component is <span class="code">contact</span>. The following code is the equivalent Javascript code for that example:</p> 
  <p><span class="code">((contact == "Yes"))</span></p> 
  <p><strong>To show or hide a form component:</strong></p> 
  <ol> 
   <li><p>Edit the specific form component.<br /> </p> </li> 
   <li><p>Select <strong>Show / Hide</strong> to open the <strong>Edit Show / Hide Rules</strong> dialog:</p> 
    <ul> 
     <li>In the first drop down list select either <strong>Show</strong> or <strong>Hide</strong> to specify whether your conditions determine whether to show or hide the component.</li> 
     <li>In the drop down list at the end of the top line select: 
      <ul> 
       <li><strong>all</strong> - if all conditions must be true to show or hide the component</li> 
       <li><strong>any</strong> - if only one or more conditions must be true to show or hide the component</li> 
      </ul> </li> 
     <li>In the condition line (one is presented as default) select a component, operator, and then specify a value.</li> 
     <li>Add more conditions if needed by clicking <strong>Add Condition</strong>.</li> 
    </ul> <p>For example:<br /> </p> <img imageRotate="0" src="assets/chlimage_1-239.png" /></li> 
   <li><p>Click <strong>OK</strong> to save the definition.<br /> </p> </li> 
   <li><p>After you saved your definition, an <strong>Edit Rules</strong> link appears next to the <strong>Show / Hide</strong> option in the form component properties. Click this link to open the <strong>Edit Show / Hide Rules</strong> dialog box to make changes.</p> <p>Click <strong>OK</strong> to save all changes. </p> <img imageRotate="0" src="assets/chlimage_1-240.png" /> 
    <note> 
     <p>The effects of Show / Hide definitions can be seen and tested:</p> 
     <ul> 
      <li>in <strong>Preview</strong> mode on the author environment (needs a page reload when first switching to preview)<br /> </li> 
      <li>on the publish environment</li> 
     </ul> 
    </note></li> 
  </ol> 
  <h4>Handling Broken Component References</h4> 
  <p>Show/hide conditions use the value of the Element Name property to reference other components in the form. The Show/Hide configuration is invalid when any of the conditions refer to a component that is deleted or has had the Element Name property changed. When this situation occurs, you need to manually update the conditions or an error occurs when the form loads.</p> 
  <p>When the Show/Hide configuration is invalid, the configuration is provided only as JavaScript code. Edit the code to correct the problems.The code uses the Element Name property that was originally used to reference the components.<br /> </p> 
  <h3>Developing Scripts for use with Forms</h3> 
  <p>For more information about the API elements that can be used when writing scripts see the <a href="/sites/developing/using/reference-materials/javadoc/com/day/cq/wcm/foundation/forms/package-summary">javadocs related to forms</a>.<br /> </p> 
  <p>You can use this for actions such as calling a service before the form is submitted and canceling the service if it fails:</p> 
  <ul> 
   <li>Define the validation resource type<br /> </li> 
   <li>Include a script for validation: 
    <ul> 
     <li>In your JSP, call your web service and create a <span class="code">com.day.cq.wcm.foundation.forms.ValidationInfo</span> object containing your error messages. If there are errors, form data will not be posted.</li> 
    </ul> </li> 
  </ul> 
 </body> 
</html>