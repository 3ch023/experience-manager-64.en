<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="2018-12-11T06:00:09.859-0500" name="lastPublishExternalDate" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES;topic_tags:platform;content_type:reference" name="cq:tags" /> 
  <meta content="AEM Tagging Framework" name="seoTitle" /> 
  <meta content="mgulati" name="cq:lastReplicatedBy" /> 
  <meta content="f0379843-c610-49fb-ad47-69976319d38e" name="jcr:uuid" /> 
  <meta content="2018-12-11T06:00:09.910-0500" name="cq:lastReplicated" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="2018-05-08T12:43:29.561-0400" name="locHandOffDate" /> 
  <meta content="mgulati@adobe.com" name="lr_lastReplicatedBy" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="Tag content and leverage the AEM Tagging infrastructure" name="seoDescription" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="mwpw_migration_script_version" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Guillaume Carlino" name="contentOwner" /> 
  <meta content="audience:developing" name="primaryAudienceTag" /> 
  <meta content="2017-10-12T21:46:58.665-0400" name="qaDate" /> 
  <meta content="2018-12-11T06:00:09.859-0500" name="publishExternalDate" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2018-12-11T06:00:09.859-0500" name="topicBrowsingSortDate" /> 
  <meta content="remove-legacypath-6-1" name="jcr:lastModifiedBy" /> 
  <meta content="false" name="isReadyForLocalization" /> 
  <meta content="/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform;/content/help/en/experience-manager/6-4/sites/developing/morehelp/platform" name="moreHelpPaths" /> 
  <meta content="trushton" name="cq:lastModifiedBy" /> 
  <meta content="/content/docs/en/aem/6-3/develop/tags/framework" name="qaNotes" /> 
  <meta content="products:SG_EXPERIENCEMANAGER/6.4/SITES" name="primaryProductTag" /> 
  <meta content="2017-10-31T16:16:42.708-0400" name="firstPublishExternalDate" /> 
  <meta content="2017-12-01T19:06:25.229-0500" name="jcr:created" /> 
  <meta content="AEM Tagging Framework" name="navTitle" /> 
  <meta content="2018-12-11T06:00:09.868-0500" name="cq:lastModified" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="https://helpx.adobe.com/experience-manager/6-4/sites/developing/using/framework.html" name="publishExternalURL" /> 
  <meta content="cf764fa5-9ee9-429c-a14a-a4b92db85fac" name="jcr:predecessors" /> 
  <meta content="AEM Tagging Framework" name="jcr:title" /> 
  <meta content="Activate" name="cq:lastReplicationAction" /> 
 </head> 
 <body> 
  <p>To tag content and leverage the AEM Tagging infrastructure :</p> 
  <ul> 
   <li>The tag must exist as a node of type <span class="code"><a href="#tagscqtagnodetype">cq:Tag</a></span> under the <a href="#taxonomyrootnode">taxonomy root node</a></li> 
   <li>The tagged content node's NodeType must include the <a href="#taggablecontentcqtaggablemixin"><span class="code">cq:Taggable</span></a> mixin</li> 
   <li>The <a href="#tagid">TagID</a> is added to the content node's <a href="#taggedcontentcqtagsproperty"><span class="code">cq:tags</span></a> property and resolves to a node of type <span class="code"><a href="#tagscqtagnodetype">cq:Tag</a></span></li> 
  </ul>  
  <h2>Tags : cq:Tag Node Type </h2> 
  <p>The declaration of a tag is captured in the repository in a node of type <span class="code">cq:Tag.</span></p> 
  <p>A tag can be a simple word (e.g. sky) or represent a hierarchical taxonomy (e.g. fruit/apple, meaning both the generic fruit and the more specific apple).</p> 
  <p>Tags are identified by a unique TagID.</p> 
  <p>A tag has optional meta information such as a title, localized titles and a description. The title should be displayed in user interfaces instead of the TagID, when present.</p> 
  <p>The tagging framework also provides the ability to restrict authors and site visitors to use only specific, predefined tags.</p> 
  <h3>Tag Characteristics</h3> 
  <ul style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;"> 
   <li>node type is <span class="code">cq:Tag</span></li> 
   <li>node name is a component of the <span class="code"><a href="#tagid">TagID</a></span></li> 
   <li>the <span class="code"><a href="#tagid">TagID</a></span> always includes a <a href="#tagnamespace">namespace</a></li> 
   <li>optional <span class="code">jcr:title</span> property (the Title to display in the UI)<br /> </li> 
   <li>optional <span class="code">jcr:description</span> property<br /> </li> 
   <li>when containing child nodes, is referred to as a <a href="#containertags">container tag</a></li> 
   <li>is stored in the repository below a base path called the <a href="#taxonomyrootnode">taxonomy root node</a></li> 
  </ul> 
  <h3>TagID</h3> 
  <p>A TagID identifies a path which resolves to a tag node in the repository. </p> 
  <p>Typically, the TagID is a shorthand TagID starting with the namespace or it can be an absolute TagID starting from the <a href="#taxonomyrootnode">taxonomy root node</a>.</p> 
  <p>When content is tagged, if it does not yet exist, the<span class="code"> <a href="#taggedcontentcqtagsproperty">cq:tags</a></span> property is added to the content node and the TagID is added to the property's String array value.</p> 
  <p>The TagID consists of a <a href="#tagnamespace">namespace</a> followed by the local TagID. <a href="#containertags">Container tags</a> have sub-tags that represent a hierarchical order in the taxonomy. Sub-tags can be used to reference tags same as any local TagID. For example tagging content with "fruit" is allowed, even if it is a container tag with sub-tags, such as "fruit/apple" and "fruit/banana".</p> 
  <h3>Taxonomy Root Node</h3> 
  <p>The taxonomy root node is the base path for all tags in the repository. The taxonomy root node must <em>not</em> be a node of type <span class="code"> 
    <g class="gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" data-gr-id="7" id="7">
      cq 
    </g> 
    <g class="gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep" data-gr-id="10" id="10">
      :Tag 
    </g></span>. </p> 
  <p>In AEM, the base path is <span class="code">/content/ 
    <g class="gr_ gr_31 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" data-gr-id="31" id="31">
      cq 
    </g> 
    <g class="gr_ gr_38 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep" data-gr-id="38" id="38">
      :tags 
    </g></span> and the root node is of type <span class="code"> 
    <g class="gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" data-gr-id="6" id="6">
      cq 
    </g> 
    <g class="gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep" data-gr-id="9" id="9">
      :Folder 
    </g></span>. </p> 
  <h3>Tag Namespace</h3> 
  <p>Namespaces allow to group things. The most typical use-case is to have a namespace per (web)site (for example public, internal, and portal) or per larger application (e.g. WCM, Assets, Communities) but namespaces can be used for various other needs. Namespaces are used in the user interface to only show the subset of tags (i.e. tags of a certain namespace) that is applicable to the current content.</p> 
  <p>The tag's namespace is the first level in the taxonomy subtree, which is the node immediately below the <a href="#taxonomyrootnode">taxonomy root node</a>. A namespace is a node of type <span class="code">cq:Tag</span> whose parent is not a <span class="code">cq:Tag </span>node type.</p> 
  <p>All tags have a namespace. If no namespace is specified, the tag is assigned to the default namespace, which is TagID <span class="code">default</span> (Title is <span class="code">Standard Tags), </span>that is <span class="code">/content/cq:tags/default.</span></p>  
  <h3>Container Tags</h3> 
  <p>A container tag is a node of type <span class="code">cq:Tag</span> containing any number and type of child nodes, which makes it possible to enhance the tag model with custom metadata.</p> 
  <p>Furthermore, container tags (or super-tags) in a taxonomy serve as the sub-summation of all sub-tags: for example content tagged with fruit/apple is considered to be tagged with fruit as well, i.e. searching for content just tagged with fruit would also find the content tagged with fruit/apple.</p>  
  <h3>Resolving TagIDs</h3> 
  <p>If the tag ID contains a colon ":", the colon separates the namespace from the tag or sub-taxonomy, which are then separated with normal slashes "/". If the tag ID does not have a colon, the default namespace is implied. </p> 
  <p>The standard and only location of tags is below /content/cq:tags.<br /> </p> 
  <p>Tag referencing non-existing paths or paths that do not point to a cq:Tag node are considered invalid and are ignored.<br /> <br /> The following table shows some sample TagIDs, their elements, and how the TagID resolves to an absolute path in the repository:</p> 
  <div style="position: absolute; left: -10000px; width: 9000px; top: 0px;">
    The following table shows some sample TagIDs, their elements, and how the TagID resolves to an absolute path in the repository : 
  </div> 
  <div style="position: absolute; left: -10000px; width: 9000px; top: 0px;">
    The following table shows some sample TagIDs, their elements, and how the TagID resolves to an absolute path in the repository : 
  </div>   
  <table border="1" cellpadding="2" cellspacing="2" width="100%"> 
   <tbody> 
    <tr> 
     <td><strong>TagID<br /> </strong></td> 
     <td><strong>Namespace</strong></td> 
     <td><strong>Local ID</strong></td> 
     <td><strong>Container tag(s)</strong></td> 
     <td><strong>Leaf tag</strong></td> 
     <td><strong>Repository<br /> Absolute tag path</strong></td> 
    </tr> 
    <tr> 
     <td>dam:fruit/apple/braeburn</td> 
     <td>dam</td> 
     <td>fruit/apple/braeburn</td> 
     <td>fruit, apple</td> 
     <td>braeburn</td> 
     <td>/content/cq:tags/dam/fruit/apple/braeburn</td> 
    </tr> 
    <tr> 
     <td>color/red</td> 
     <td>default</td> 
     <td>color/red</td> 
     <td>color</td> 
     <td>red</td> 
     <td>/content/cq:tags/default/color/red</td> 
    </tr> 
    <tr> 
     <td>sky</td> 
     <td>default</td> 
     <td>sky</td> 
     <td>(none)</td> 
     <td>sky</td> 
     <td>/content/cq:tags/default/sky</td> 
    </tr> 
    <tr> 
     <td>dam:</td> 
     <td>dam</td> 
     <td>(none)</td> 
     <td>(none)</td> 
     <td>(none, the namespace)</td> 
     <td>/content/cq:tags/dam</td> 
    </tr> 
    <tr> 
     <td>/content/cq:tags/category/car</td> 
     <td>category</td> 
     <td>car</td> 
     <td>car</td> 
     <td>car</td> 
     <td>/content/cq:tags/category/car</td> 
    </tr> 
   </tbody> 
  </table> 
  <h3>Localization of Tag Title</h3> 
  <p>When the tag includes the optional title string (<span class="code">jcr:title</span>) it is possible to localize the title for display by adding the property <span class="code">jcr:title.&amp;lt;locale&amp;gt;</span>.</p> 
  <p>For more details see</p> 
  <ul> 
   <li><a href="../../../sites/developing/using/building.md#tagsindifferentlanguages">Tags in Different Languages</a> - which describes use of the APIs</li> 
   <li><a href="../../../sites/administering/using/tags.md#managingtagsindifferentlanguages">Managing Tags in Different Languages</a> - which describes use of the Tagging console</li> 
  </ul> 
  <h3>Access Control</h3> 
  <p>Tags exist as nodes in the repository under the <a href="#taxonomyrootnode">taxonomy root node</a>. Allowing or denying authors and site visitors to create tags in a given namespace can be achieved by setting appropiate ACLs in the repository.</p> 
  <p>Also, denying read permissions for certains tags or namespaces will control the ability to apply tags to specific content.</p> 
  <p>A typical practice includes:</p> 
  <ul> 
   <li>Allowing the <span class="code">tag-administrators</span> group/role write access to all namespaces (add/modify under <span class="code">/content/cq:tags</span>). This group comes with AEM out-of-the-box.<br /> </li> 
   <li>Allowing users/authors read access to all the namespaces that should be readable to them (mostly all).</li> 
   <li>Allowing users/authors write access to those namespaces where tags should be freely definable by users/authors (add_node under <span class="code">/content/cq:tags/some_namespace</span>)</li> 
  </ul> 
  <h2>Taggable Content : cq:Taggable Mixin</h2> 
  <p>In order for application developers to attach tagging to a content type, the node's registration (<a href="https://jackrabbit.apache.org/node-type-notation.html" target="_blank">CND</a>) must include the <span class="code">cq:Taggable</span> mixin or the <span class="code">cq:OwnerTaggable</span> mixin.</p> 
  <p>The <span class="code">cq:OwnerTaggable</span> mixin, which inherits from <span class="code">cq:Taggable</span>, is intended to indicate that the content can be classified by the owner/author. In AEM, it is only an attribute of the <span class="code">cq:PageContent</span> node. The <span class="code">cq:OwnerTaggable</span> mixin is not required by the tagging framework.<br /> </p> 
  <note> 
   <p>It is recommended to only enable tags on the top-level node of an aggregated content item (or on its jcr:content node). Examples include:</p> 
   <ul> 
    <li>pages (<span class="code">cq:Page</span>) where the<span class="code"> jcr:content </span>node is of type <span class="code">cq:PageContent</span> which includes the <span class="code">cq:Taggable</span> mixin.</li> 
    <li>assets (<span class="code">cq:Asset</span>) where the <span class="code">jcr:content/metadata</span> node always has the <span class="code">cq:Taggable</span> mixin.<br /> </li> 
   </ul> 
  </note> 
  <h3>Node Type Notation (CND)</h3> 
  <p>Node Type definitions exist in the repository as CND files. The CND notation is defined as part of the JCR documentation <a href="https://jackrabbit.apache.org/node-type-notation.html" target="_blank">here</a>.</p> 
  <p>The essential definitions for the Node Types included in AEM are as follows:</p> 
  <codeblock gutter="true" class="syntax xml">
    [cq:Tag]&amp;nbsp;&gt;&amp;nbsp;mix:title,&amp;nbsp;nt:base!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;orderable!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;*&amp;nbsp;(undefined)&amp;nbsp;multiple!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;*&amp;nbsp;(undefined)!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;*&amp;nbsp;(nt:base)&amp;nbsp;=&amp;nbsp;cq:Tag&amp;nbsp;version!!discoiqbr!!!!discoiqbr!![cq:Taggable]!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mixin!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;cq:tags&amp;nbsp;(string)&amp;nbsp;multiple!!discoiqbr!!!!discoiqbr!![cq:OwnerTaggable]&amp;nbsp;&gt;&amp;nbsp;cq:Taggable!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mixin 
  </codeblock> 
  <h2>Tagged Content: cq:tags Property</h2> 
  <p>The <span class="code">cq:tags</span> property is a String array used to store one or more TagIDs when they are applied to content by authors or site visitors. The property only has meaning when added to a node which is defined with the <span class="code"><a href="#taggablecontentcqtaggablemixin">cq:Taggable</a></span> mixin.</p> 
  <note> 
   <p>To leverage AEM tagging functionality, custom developed applications should not define tag properties other than <span class="code">cq:tags</span>.</p> 
  </note> 
  <h2>Moving and Merging Tags</h2> 
  <p>The following is a description of the effects in the repository when moving or merging tags using the <a href="../../../sites/administering/using/tags.md">Tagging console</a>:<br /> </p> 
  <ul> 
   <li>When a tag A is moved or merged into tag B under <span class="code">/content/cq:tags</span>: 
    <ul> 
     <li>tag A is not deleted and gets a <span class="code">cq:movedTo</span> property.</li> 
     <li>tag B is created (in case of a move) and gets a <span class="code">cq:backlinks</span> property.</li> 
    </ul> </li> 
   <li><span class="code">cq:movedTo</span> points to tag B.<br /> This property means that tag A has been moved or merged into tag B. Moving tag B will update this property accordingly. Tag A is thus hidden and is only kept in the repository to resolve tag IDs in content nodes pointing to tag A. The tag garbage collector removes tags like tag A once no more content nodes point to them.<br /> A special value for the <span class="code">cq:movedTo</span> property is <span class="code">nirvana</span>: it is applied when the tag is deleted but cannot be removed from the repository because there are subtags with a <span class="code">cq:movedTo</span> that must be kept.</li> 
  </ul> 
  <p style="margin-left: 80px;"><strong>Note</strong>: <em>The "cq:movedTo" property is only added to the moved or merged tag if either of these conditions are met:</em><br /> <em>1. Tag is used in content (meaning it has a reference) OR</em><br /> <em>2. Tag has children that have already been moved.</em></p> 
  <ul> 
   <li><span class="code">cq:backlinks</span> keeps the references in the other direction, i.e. it keeps a list of all the tags that have been moved to or merged with tag B. This is mostly required to keep <span class="code">cq:movedTo </span>properties up to date when tag B is moved/merged/deleted as well or when tag B is activated, in which case all its backlinks tags must be activated as well.</li> 
  </ul> 
  <p style="margin-left: 80px;"><strong>Note</strong>: <em>The "cq:backlinks" property is only added to the moved or merged tag if either of these conditions are met:</em><br /> <em>1. Tag is used in content (meaning it has a reference) OR</em><br /> <em>2. Tag has children that have already been moved.</em></p> 
  <ul> 
   <li>Reading a <span class="code">cq:tags</span> property of a content node involves the following resolving: 
    <ol> 
     <li>If there is no match under <span class="code">/content/cq:tags</span>, no tag is returned.</li> 
     <li>If the tag has a <span class="code">cq:movedTo</span> property set, the referenced tag ID is followed.<br /> This step is repeated as long as the followed tag has a <span class="code">cq:movedTo</span> property.</li> 
     <li>If the followed tag does not have a <span class="code">cq:movedTo</span> property, the tag is read.</li> 
    </ol> </li> 
   <li>To publish the change when a tag has been moved or merged, the <span class="code">cq:Tag</span> node and all its backlinks must be replicated: this is automatically done when the tag is activated in the tag administration console.<br /> </li> 
   <li>Later updates to the page's <span class="code">cq:tags</span> property automatically clean up the "old" references. This is triggered because resolving a moved tag through the API returns the destination tag, thus providing the destination tag ID.<br /> </li> 
  </ul> 
 </body> 
</html>